@using PortaleRegione.DTO.Enum
@using PortaleRegione.DTO.Model
@model PortaleRegione.DTO.Response.EmendamentiViewModel

@{
    ViewBag.Title = string.Format("{0} {1}", Model.Atto.TIPI_ATTO.Tipo_Atto, Model.Atto.NAtto);

    var filtri_attivi = Request.Url.AbsolutePath.Contains("filtra");

    var classActiveTabPresentazione = "";
    var classActiveTabVotazione = "";

    switch (Model.Ordinamento)
    {
        case OrdinamentoEnum.Presentazione:
        case OrdinamentoEnum.Default:
            classActiveTabPresentazione = "active";
            break;
        case OrdinamentoEnum.Votazione:
            classActiveTabVotazione = "active";
            break;
        default:
            throw new ArgumentOutOfRangeException();
    }

    var url = Url.Action("RiepilogoAtti", "Atti", new
    {
        id = Model.Atto.UIDSeduta
    });
    if (Model.Mode == ClientModeEnum.TRATTAZIONE)
    {
        url = Url.Action("Index", "AttiTrattazione", new {id = Model.Atto.UIDSeduta});
    }
}

<div class="row">
    <div class="col s12">
        <a class="btn-floating waves-effect waves-light grey header-back" href="@url">
            <i class="material-icons">arrow_back</i>
        </a>
        <div class="row valign-wrapper" style="margin-bottom: 0px!important">
            <div class="col s6">
                <p style="position: absolute">Seduta del @Model.Atto.SEDUTE.Data_seduta</p>
                <h3>
                    <b>@ViewBag.Title</b>
                </h3>
            </div>
            <div class="col s6 right-align">
                @if (!string.IsNullOrEmpty(Model.Atto.Path_Testo_Atto))
                {
                    <a class="btn-flat pink-text"
                       href="@Url.Action("Download", "Atti", new {path = Model.Atto.Path_Testo_Atto})" title="Scarica documento">
                        <i class="material-icons right pink-text">cloud_download</i>
                        SCARICA DOCUMENTO
                    </a>
                }
                @if (Model.Mode == ClientModeEnum.TRATTAZIONE)
                {
                    if (classActiveTabVotazione == "active")
                    {
                        <a class="btn-flat purple-text"
                           href="@Url.Action("ViewerProietta", "Emendamenti", new { id = Model.Atto.UIDAtto })" title="Proietta">
                            <i class="material-icons right purple-text">subscriptions</i>
                            PROIETTA
                        </a>
                    }
                }
            </div>
        </div>
    </div>
</div>


<div id="emendamentiTable" class="row">
    @{
        <ul id="RiepilogoEmendamentiTabs" class="tabs tabs-fixed-width">
            @if (!filtri_attivi)
            {
                <li class="tab col s3">
                    <a class="@classActiveTabPresentazione" onclick="go('@Url.Action("RiepilogoEmendamenti", "Emendamenti", new {ordine = (int) OrdinamentoEnum.Presentazione, view = Model.ViewMode})')">Ordine Presentazione</a>
                </li>
                <li class="tab col s3">
                    <a class="@classActiveTabVotazione" onclick="go('@Url.Action("RiepilogoEmendamenti", "Emendamenti", new {ordine = (int) OrdinamentoEnum.Votazione, view = Model.ViewMode})')">Ordine Votazione</a>
                </li>
            }
            else
            {
                <li class="tab col s3">
                    <a class="@classActiveTabPresentazione" onclick="filtra_Ordinamento(@Html.Raw((int) OrdinamentoEnum.Presentazione))">Ordine Presentazione</a>
                </li>
                <li class="tab col s3">
                    <a class="@classActiveTabVotazione" onclick="filtra_Ordinamento(@Html.Raw((int) OrdinamentoEnum.Votazione))">Ordine Votazione</a>
                </li>
            }

        </ul>


        Html.RenderPartial("_PaginationBar", Model.Data.Paging);
        Html.RenderPartial("_Command_RiepilogoEM", new CommandRiepilogoModel { view = Model.ViewMode, mode = Model.Mode, IsAdmin = true, Atto = Model.Atto });

        <div class="row">
            @if (Model.ViewMode == ViewModeEnum.GRID)
            {
                Html.RenderPartial("_GridView_Admin_RiepilogoEM", Model);
            }
            else if (Model.ViewMode == ViewModeEnum.PREVIEW)
            {
                Html.RenderPartial("_ZoomView_RiepilogoEM", Model);
            }
        </div>
        Html.RenderPartial("_PaginationBar", Model.Data.Paging);

        Html.RenderPartial("_ComandiMassiviAdmin");
        if (Model.Ordinamento == OrdinamentoEnum.Votazione)
        {
            Html.RenderPartial("_ComandiMassiviOrdinamentoAdmin", Model.Atto.UIDAtto);
        }
    }
</div>

@{
    Html.RenderPartial("_PannelloStrumentiRicerche");
    Html.RenderPartial("_StampaModal", Model.Atto.UIDAtto);
}

<div id="modalEmendamentiUguali" class="modal">
    <div class="modal-content">
        <h5 id="emUgualiDisplayName"></h5>
        @using (Html.BeginForm("RaggruppaEmendamenti", "Emendamenti", FormMethod.Post, new { id = "formRaggruppa" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-group">
                <label>Seleziona colore:</label>
                <input id="txtColore" name="Colore" class="form-control" />
            </div>
        }
        <div class="modal-footer">
            <button type="button" class="btn modal-close grey">Annulla</button>
            <a id="btnConfermaUguali" class="btn blue">Colora</a>
        </div>
    </div>
</div>

<div id="modalEmendamentiAssegnaA" class="modal">
    <div class="modal-content">
        <h5 id="emProponenteDisplayName"></h5>
        @using (Html.BeginForm("AssegnaNuovoPorponente", "Emendamenti", FormMethod.Post, new { id = "formAssegnaA" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-group">
                <label>Seleziona proponente:</label>
                <div id="autocompleteProponenti" class="chips chips-autocomplete"></div>
            </div>
            <div class="form-group">
                <label>
                    <input id="chkAssegnaComeAssessore" type="checkbox" name="AssegnaComeAssessore" />
                    <span>Assegna come assessore</span>
                </label>
            </div>
        }
        <div class="modal-footer">
            <button type="button" class="btn modal-close grey">Annulla</button>
            <a id="btnConfermaNuovoProponente" class="btn blue">Conferma</a>
        </div>
    </div>
</div>

<div id="modalEmendamentiNotificaA" class="modal">
    <div class="modal-content">
        <h5 id="emProponenteDisplayName"></h5>
        <form method="post" id="formNotificaA">
            @Html.AntiForgeryToken()

            <div class="form-group">
                <label>Seleziona proponente:</label>
                <div id="autocompleteInvitati" class="chips chips-autocomplete"></div>
            </div>
        </form>
        <div class="modal-footer">
            <button type="button" class="btn modal-close grey">Annulla</button>
            <a id="btnConfermaNuovoProponente" class="btn blue">Conferma</a>
        </div>
    </div>
</div>

<script>
    $(window).on('load', async function() {
        $('#btnSearch').on("click",
            function() {
                openSearch();
            });
        $("#hdOrdine").val(@((int) Model.Ordinamento));
        var filters = @Html.Raw(Convert.ToInt16(Model.Data.Filters.Any()));
        if (filters == 0) {
            set_Filtri_EM({});
            set_ListaArticoliEM([]);
            set_ListaCommiEM([]);
            set_ListaLettereEM([]);
            $('#counterFilterActive').hide();
        } else {
            $('#counterFilterActive').show();
        }

        Filtri_EM_CaricaText1("filter_em_text1");
        Filtri_EM_CaricaText2("filter_em_text2");
        Filtri_EM_CaricaTextConnector("filter_em_text_connector");
        Filtri_EM_CaricaNumeroEM("filter_em_n_em");
        Filtri_EM_CaricaMy("filter_em_my");
        Filtri_EM_CaricaFinancials("filter_em_effetti_finanziari");
        Filtri_EM_CaricaStatiEM("filter_em_stato");
        Filtri_EM_CaricaTipiEM("filter_em_tipo");
        Filtri_EM_CaricaPartiEM("filter_em_parte");

        checkSelectedEM();
    });

    function filtra() {
        setTimeout(function() {
                $('body').removeClass('loaded');
            },
            200);
        $('#formFiltraEM').submit();
    }

    function filtra(page) {
        $('#inputFilterPage').val(page);
        setTimeout(function() {
                $('body').removeClass('loaded');
            },
            200);
        $('#formFiltraEM').submit();
    }

    function filtra_Paginazione(size) {
        $('#inputFilterPage').val(1);
        $('#inputFilterSize').val(size);
        setTimeout(function() {
                $('body').removeClass('loaded');
            },
            200);
        $('#formFiltraEM').submit();
    }

    function filtra_View(view) {
        $('#inputFilterView').val(view);
        setTimeout(function() {
                $('body').removeClass('loaded');
            },
            200);
        $('#formFiltraEM').submit();
    }

    function filtra_Ordinamento(ordine) {
        $('#inputFilterPage').val(1);
        $('#inputFilterOrdine').val(ordine);
        setTimeout(function() {
                $('body').removeClass('loaded');
            },
            200);
        $('#formFiltraEM').submit();
    }

    async function reset() {
        set_Filtri_EM({});
        $('#inputFilterPage').val(1);
        $('#inputFilterReset').val(1);
        Filtri_EM_CaricaText1("filter_em_text1");
        Filtri_EM_CaricaText2("filter_em_text2");
        Filtri_EM_CaricaTextConnector("filter_em_text_connector");
        Filtri_EM_CaricaNumeroEM("filter_em_n_em");
        Filtri_EM_CaricaMy("filter_em_my");
        Filtri_EM_CaricaFinancials("filter_em_effetti_finanziari");
        Filtri_EM_CaricaStatiEM("filter_em_stato");
        Filtri_EM_CaricaPartiEM("filter_em_parte");
        Filtri_EM_CaricaTipiEM("filter_em_tipo");

        $('#filter_em_gruppi option').each(function(index, opt) {
            if ($(opt).is(":checked")) {
                $(opt).attr("selected", false);
            }
        });
        $('#filter_em_proponente option').each(function(index, opt) {
            if ($(opt).is(":checked")) {
                $(opt).attr("selected", false);
            }
        });
        $('#filter_em_firmatari option').each(function(index, opt) {
            if ($(opt).is(":checked")) {
                $(opt).attr("selected", false);
            }
        });
        setTimeout(function() {
                $('body').removeClass('loaded');
            },
            200);
        $('#formFiltraEM').submit();
    }

    function ShowHideTableColumn(ctrl, enable) {
        if (enable) {
            $('#th' + ctrl).show();
            $('td[id^="td' + ctrl + '"]').show();
        } else {
            $('#th' + ctrl).hide();
            $('td[id^="td' + ctrl + '"]').hide();
        }
    }

    $('#btnCreaEM').attr('href', '@Url.Action("NuovoEmendamento", new {id = Model.Atto.UIDAtto})');

    function UgualiA() {
        $("#emUgualiDisplayName").empty();

        var documentiTotali = $("#hdTotaleDocumenti").val();
        var selezionaTutti = getSelezionaTutti();
        var listaEM = getListaEmendamenti();
        var totaleDoc = selezionaTutti ? documentiTotali - listaEM.length : listaEM.length;

        $("#txtColore").hexColorPicker();

        $("#emUgualiDisplayName").append("CAMBIA COLORE AGLI EMENDAMENTI (TOTALE: " + totaleDoc + ")");

        $("#modalEmendamentiUguali").modal("open");
        $("#btnConfermaUguali").on("click",
            function() {
                if ($("#txtColore").val() == '') {
                    ErrorAlert("Conferma il colore dalla tavollozza");
                } else {
                    $("#modalEmendamentiUguali").modal("close");

                    setTimeout(function() {
                            $('body').removeClass('loaded');
                        },
                        200);
                    $("#formRaggruppa").submit();
                }
            });
    }

    $("#formRaggruppa").submit(function(e) {
        e.preventDefault();
    }).validate({
        submitHandler: function(form) {
            var listaEM = getListaEmendamenti();
            var obj = {};
            obj.Colore = $("#txtColore").val();
            obj.Lista = listaEM;

            //submit via ajax
            $.ajax({
                url: baseUrl + "/emendamenti/raggruppa",
                type: "POST",
                data: JSON.stringify(obj),
                contentType: "application/json; charset=utf-8",
                dataType: "json"
            }).done(function (data) {
                var typeMessage = "error";
                var str = data.message;
                var pos = str.indexOf('OK');
                if (pos > 0) {
                    typeMessage = "success";
                }
                swal({
                    title: "Esito procedura:",
                    text: data.message,
                    icon: typeMessage,
                    button: "Ok"
                }).then(() => {
                    setSelezionaTutti(false);
                    setListaEmendamenti([]);
                    location.reload();
                });
            }).fail(function(err) {
                console.log("error", err);
                $("#modalEmendamentiUguali").modal("open");
                ErrorAlert(err.message);
            });

            return false; //This doesn't prevent the form from submitting.
        }
    });

    var chipInstanceAssegnaA = null;

    async function AssegnaA() {
        var personeInDB = await GetPersoneFromDB();
        var persone = [];
        $.each(personeInDB,
            function(index, item) {
                persone.push({
                    tag: item.DisplayName,
                    id: item.UID_persona
                });
            });
        var elems = document.querySelector("#autocompleteProponenti");
        var autocompleteDataOptions = {
            data: persone,
            limit: 10,
            minLength: 1
        };
        if (chipInstanceAssegnaA != null) {
            chipInstanceAssegnaA.destroy();
        }
        chipInstanceAssegnaA = M.Chips.init(elems,
            {
                autocompleteOptions: autocompleteDataOptions,
                data: [],
                onChipAdd: function(e, chip) {
                },
                onChipSelect: function(e, chip) {
                },
                onChipDelete: function(e, chip) {
                }
            });

        $("#modalEmendamentiAssegnaA").modal("open");

        $("#btnConfermaNuovoProponente").on("click",
            function() {
                setTimeout(function() {
                        $('body').removeClass('loaded');
                    },
                    200);
                $("#formAssegnaA").submit();
            });
    }

    $("#formAssegnaA").submit(function(e) {
        e.preventDefault();
    }).validate({
        submitHandler: function(form) {
            var listaEM = getListaEmendamenti();

            var proponenti = chipInstanceAssegnaA.getData();
            if (proponenti.length > 1) {
                //ERROR
                ErrorAlert("E' concesso selezionare solo un proponente");
                return null;
            }

            var obj = {};
            obj.NuovoProponente = proponenti[0].id;
            obj.IsAssessore = $("#chkAssegnaComeAssessore").checked;
            obj.Lista = listaEM;

            //submit via ajax
            $.ajax({
                url: baseUrl + "/emendamenti/assegna-nuovo-proponente",
                type: "POST",
                data: JSON.stringify(obj),
                contentType: "application/json; charset=utf-8",
                dataType: "json"
            }).done(function (data) {
                var typeMessage = "error";
                var str = data.message;
                var pos = str.indexOf('OK');
                if (pos > 0) {
                    typeMessage = "success";
                }
                swal({
                    title: "Esito procedura:",
                    text: data.message,
                    icon: typeMessage,
                    button: "Ok"
                }).then(() => {
                    setSelezionaTutti(false);
                    setListaEmendamenti([]);
                    go(data);
                });
            }).fail(function(err) {
                console.log("error", err);
                ErrorAlert(err.message);
            });

            return false; //This doesn't prevent the form from submitting.
        }
    });

    var chipInstanceNotificaA = null;

    async function NotificaA() {
        console.log("NOTIFCA");
        var personeInDB = await GetPersoneFromDB();
        var persone = [];
        $.each(personeInDB,
            function(index, item) {
                persone.push({
                    tag: item.DisplayName,
                    id: item.UID_persona
                });
            });
        var elems = document.querySelector("#autocompleteInvitati");
        var autocompleteDataOptions = {
            data: persone,
            limit: 10,
            minLength: 1
        };
        if (chipInstanceNotificaA != null) {
            chipInstanceNotificaA.destroy();
        }
        chipInstanceNotificaA = M.Chips.init(elems,
            {
                autocompleteOptions: autocompleteDataOptions,
                data: [],
                onChipAdd: function(e, chip) {
                },
                onChipSelect: function(e, chip) {
                },
                onChipDelete: function(e, chip) {
                }
            });

        $("#modalEmendamentiNotificaA").modal("open");

        $("#btnConfermaNotificaA").on("click",
            function() {
                setTimeout(function() {
                        $('body').removeClass('loaded');
                    },
                    200);
                $("#formNotificaA").submit();
            });
    }

    $("#formNotificaA").submit(function(e) {
        e.preventDefault();
    }).validate({
        submitHandler: function(form) {
            var listaEM = getListaEmendamenti();

            var destinatari = chipInstanceNotificaA.getData();

            var obj = {};
            obj.Pin = value;
            obj.Azione = 5;
            obj.Lista = listaEM;
            obj.ListaDestinatari = destinatari;

            $.ajax({
                url: baseUrl + "/emendamenti/azioni-massive",
                type: "POST",
                data: JSON.stringify(obj),
                contentType: "application/json; charset=utf-8",
                dataType: "json"
            }).done(function (data) {
                var typeMessage = "error";
                var str = data.message;
                var pos = str.indexOf('OK');
                if (pos > 0) {
                    typeMessage = "success";
                }
                swal({
                    title: "Esito procedura:",
                    text: data.message,
                    icon: typeMessage,
                    button: "Ok"
                }).then(() => {
                    setSelezionaTutti(false);
                    setListaEmendamenti([]);
                    go(data);
                });
            }).fail(function(err) {
                console.log("error", err);
                ErrorAlert(err.message);
            });

            return false; //This doesn't prevent the form from submitting.
        }
    });
</script>