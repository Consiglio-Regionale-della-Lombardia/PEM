@using PortaleRegione.Client.Helpers
@using PortaleRegione.DTO.Enum
@using PortaleRegione.DTO.Model
@using Utility = PortaleRegione.Common.Utility
@model PortaleRegione.DTO.Response.EmendamentiViewModel

@{
    ViewBag.Title = $"{PortaleRegione.Common.Utility.GetText_Tipo(Model.Atto.IDTipoAtto)} {Model.Atto.NAtto}";

    var filtri_attivi = Request.Url.AbsolutePath.Contains("filtra");

    var classActiveTabPresentazione = "";
    var classActiveTabVotazione = "";

    switch (Model.Ordinamento)
    {
        case OrdinamentoEnum.Presentazione:
        case OrdinamentoEnum.Default:
            classActiveTabPresentazione = "active";
            break;
        case OrdinamentoEnum.Votazione:
            classActiveTabVotazione = "active";
            break;
        default:
            throw new ArgumentOutOfRangeException();
    }

    var url = Url.Action("RiepilogoAtti", "Atti", new
    {
        id = Model.Atto.UIDSeduta
    });
    if (Model.Mode == ClientModeEnum.TRATTAZIONE)
    {
        url = Url.Action("Index", "AttiTrattazione", new { id = Model.Atto.UIDSeduta });
    }
}
<div id="pnlViewStandard">
    <div class="row">
        <div class="col s12">
            <a class="btn-floating waves-effect waves-light grey darken-3 header-back" href="@url">
                <i class="material-icons">arrow_back</i>
            </a>
            <div class="row valign-wrapper" style="margin-bottom: 0px !important">
                <div class="col s4">
                    <p style="position: absolute">Seduta del @Model.Atto.SEDUTE.Data_seduta</p>
                    <h3>
                        <b>@ViewBag.Title</b>
                    </h3>
                </div>
                <div class="col s8 right-align">
                    @if (Model.Ordinamento == OrdinamentoEnum.Votazione)
                    {
                        <button type="button" role="button" class="btn-flat pink-text tooltipped" data-tooltip="Esegui ordinamento dell'atto con drag&drop" onclick="viewOrdinamentoAtto();">
                            ORDINA ATTO
                        </button>
                    }
                    @if (!string.IsNullOrEmpty(Model.Atto.Path_Testo_Atto))
                    {
                        <button type="button" role="button" class="btn-flat pink-text tooltipped"
                           href="@Url.Action("Download", "Atti", new { path = Model.Atto.Path_Testo_Atto })" data-tooltip="Scarica documento">
                            SCARICA DOCUMENTO
                        </button>
                    }
                </div>
            </div>
        </div>
    </div>
    <div id="contentTable" class="row">
        @{
            <ul id="RiepilogoEmendamentiTabs" class="tabs tabs-fixed-width">
                @if (!filtri_attivi)
                {
                    <li class="tab col s3">
                        <button type="button" role="button" class="@classActiveTabPresentazione" onclick="go('@Url.Action("RiepilogoEmendamenti", "Emendamenti", new { ordine = (int)OrdinamentoEnum.Presentazione, view = Model.ViewMode })')">Ordine Presentazione</button>
                    </li>
                    <li class="tab col s3">
                        <button type="button" role="button" class="@classActiveTabVotazione" onclick="go('@Url.Action("RiepilogoEmendamenti", "Emendamenti", new { ordine = (int)OrdinamentoEnum.Votazione, view = Model.ViewMode })')">Ordine Votazione</button>
                    </li>
                }
                else
                {
                    <li class="tab col s3">
                        <button type="button" role="button" class="@classActiveTabPresentazione" onclick="filtra_Ordinamento(@Html.Raw((int)OrdinamentoEnum.Presentazione))">Ordine Presentazione</button>
                    </li>
                    <li class="tab col s3">
                        <button type="button" role="button" class="@classActiveTabVotazione" onclick="filtra_Ordinamento(@Html.Raw((int)OrdinamentoEnum.Votazione))">Ordine Votazione</button>
                    </li>
                }

            </ul>

            Html.RenderPartial("_DataRiepilogoEMPartial", Model);
            Html.RenderPartial("_ComandiMassiviAdmin");
        }
    </div>
</div>
<div id="pnlViewTestoAtto" class="card" style="display: none;">
    <div class="card-content">
        <div class="row">
            <div class="col l12 right-align">
                <button type="button" role="button" class="btn-flat pink-text tooltipped" data-tooltip="Visualizza la griglia emendamenti" onclick="viewStandard();">
                    <i class="material-icons right pink-text">apps</i>
                    VISUALIZZA EM
                </button>
            </div>
            <div class="col l12">
                <table id="tableTesti" class="tableTesti">
                    <tr>
                        <td colspan="2" style="text-align: center; font-weight: bold;">
                            @Utility.GetText_Tipo(Model.Atto.IDTipoAtto)
                            @Model.Atto.NAtto
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2" style="text-align: center">
                            @Model.Atto.Oggetto
                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
</div>
<div id="pnlOrdinamento" style="display: none;">
    <div class="row">
        <div class="col l12 right-align">
            <button type="button" role="button" class="btn-flat pink-text tooltipped" data-tooltip="Visualizza la griglia emendamenti" onclick="location.reload();">
                <i class="material-icons right pink-text">apps</i>
                VISUALIZZA EM
            </button>
        </div>
        <div class="col l12">
            <div class="row">
                <div class="col s1">
                    <ul id="tablePositions" class="collection">
                    </ul>
                </div>
                <div class="col s11">
                    <ul id="tableOrdinamento" class="collection sortable">
                    </ul>
                </div>
            </div>
        </div>
    </div>
    @{
        Html.RenderPartial("_ComandiOrdinamento", Model.Atto.UIDAtto);
    }
</div>

@{
    Html.RenderPartial("_PannelloStrumentiRicerche");
    Html.RenderPartial("_TestiAttoScript", Model);
    Html.RenderPartial("_OrdinamentoAttoScript", Model);
    Html.RenderPartial("_StampaModal", Model.Atto.UIDAtto);
    Html.RenderPartial("_MetaDatiFormPartial");
}

<div id="modalEmendamentiUguali" class="modal">
    <div class="modal-content">
        <h5 id="emUgualiDisplayName"></h5>
        @using (Html.BeginForm("RaggruppaEmendamenti", "Emendamenti", FormMethod.Post, new { id = "formRaggruppa" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-group">
                <label>Seleziona colore:</label>
                <input id="txtColore" name="Colore" class="form-control" />
            </div>
        }
        <div class="modal-footer">
            <button type="button" class="btn modal-close grey">Annulla</button>
            <a id="btnConfermaUguali" class="btn blue">Colora</a>
        </div>
    </div>
</div>

<div id="modalEmendamentiAssegnaA" class="modal">
    <div class="modal-content">
        <h5 id="emProponenteDisplayName"></h5>
        @using (Html.BeginForm("AssegnaNuovoPorponente", "Emendamenti", FormMethod.Post, new { id = "formAssegnaA" }))
        {
            @Html.AntiForgeryToken()

            <div class="row">
                <div class="col s12 l12">
                    <label>
                        <input id="chkAssegnaComeAssessore" type="checkbox" name="AssegnaComeAssessore" />
                        <span>Assegna come assessore</span>
                    </label>
                </div>
            </div>
            <div class="row">
                <div class="col s12 l12">
                    <label>Seleziona proponente:</label>
                    <div id="autocompleteProponenti" class="chips chips-autocomplete"></div>
                </div>
            </div>
        }
        <div class="modal-footer">
            <button type="button" class="btn modal-close grey">Annulla</button>
            <a id="btnConfermaNuovoProponente" class="btn blue">Conferma</a>
        </div>
    </div>
</div>

<div id="modalEmendamentiNotificaA" class="modal">
    <div class="modal-content">
        <h5 id="emProponenteDisplayName"></h5>
        <form method="post" id="formNotificaA">
            @Html.AntiForgeryToken()

            <div class="form-group">
                <label>Seleziona proponente:</label>
                <div id="autocompleteInvitati" class="chips chips-autocomplete"></div>
            </div>
        </form>
        <div class="modal-footer">
            <button type="button" class="btn modal-close grey">Annulla</button>
            <a id="btnConfermaNuovoProponente" class="btn blue">Conferma</a>
        </div>
    </div>
</div>

<script>
    $(window).on('load',
        function() {
            $('#btnSearch').on("click",
                function() {
                    openSearch();
                });

            waiting(true);

            $("#hdOrdine").val(@((int)Model.Ordinamento));
            var filters = @Html.Raw(Convert.ToInt16(Model.Data.Filters.Any()));
            if (filters == 0) {
                set_Filtri_EM({});
                set_ListaArticoliEM([]);
                set_ListaCommiEM([]);
                set_ListaLettereEM([]);
                $('#counterFilterActive').hide();
            } else {
                $('#counterFilterActive').show();
            }

            Filtri_EM_CaricaText1("filter_em_text1");
            Filtri_EM_CaricaText2("filter_em_text2");
            Filtri_EM_CaricaTextConnector("filter_em_text_connector");
            Filtri_EM_CaricaNumeroEM("filter_em_n_em");
            Filtri_EM_CaricaMy("filter_em_my");
            Filtri_EM_CaricaFinancials("filter_em_effetti_finanziari");
            Filtri_EM_CaricaStatiEM("filter_em_stato");
            Filtri_EM_CaricaTipiEM("filter_em_tipo");
            Filtri_EM_CaricaPartiEM("filter_em_parte");

            checkSelectedEM();
            waiting(false);
        });

	function viewStandard() {
		$('#btnSearch').show();
		$('#pnlViewStandard').show();
		$('#pnlViewTestoAtto').hide();
		$('#pnlOrdinamento').hide();
	}

    function filtra() {
        setTimeout(function() {
                $('body').removeClass('loaded');
            },
            200);
        $('#formFiltraEM').submit();
    }

    function filtra(page) {
        $('#inputFilterPage').val(page);
        setTimeout(function() {
                $('body').removeClass('loaded');
            },
            200);
        $('#formFiltraEM').submit();
    }

    function filtra_Paginazione(size) {
        $('#inputFilterPage').val(1);
        $('#inputFilterSize').val(size);
        setTimeout(function() {
                $('body').removeClass('loaded');
            },
            200);
        $('#formFiltraEM').submit();
    }

    function filtra_View(view) {
        $('#inputFilterView').val(view);
        setTimeout(function() {
                $('body').removeClass('loaded');
            },
            200);
        $('#formFiltraEM').submit();
    }

    function filtra_Ordinamento(ordine) {
        $('#inputFilterPage').val(1);
        $('#inputFilterOrdine').val(ordine);
        setTimeout(function() {
                $('body').removeClass('loaded');
            },
            200);
        $('#formFiltraEM').submit();
    }

    async function reset() {
        set_Filtri_EM({});
        $('#inputFilterPage').val(1);
        $('#inputFilterReset').val(1);
        Filtri_EM_CaricaText1("filter_em_text1");
        Filtri_EM_CaricaText2("filter_em_text2");
        Filtri_EM_CaricaTextConnector("filter_em_text_connector");
        Filtri_EM_CaricaNumeroEM("filter_em_n_em");
        Filtri_EM_CaricaMy("filter_em_my");
        Filtri_EM_CaricaFinancials("filter_em_effetti_finanziari");
        Filtri_EM_CaricaStatiEM("filter_em_stato");
        Filtri_EM_CaricaPartiEM("filter_em_parte");
        Filtri_EM_CaricaTipiEM("filter_em_tipo");

        $('#filter_em_gruppi option').each(function(index, opt) {
            if ($(opt).is(":checked")) {
                $(opt).attr("selected", false);
            }
        });
        $('#filter_em_proponente option').each(function(index, opt) {
            if ($(opt).is(":checked")) {
                $(opt).attr("selected", false);
            }
        });
        $('#filter_em_firmatari option').each(function(index, opt) {
            if ($(opt).is(":checked")) {
                $(opt).attr("selected", false);
            }
        });
        setTimeout(function() {
                $('body').removeClass('loaded');
            },
            200);
        $('#formFiltraEM').submit();
    }

    function ShowHideTableColumn(ctrl, enable) {
        if (enable) {
            $('#th' + ctrl).show();
            $('td[id^="td' + ctrl + '"]').show();
        } else {
            $('#th' + ctrl).hide();
            $('td[id^="td' + ctrl + '"]').hide();
        }
    }

    $('#btnCreaEM').attr('onclick', 'goIntoOtherTab("@Url.Action("NuovoEmendamento", new { id = Model.Atto.UIDAtto })")');

    function UgualiA() {
        $("#emUgualiDisplayName").empty();

        var selezionaTutti = getSelezionaTutti();
        var listaEM = getListaEmendamenti();
		var totaleDoc = GetCounterAlert(listaEM, selezionaTutti);

        $("#txtColore").hexColorPicker();

        $("#emUgualiDisplayName").append("CAMBIA COLORE AGLI EMENDAMENTI (TOTALE: " + totaleDoc + ")");

        $("#modalEmendamentiUguali").modal("open");
        $("#btnConfermaUguali").on("click",
            function() {
                if ($("#txtColore").val() == '') {
                    swal({
                        title: "Errore",
                        text: "Conferma il colore dalla tavollozza",
                        icon: "error"
                    });
                } else {
                    $("#modalEmendamentiUguali").modal("close");

                    setTimeout(function() {
                            $('body').removeClass('loaded');
                        },
                        200);
                    $("#formRaggruppa").submit();
                }
            });
    }

    $("#formRaggruppa").submit(function(e) {
        e.preventDefault();
    }).validate({
        submitHandler: function(form) {
            var listaEM = getListaEmendamenti();
            var obj = {};
            obj.Colore = $("#txtColore").val();
            obj.Lista = listaEM;
			obj.Tutti = getSelezionaTutti();

            //submit via ajax
            $.ajax({
                url: baseUrl + "/emendamenti/raggruppa",
                type: "POST",
                data: JSON.stringify(obj),
                contentType: "application/json; charset=utf-8",
                dataType: "json"
            }).done(function(data) {
                var typeMessage = "error";
                var str = data.message;
                var pos = str.indexOf('OK');
                if (pos > 0) {
                    typeMessage = "success";
                }
                swal({
                    title: "Esito procedura",
                    text: data.message,
                    icon: typeMessage,
                    button: "Ok"
                }).then(() => {
                    setSelezionaTutti(false);
                    setListaEmendamenti([]);
                    location.reload();
                });
            }).fail(function(err) {
                console.log("error", err);
                $("#modalEmendamentiUguali").modal("open");
                Error(err);
            });

            return false; //This doesn't prevent the form from submitting.
        }
    });

    var chipInstanceAssegnaA = null;

    async function AssegnaA() {
        var personeInDB = await GetPersoneFromDB();
        var persone = [];
        $.each(personeInDB,
            function(index, item) {
                persone.push({
                    tag: item.DisplayName,
                    id: item.UID_persona
                });
            });
        var elems = document.querySelector("#autocompleteProponenti");
        var autocompleteDataOptions = {
            data: persone,
            limit: 10,
            minLength: 1
        };
        if (chipInstanceAssegnaA != null) {
            chipInstanceAssegnaA.destroy();
        }
        chipInstanceAssegnaA = M.Chips.init(elems,
            {
                autocompleteOptions: autocompleteDataOptions,
                data: [],
                onChipAdd: function(e, chip) {
                },
                onChipSelect: function(e, chip) {
                },
                onChipDelete: function(e, chip) {
                }
            });

        $("#modalEmendamentiAssegnaA").modal("open");

        $("#btnConfermaNuovoProponente").on("click",
            function() {
                waiting(true);
                $("#formAssegnaA").submit();
            });
    }

    $("#formAssegnaA").submit(function(e) {
        e.preventDefault();
    }).validate({
        submitHandler: function(form) {
            var listaEM = getListaEmendamenti();

            var proponenti = chipInstanceAssegnaA.getData();
            if (proponenti.length > 1) {
                //ERROR
                swal({
                    title: "Errore",
                    text: "E' concesso selezionare solo un proponente",
                    icon: "error"
                });
                return null;
            }

            var obj = {};
            obj.NuovoProponente = proponenti[0].id;
            obj.IsAssessore = $("#chkAssegnaComeAssessore").checked;
            obj.Lista = listaEM;
			obj.Tutti = getSelezionaTutti();

            //submit via ajax
            $.ajax({
                url: baseUrl + "/emendamenti/assegna-nuovo-proponente",
                type: "POST",
                data: JSON.stringify(obj),
                contentType: "application/json; charset=utf-8",
                dataType: "json"
            }).done(function(data) {
                var typeMessage = "error";
                var str = data.message;
                var pos = str.indexOf('OK');
                if (pos > 0) {
                    typeMessage = "success";
                }
                waiting(false);
                swal({
                    title: "Esito procedura",
                    text: data.message,
                    icon: typeMessage,
                    button: "Ok"
                }).then(() => {
                    setSelezionaTutti(false);
                    setListaEmendamenti([]);
                    location.reload();
                });
            }).fail(function(err) {
                console.log("error", err);
                waiting(false);
                Error(err);
            });

            return false; //This doesn't prevent the form from submitting.
        }
    });

    var chipInstanceNotificaA = null;

    async function NotificaAEM() {
        console.log("NOTIFCA");
        var personeInDB = await GetPersoneFromDB();
        var persone = [];
        $.each(personeInDB,
            function(index, item) {
                persone.push({
                    tag: item.DisplayName,
                    id: item.UID_persona
                });
            });
        var elems = document.querySelector("#autocompleteInvitati");
        var autocompleteDataOptions = {
            data: persone,
            limit: 10,
            minLength: 1
        };
        if (chipInstanceNotificaA != null) {
            chipInstanceNotificaA.destroy();
        }
        chipInstanceNotificaA = M.Chips.init(elems,
            {
                autocompleteOptions: autocompleteDataOptions,
                data: [],
                onChipAdd: function(e, chip) {
                },
                onChipSelect: function(e, chip) {
                },
                onChipDelete: function(e, chip) {
                }
            });

        $("#modalEmendamentiNotificaA").modal("open");

        $("#btnConfermaNotificaA").on("click",
            function() {
                setTimeout(function() {
                        $('body').removeClass('loaded');
                    },
                    200);
                $("#formNotificaA").submit();
            });
    }

    $("#formNotificaA").submit(function(e) {
        e.preventDefault();
    }).validate({
        submitHandler: function(form) {
            var listaEM = getListaEmendamenti();

            var destinatari = chipInstanceNotificaA.getData();

            var obj = {};
            obj.Pin = value;
            obj.Azione = 5;
            obj.Lista = listaEM;
            obj.ListaDestinatari = destinatari;
			obj.Tutti = getSelezionaTutti();

            $.ajax({
                url: baseUrl + "/emendamenti/azioni-massive",
                type: "POST",
                data: JSON.stringify(obj),
                contentType: "application/json; charset=utf-8",
                dataType: "json"
            }).done(function(data) {
                var typeMessage = "error";
                var str = data.message;
                var pos = str.indexOf('OK');
                if (pos > 0) {
                    typeMessage = "success";
                }
                swal({
                    title: "Esito procedura",
                    text: data.message,
                    icon: typeMessage,
                    button: "Ok"
                }).then(() => {
                    setSelezionaTutti(false);
                    setListaEmendamenti([]);
                    go(data);
                });
            }).fail(function(err) {
                console.log("error", err);
                Error(err);
            });

            return false; //This doesn't prevent the form from submitting.
        }
    });

    window.addEventListener("message", (event) => {
	    // Controlla l'origine del messaggio per motivi di sicurezza
	    if (event.origin !== "@AppSettingsConfiguration.URL_CLIENT") { // sostituisci con il tuo dominio
		    return;
	    }

	    if (event.data === "aggiornaPadre") {
		    location.reload(); // Ricarica la pagina padre
	    }
    }, false);
</script>