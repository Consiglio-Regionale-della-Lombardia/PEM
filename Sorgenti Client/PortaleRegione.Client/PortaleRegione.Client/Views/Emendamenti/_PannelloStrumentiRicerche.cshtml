@using PortaleRegione.DTO.Enum
<div id="slide-out-DX" class="sidenav sidenav-search" style="overflow: auto !important">
<ul class="collapsible">
<li class="active">
    <div class="collapsible-header teal white-text"><i class="material-icons">search</i>Ricerca</div>
    <div class="collapsible-body">
        @using (Html.BeginForm("Filtri_RiepilogoEM", "Emendamenti", FormMethod.Post, new {id = "formFiltraEM"}))
        {
            @Html.AntiForgeryToken()

            <input id="inputFilterReset" type="hidden" name="reset" value="0"/>
            <input id="inputFilterView" type="hidden" name="view" value="@Model.ViewMode"/>
            <input id="inputFilterPage" type="hidden" name="page" value="@Model.Data.Paging.Page"/>
            <input id="inputFilterSize" type="hidden" name="size" value="@Model.Data.Paging.Limit"/>
            <input type="hidden" id="hdMode" name="mode" value="@((int)Model.Mode)"/>
            <input type="hidden" id="inputFilterOrdine" name="ordine" value="@((int) Model.Ordinamento)"/>
            <input type="hidden" id="inputFiltroAtto" name="atto" value="@Model.Atto.UIDAtto"/>

            <div class="row" style="margin: 0 !important">
                <div class="col s12">
                    <div class="row valign-wrapper" style="margin-bottom: unset !important; margin-top: unset !important;">
                        <div class="input-field col s5">
                            <input placeholder="Immetti qui il testo che vuoi cercare" class="validate" type="text" id="filter_em_text1" name="filtro_text1" onchange="filter_em_text1_OnChange()"/>
                            <label for="filter_em_text1">Cerca nel testo</label>
                        </div>
                        <div class="input-field col s2">
                            <select id="filter_em_text_connector" name="filtro_text_connector" onchange="filter_em_text_connector_OnChange()">
                            </select>
                        </div>
                        <div class="input-field col s5">
                            <input placeholder="Immetti qui il testo che vuoi cercare" class="validate" type="text" id="filter_em_text2" name="filtro_text2" onchange="filter_em_text2_OnChange()"/>
                            <label for="filter_em_text2">Cerca nel testo</label>
                        </div>
                    </div>
                </div>
                <div class="col s12">
                    <div class="row valign-wrapper" style="margin-bottom: unset !important; margin-top: unset !important;">
                        <div class="input-field col s2">
                            <input placeholder="..." class="validate" type="text" id="filter_em_n_em" name="filtro_n_em" onchange="filter_em_n_em_OnChange()"/>
                            <label for="filter_em_n_em">Numero EM</label>
                        </div>
                        <div class="input-field col s5">
                            <label class="active">Tipo</label>
                            <select id="filter_em_tipo" name="filtro_tipo" onchange="filter_em_tipo_OnChange()"></select>
                        </div>
                        <div class="input-field col s5">
                            <label class="active">Stato</label>
                            <select id="filter_em_stato" name="filtro_stato" onchange="filter_em_stato_OnChange()"></select>
                        </div>
                    </div>
                </div>

                <div class="input-field col s12">
                    <label class="active">Parte</label>
                    <select id="filter_em_parte" name="filtro_parte" onchange="filter_em_parte_OnChange()"></select>
                </div>
                <div class="col s12">
                    <div class="row" style="margin-bottom: unset !important; margin-top: unset !important;">
                        @*ARTICOLI - COMMI - LETTERE*@
                        <div id="pnlFiltroArticolo" class="input-field col s4" style="display: none;">
                            <label class="active">Articolo</label>
                            <select id="filter_em_parte_articolo" name="filtro_parte_articolo"
                                    onchange="filter_em_parte_articolo_OnChange()">
                            </select>
                        </div>
                        <div id="pnlFiltroComma" class="input-field col s4" style="display: none;">
                            <label class="active">Comma</label>
                            <select id="filter_em_parte_comma" name="filtro_parte_comma"
                                    onchange="filter_em_parte_comma_OnChange()">
                            </select>
                        </div>
                        <div id="pnlFiltroLettera" class="input-field col s4" style="display: none;">
                            <label class="active">Lettera</label>
                            <select id="filter_em_parte_lettera" name="filtro_parte_lettera"
                                    onchange="filter_em_parte_lettera_OnChange()">
                            </select>
                        </div>

                        <div id="pnlFiltroLetteraOLD" class="input-field col s4" style="display: none;">
                            <label for="filter_em_parte_letteraOLD">Lettera</label>
                            <input placeholder="Immetti qui la lettera" class="validate" type="text" id="filter_em_parte_letteraOLD" name="filtro_parte_letteraOLD" onchange="filter_em_parte_letteraOLD_OnChange()"/>
                        </div>

                        @*TITOLO*@
                        <div id="pnlFiltroTitolo" class="input-field col s12" style="display: none;">
                            <label for="filter_em_parte_titolo">Titolo</label>
                            <input placeholder="Immetti qui il titolo che vuoi cercare" class="validate" type="text" id="filter_em_parte_titolo" name="filtro_parte_titolo" onchange="filter_em_parte_titolo_OnChange()"/>
                        </div>

                        @*CAPO*@
                        <div id="pnlFiltroCapo" class="input-field col s12" style="display: none;">
                            <label for="filter_em_parte_capo">Capo</label>
                            <input placeholder="Immetti qui il capo che vuoi cercare" class="validate" type="text" id="filter_em_parte_capo" name="filtro_parte_capo" onchange="filter_em_parte_capo_OnChange()"/>
                        </div>

                        @*MISSIONE*@
                        <div id="pnlFiltroMissione" class="input-field col s8" style="display: none;">
                            <label class="active">Missione</label>
                            <select id="filter_em_parte_missione" name="filtro_parte_missione" class="form-control"
                                    onchange="filter_em_parte_missione_OnChange()">
                            </select>
                        </div>

                        @*PROGRAMMA*@
                        <div id="pnlFiltroProgramma" class="input-field col s4" style="display: none;">
                            <label for="filter_em_parte_programma">Programma</label>
                            <input placeholder="Immetti qui il programma" class="validate" type="text" id="filter_em_parte_programma" name="filtro_parte_programma" class="form-control" onchange="filter_em_parte_programma_OnChange()"/>
                        </div>
                    </div>
                </div>
                <div id="pnlFiltroGruppo" style="display: none;" class="input-field col s12">
                    <select multiple id="filter_em_gruppi" name="filtro_gruppo" onchange="filter_em_gruppi_OnChange()">
                    </select>
                    <label>Gruppi</label>
                </div>
                <div class="input-field col s12">
                    <select multiple id="filter_em_proponente" name="filtro_proponente" onchange="filter_em_proponenti_OnChange()"></select>
                    <label>Proponenti</label>
                </div>
                <div class="input-field col s12">
                    <select multiple id="filter_em_firmatari" name="filtro_firmatari" onchange="filter_em_firmatari_OnChange()"></select>
                    <label>Firmatari</label>
                </div>
                <div class="input-field col s12">
                    <label>
                        <input type="checkbox" id="filter_em_my" name="filtro_my" onchange="filter_em_my_OnChange()">
                        <span for="filter_em_my">Visualizza i miei EM</span>
                    </label>
                </div>
                <div class="input-field col s12">
                    <label>
                        <input type="checkbox" id="filter_em_effetti_finanziari" name="filtro_effetti_finanziari" onchange="filter_em_financials_OnChange()">
                        <span for="filter_em_effetti_finanziari">Visualizza solo EM con effetti finanziari</span>
                    </label>
                </div>
            </div>
        }
        <div class="row">
            <div class="col s12 center">
                <a class="btn chip hoverable blue center white-text" onclick="filtra(1)">
                    <i class="icon material-icons">search</i> Filtra
                </a>
                <a class="btn chip hoverable grey center white-text" onclick="reset()">
                    <i class="icon material-icons">close</i> Reset
                </a>
            </div>
        </div>
    </div>
</li>
@if (User.IsInRole(RuoliExt.Amministratore_PEM)
     || User.IsInRole(RuoliExt.Segreteria_Assemblea))
{
    <li>
        <div class="collapsible-header purple white-text"><i class="material-icons">filter_list</i>Colonne</div>
        <div class="collapsible-body">
            <div class="row" style="margin-bottom: unset !important; margin-top: unset !important; padding-left: 13px;">
                <div class="col s12">
                    <label>
                        <input type="checkbox" id="colNumeroEM" checked="checked" onchange="ShowHideTableColumn('NumeroEM', this.checked)">
                        <span for="colNumeroEM">Numero EM</span>
                    </label>
                </div>
                <div class="col s12">
                    <label>
                        <input type="checkbox" id="colDataDeposito" checked="checked" onchange="ShowHideTableColumn('DataDeposito', this.checked)">
                        <span for="colDataDeposito">Data Deposito</span>
                    </label>
                </div>
                <div class="col s12">
                    <label>
                        <input type="checkbox" id="colStato" checked="checked" onchange="ShowHideTableColumn('Stato', this.checked)">
                        <span for="colStato">Stato</span>
                    </label>
                </div>
                <div class="col s12">
                    <label>
                        <input type="checkbox" id="colTipo" checked="checked" onchange="ShowHideTableColumn('Tipo', this.checked)">
                        <span for="colTipo">Tipo</span>
                    </label>
                </div>
                <div class="col s12">
                    <label>
                        <input type="checkbox" id="colParte" checked="checked" onchange="ShowHideTableColumn('Parte', this.checked)">
                        <span for="colParte">Parte</span>
                    </label>
                </div>
                <div class="col s12">
                    <label>
                        <input type="checkbox" id="colArticolo" checked="checked" onchange="ShowHideTableColumn('Articolo', this.checked)">
                        <span for="colArticolo">Articolo</span>
                    </label>
                </div>
                <div class="col s12">
                    <label>
                        <input type="checkbox" id="colComma" checked="checked" onchange="ShowHideTableColumn('Comma', this.checked)">
                        <span for="colComma">Comma</span>
                    </label>
                </div>
                <div class="col s12">
                    <label>
                        <input type="checkbox" id="colLettera" checked="checked" onchange="ShowHideTableColumn('Lettera', this.checked)">
                        <span for="colLettera">Lettera</span>
                    </label>
                </div>
                <div class="col s12">
                    <label>
                        <input type="checkbox" id="colTitolo" checked="checked" onchange="ShowHideTableColumn('Titolo', this.checked)">
                        <span for="colTitolo">Titolo</span>
                    </label>
                </div>
                <div class="col s12">
                    <label>
                        <input type="checkbox" id="colCapo" checked="checked" onchange="ShowHideTableColumn('Capo', this.checked)">
                        <span for="colCapo">Capo</span>
                    </label>
                </div>
                <div class="col s12">
                    <label>
                        <input type="checkbox" id="colMissioni" checked="checked" onchange="ShowHideTableColumn('Missione', this.checked)">
                        <span for="colMissioni">Missioni</span>
                    </label>
                </div>
                <div class="col s12">
                    <label>
                        <input type="checkbox" id="colProgramma" checked="checked" onchange="ShowHideTableColumn('Programma', this.checked)">
                        <span for="colProgramma">Programma</span>
                    </label>
                </div>
                <div class="col s12">
                    <label>
                        <input type="checkbox" id="colTitoloM" checked="checked" onchange="ShowHideTableColumn('TitoloM', this.checked)">
                        <span for="colTitoloM">TitoloM</span>
                    </label>
                </div>
                <div class="col s12">
                    <label>
                        <input type="checkbox" id="colFirmatari" checked="checked" onchange="ShowHideTableColumn('Firmatari', this.checked)">
                        <span for="colFirmatari">Firmatari</span>
                    </label>
                </div>
                <div class="col s12">
                    <label>
                        <input type="checkbox" id="colAreaPolitica" checked="checked" onchange="ShowHideTableColumn('AreaPolitica', this.checked)">
                        <span for="colAreaPolitica">Area Politica</span>
                    </label>
                </div>
            </div>
        </div>
    </li>
}
<li>
    <div class="collapsible-header light-blue lighten-4"><i class="material-icons">import_export</i>Esporta</div>
    <div class="collapsible-body">
        <div class="container">
            <a id="btnExportXLS" class="btn chip hoverable green lighten-1 center white-text" data-href="@Url.Action("EsportaXLS", "Emendamenti", new {id = Model.Atto.UIDAtto, ordine=(int)Model.Ordinamento, mode=(int)Model.Mode, is_report = false})" style="width: 100%">
                <i class="icon material-icons">
                    grid_on</i> EXCEL
            </a>

            @if (User.IsInRole(RuoliExt.Segreteria_Assemblea))
            {
                <a id="btnExportXLS_Segreteria" class="btn chip hoverable green lighten-1 center white-text" data-href="@Url.Action("EsportaXLS", "Emendamenti", new {id = Model.Atto.UIDAtto, ordine=(int)Model.Ordinamento, mode=(int)Model.Mode, is_report = true})" style="width: 100%">
                    <i class="icon material-icons">grid_on</i> EXCEL SEGRETERIA
                </a>
            }

            <a id="btnExportDOCX" class="btn chip hoverable blue lighten-1 center white-text" data-href="@Url.Action("EsportaDOC", "Emendamenti", new {id = Model.Atto.UIDAtto, ordine=(int)Model.Ordinamento, mode=(int)Model.Mode})" style="width: 100%">
                <i class="icon material-icons">font_download</i> WORD
            </a>
        </div>
    </div>
</li>
</ul>
</div>
<script>
    $(document).ready(async function() {
        var mode = getClientMode();
        $("#hdMode").val(mode);
        if (mode == 2) {
            $("#pnlFiltroGruppo").show();
            await SetupFiltriGruppi();
        } else {
            $("#pnlFiltroGruppo").hide();
        }
        await SetupFiltriFirmatari();
        await SetupFiltriProponenti();

        $('#btnExportXLS').on("click", function() {
            var url = $('#btnExportXLS').data("href");
            $.ajax({
                url: url,
                type: "GET",
                beforeSend: function() {
                    console.log("RICHIESTA INVIATA");
                    waiting(true, "Elaborazione in corso..");
                },
                success: function(response) {
                    var blob = new Blob([s2ab(atob(response))], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
                    var link = URL.createObjectURL(blob);
                    var a = document.createElement("a");
                    a.href = link;
                    a.download = "Esportazione.xlsx";
                    document.body.appendChild(a);
                    a.click();
                },
                complete: function() {
                    console.log("OK");
                    waiting(false);
                },
                cache: false,
                contentType: false,
                processData: false
            });
        });
        $('#btnExportXLS_Segreteria').on("click", function() {
            var url = $('#btnExportXLS_Segreteria').data("href");
            $.ajax({
                url: url,
                type: "GET",
                beforeSend: function() {
                    console.log("RICHIESTA INVIATA");
                    waiting(true, "Elaborazione in corso..");
                },
                success: function(response) {
                    var blob = new Blob([s2ab(atob(response))], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });
                    var link = URL.createObjectURL(blob);
                    var a = document.createElement("a");
                    a.href = link;
                    a.download = "Esportazione_Segreteria.xlsx";
                    document.body.appendChild(a);
                    a.click();
                },
                complete: function() {
                    console.log("OK");
                    waiting(false);
                },
                cache: false,
                contentType: false,
                processData: false
            });
        });
        $('#btnExportDOCX').on("click", function() {
            var url = $('#btnExportDOCX').data("href");
            $.ajax({
                url: url,
                type: "GET",
                beforeSend: function() {
                    console.log("RICHIESTA INVIATA");
                    waiting(true, "Elaborazione in corso..");
                },
                success: function(response) {
                    var blob = new Blob([s2ab(atob(response))], { type: 'application/doc' });
                    var link = URL.createObjectURL(blob);
                    var a = document.createElement("a");
                    a.href = link;
                    a.download = "Esportazione.docx";
                    document.body.appendChild(a);
                    a.click();
                },
                complete: function() {
                    console.log("OK");
                    waiting(false);
                },
                cache: false,
                contentType: false,
                processData: false
            });
        });
    });

    function s2ab(s) {
        var buf = new ArrayBuffer(s.length);
        var view = new Uint8Array(buf);
        for (var i=0; i!=s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;
        return buf;
    }

    async function SetupFiltriFirmatari() {
        var filterSelect = [];
        var filtri = get_Filtri_EM();
        if (filtri != null) {
            if (filtri.firmatari)
                filterSelect = filtri.firmatari;
        }
        var persone = await GetPersoneFromDB();
        var select = $("#filter_em_firmatari");
        select.empty();

        $.each(persone,
            function(index, item) {
                var template = "";
                var find_user = false;
                for (var i = 0; i < filterSelect.length; i++) {
                    if (filterSelect[i].toString() == item.UID_persona.toString()) {
                        find_user = true;
                        break;
                    }
                }
                if (find_user) {
                    template = "<option selected='selected'></option>";
                }
                else
                    template = "<option></option>";
                select.append($(template).val(item.UID_persona).html(item.DisplayName));
            });
        var elems = document.querySelectorAll("#filter_em_firmatari");
        M.FormSelect.init(elems, null);
    }

    async function SetupFiltriProponenti() {
        var filterSelect = [];
        var filtri = get_Filtri_EM();
        if (filtri != null) {
            if (filtri.proponenti)
                filterSelect = filtri.proponenti;
        }
        var persone = await GetPersoneFromDB();
        var select = $("#filter_em_proponente");
        select.empty();

        $.each(persone,
            function(index, item) {
                var template = "";
                var find_user = false;
                for (var i = 0; i < filterSelect.length; i++) {
                    if (filterSelect[i].toString() == item.UID_persona.toString()) {
                        find_user = true;
                        break;
                    }
                }
                if (find_user) {
                    template = "<option selected='selected'></option>";
                }
                else
                    template = "<option></option>";
                select.append($(template).val(item.UID_persona).html(item.DisplayName));
            });
        var elems = document.querySelectorAll("#filter_em_proponente");
        M.FormSelect.init(elems, null);
    }

    async function SetupFiltriGruppi() {
        var filterSelect = [];
        var filtri = get_Filtri_EM();
        if (filtri != null) {
            if (filtri.gruppi)
                filterSelect = filtri.gruppi;
        }
        var gruppi = await GetGruppi();
        var select = $("#filter_em_gruppi");
        select.empty();
        $.each(gruppi,
            function(index, item) {
                var template = "";
                var find_user = false;
                for (var i = 0; i < filterSelect.length; i++) {
                    if (filterSelect[i].toString() == item.id.toString()) {
                        find_user = true;
                        break;
                    }
                }
                if (find_user) {
                    template = "<option selected='selected'></option>";
                }
                else
                    template = "<option></option>";
                select.append($(template).val(item.id).html(item.descr));
            });
        var elems = document.querySelectorAll("#filter_em_gruppi");
        M.FormSelect.init(elems, null);
    }

    async function GetGruppi() {
        var gruppi = get_Gruppi();
        if (gruppi.length > 0) {
            return gruppi;
        }

        return new Promise(async function(resolve, reject) {
            $.ajax({
                url: baseUrl + "/persone/gruppi-politici",
                type: "GET"
            }).done(function(result) {
                set_Gruppi(result);
                resolve(result);
            }).fail(function(err) {
                console.log("query - GetGruppiPolitici - error", err);
                ErrorAlert(err);
            });
        });
    }
</script>