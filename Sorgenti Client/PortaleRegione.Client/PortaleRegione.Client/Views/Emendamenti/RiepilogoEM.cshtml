@using ExpressionBuilder.Common
@using PortaleRegione.DTO.Enum
@using PortaleRegione.DTO.Model
@model PortaleRegione.DTO.Response.EmendamentiViewModel

<style>
    tr {
        border: unset;
    }

    td {
        text-align: center;
    }
</style>

@{
    ViewBag.Title = string.Format("{0} {1}", Model.Atto.TIPI_ATTO.Tipo_Atto, Model.Atto.NAtto);

    var view = HttpUtility.ParseQueryString(Request.Url.Query).Get("view");
    var filtri_attivi = Request.Url.AbsolutePath.Contains("filtra");
    if (string.IsNullOrEmpty(view))
    {
        view = "grid";
    }

    var classActiveTabPresentazione = "";
    var classActiveTabVotazione = "";

    var ordineFromCache = HttpContext.Current.Cache.Get("OrdinamentoEM");

    var ordinePagina = HttpUtility.ParseQueryString(Request.Url.Query).Get("ordine");
    OrdinamentoEnum ordinePaginaEnum;
    if (!string.IsNullOrEmpty(ordinePagina))
    {
        ordinePaginaEnum = (OrdinamentoEnum)Convert.ToInt16(ordinePagina);
    }
    else if (ordineFromCache != null)
    {
        ordinePaginaEnum = (OrdinamentoEnum)ordineFromCache;
    }
    else
    {
        ordinePaginaEnum = OrdinamentoEnum.Presentazione;
    }

    switch (ordinePaginaEnum)
    {
        case OrdinamentoEnum.Presentazione:
        case OrdinamentoEnum.Default:
            classActiveTabPresentazione = "active";
            break;
        case OrdinamentoEnum.Votazione:
            classActiveTabVotazione = "active";
            break;
        default:
            throw new ArgumentOutOfRangeException();
    }
}

<div class="row">
    <div class="col l1 s2">
        @if (!filtri_attivi)
        {
            <a class="btn-floating waves-effect waves-light grey header-back" href="@Url.Action("RiepilogoAtti", "Atti", new {id = Model.Atto.UIDSeduta})">
                <i class="material-icons">arrow_back</i>
            </a>
        }
        else
        {
            <a class="btn-floating waves-effect waves-light grey header-back" onclick="reset()">
                <i class="material-icons">arrow_back</i>
            </a>
        }
    </div>
    <div class="col l11 s10" style="display: inline-flex">
        <h5>
            <b>@ViewBag.Title</b>
        </h5>
        @if (!string.IsNullOrEmpty(Model.Atto.Path_Testo_Atto))
        {
            <a href="@Url.Action("Download", "Atti", new {path = Model.Atto.Path_Testo_Atto})" class="hoverable">
                <i class="material-icons pink-text medium tooltipped" data-tooltip="Scarica documento atto" style="padding-left:20px">cloud_download</i>
            </a>
        }
        @if (Model.Mode == ClientModeEnum.TRATTAZIONE)
        {
            if (classActiveTabVotazione == "active")
            {
                <a target="_blank" href="@Url.Action("ViewerProietta", "Emendamenti", new {id = Model.Atto.UIDAtto})" class="btn chip hoverable purple white-text" style="margin-left: 20px; margin-top: 15px;">
                    <i class="icon material-icons">subscriptions</i> Proietta
                </a>
            }
        }
    </div>
</div>

<div id="emendamentiTable" class="row">
    @{
        if (Model.Mode == ClientModeEnum.TRATTAZIONE)
        {
            if (!filtri_attivi)
            {
                <ul id="RiepilogoEmendamentiTabs" class="tabs tabs-fixed-width">
                    <li class="tab col s3">
                        <a class="@classActiveTabPresentazione" onclick="go('@Url.Action("RiepilogoEmendamenti", "Emendamenti", new {ordine = (int) OrdinamentoEnum.Presentazione})')">Ordine Presentazione</a>
                    </li>
                    <li class="tab col s3">
                        <a class="@classActiveTabVotazione" onclick="go('@Url.Action("RiepilogoEmendamenti", "Emendamenti", new {ordine = (int) OrdinamentoEnum.Votazione})')">Ordine Votazione</a>
                    </li>
                </ul>
            }
        }
        Html.RenderPartial("_PaginationBar", Model.Data.Paging);
        Html.RenderPartial("_Command_RiepilogoEM", new CommandRiepilogoEMModel { view = view, IsAdmin = false, Atto = Model.Atto });

        <div class="row">
        @if (view == "grid")
        {
            Html.RenderPartial("_GridView_RiepilogoEM", Model);
        }else if (view == "zoom")
        {
            Html.RenderPartial("_ZoomView_RiepilogoEM", Model);
        }
        </div>
        Html.RenderPartial("_PaginationBar", Model.Data.Paging);
    }
</div>

@{
    Html.RenderPartial("_ComandiMassivi", Model.Atto.Chiuso);
    Html.RenderPartial("_PannelloStrumentiRicerche");
    Html.RenderPartial("_InvitoPanel", new InvitoPanelModel
    {
        UIDAtto = Model.Atto.UIDAtto
    });

    Html.RenderPartial("_StampaModal", Model.Atto.UIDAtto);
}

@section scripts
{
    <script>
        $(document).ready(async function() {
            var filters = @Html.Raw(Convert.ToInt16(Model.Data.Filters.Any()));
            if (filters == 0) {
                set_Filtri_EM({});
                $('#counterFilterActive').hide();
            } else {
                /*openSearch();*/
                $('#counterFilterActive').show();
            }

            Filtri_EM_CaricaText1("filter_em_text1");
            Filtri_EM_CaricaText2("filter_em_text2");
            Filtri_EM_CaricaTextConnector("filter_em_text_connector");
            Filtri_EM_CaricaNumeroEM("filter_em_n_em");
            Filtri_EM_CaricaMy("filter_em_my");
            Filtri_EM_CaricaFinancials("filter_em_effetti_finanziari");
            await Filtri_EM_CaricaStatiEM("filter_em_stato");
            await Filtri_EM_CaricaPartiEM("filter_em_parte");
            await Filtri_EM_CaricaTipiEM("filter_em_tipo");

            checkSelectedEM();
        });

        function filtra() {
            setTimeout(function() {
                    $('body').removeClass('loaded');
                },
                200);
            $('#formFiltraEM').submit();
        }

        function filtra(page) {
            $('#inputFilterPage').val(page);
            setTimeout(function() {
                    $('body').removeClass('loaded');
                },
                200);
            $('#formFiltraEM').submit();
        }

        async function reset() {
            set_Filtri_EM({});
            $('#inputFilterPage').val(1);
            Filtri_EM_CaricaText1("filter_em_text1");
            Filtri_EM_CaricaText2("filter_em_text2");
            Filtri_EM_CaricaTextConnector("filter_em_text_connector");
            Filtri_EM_CaricaNumeroEM("filter_em_n_em");
            Filtri_EM_CaricaMy("filter_em_my");
            Filtri_EM_CaricaFinancials("filter_em_effetti_finanziari");
            await Filtri_EM_CaricaStatiEM("filter_em_stato");
            await Filtri_EM_CaricaPartiEM("filter_em_parte");
            await Filtri_EM_CaricaTipiEM("filter_em_tipo");

            $('#filter_em_gruppi option').each(function(index, opt) {
                if ($(opt).is(":checked")) {
                    $(opt).attr("selected", false)
                }
            });
            $('#filter_em_proponente option').each(function(index, opt) {
                if ($(opt).is(":checked")) {
                    $(opt).attr("selected", false)
                }
            });
            $('#filter_em_firmatari option').each(function(index, opt) {
                if ($(opt).is(":checked")) {
                    $(opt).attr("selected", false)
                }
            });

            setTimeout(function() {
                    $('body').removeClass('loaded');
                },
                200);
            $('#formFiltraEM').submit();
        }

        function ShowHideTableColumn(ctrl, enable) {
            if (enable) {
                $('#th' + ctrl).show();
                $('td[id^="td' + ctrl + '"]').show();
            } else {
                $('#th' + ctrl).hide();
                $('td[id^="td' + ctrl + '"]').hide();
            }
        }

        $('#btnCreaEM').attr('href', '@Url.Action("NuovoEmendamento", new { id = Model.Atto.UIDAtto })');

        async function RevealMassivo(action) {
            var text = "";
            var button = "";

            var documentiTotali = $("#hdTotaleDocumenti").val();
            var selezionaTutti = getSelezionaTutti();
            var listaEM = getListaEmendamenti();
            var totaleDoc = selezionaTutti ? documentiTotali - listaEM.length : listaEM.length;

            if (totaleDoc <= 0) {
                ErrorAlert("Seleziona almeno un emendamento da elaborare");
                return;
            }

            if (action == @((int)ActionEnum.FIRMA)) {
                text = "Inserisci il PIN per firmare ";
                button = "Firma";
            } else if (action == @((int)ActionEnum.DEPOSITA)) {
                text = "Inserisci il PIN per depositare ";
                button = "Deposita";
            } else if (action == @((int)ActionEnum.INVITA)) {
                await NotificaA('@Model.Atto.UIDAtto', @((int)TipoDestinatarioNotificaEnum.CONSIGLIERI));
                return;
            }

            text = text + totaleDoc + " emendamenti";
            swal(text,
                    {
                        content: {
                            element: "input",
                            attributes: { placeholder: "******", className: "password" }
                        },
                        buttons: { cancel: "Annulla", confirm: button }
                    })
                .then((value) => {
                    if (value == null || value == "")
                        return;

                    var obj = {};
                    obj.Pin = value;
                    obj.Azione = action;
                    obj.ListaEmendamenti = listaEM.length > 0 ? listaEM : [];
                    obj.AttoUId = '@Model.Atto.UIDAtto';
                    obj.Mode = @((int)Model.Mode);
                    obj.Richiesta_Firma = @Convert.ToInt16(Convert.ToBoolean(HttpUtility.ParseQueryString(Request.Url.Query).Get("require_my_sign")));

                    $.ajax({
                        url: baseUrl + "/emendamenti/azioni-massive",
                        type: "POST",
                        data: JSON.stringify(obj),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json"
                    }).done(function(data) {
                        swal({
                            title: "Procedura completata",
                            text: data.message,
                            icon: "info",
                            button: "Ok"
                        }).then(() => {
                            setSelezionaTutti([]);
                            setListaEmendamenti([]);
                            location.reload();
                        });
                    }).fail(function(err) {
                        console.log("error", err);
                        ErrorAlert(err.message);
                    });
                });
        }

    </script>
}