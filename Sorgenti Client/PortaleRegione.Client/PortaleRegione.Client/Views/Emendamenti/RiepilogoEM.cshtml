@using PortaleRegione.Client.Helpers
@using PortaleRegione.DTO.Enum
@using PortaleRegione.DTO.Model
@using Utility = PortaleRegione.Common.Utility
@model PortaleRegione.DTO.Response.EmendamentiViewModel

<style>
    tr { border: unset; }

    td { text-align: center; }
</style>

@{
    ViewBag.Title = $"{Utility.GetText_Tipo(Model.Atto.IDTipoAtto)} {Model.Atto.NAtto}";

    var filtri_attivi = Request.Url.AbsolutePath.Contains("filtra");

    var classActiveTabPresentazione = "";
    var classActiveTabVotazione = "";

    switch (Model.Ordinamento)
    {
        case OrdinamentoEnum.Presentazione:
        case OrdinamentoEnum.Default:
            classActiveTabPresentazione = "active";
            break;
        case OrdinamentoEnum.Votazione:
            classActiveTabVotazione = "active";
            break;
        default:
            throw new ArgumentOutOfRangeException();
    }
    var url = Url.Action("RiepilogoAtti", "Atti", new
    {
        id = Model.Atto.UIDSeduta
    });
    if (Model.Mode == ClientModeEnum.TRATTAZIONE)
    {
        url = Url.Action("Index", "AttiTrattazione", new { id = Model.Atto.UIDSeduta });
    }
}
<div id="pnlViewStandard">
    <div class="row">
        <div class="col s12">
            <a class="btn-floating waves-effect waves-light grey darken-3 header-back" href="@url">
                <i class="material-icons">arrow_back</i>
            </a>
            <div class="row valign-wrapper" style="margin-bottom: 0px !important">
                <div class="col s12">
                    <p style="position: absolute">Seduta del @Model.Atto.SEDUTE.Data_seduta.ToString("dd/MM/yyyy HH:mm")</p>
                    <h3>
                        <b>@ViewBag.Title</b>
                        @if (!string.IsNullOrEmpty(Model.Atto.Path_Testo_Atto))
                        {
                            <a class="btn-flat pink-text tooltipped"
                               href="@Url.Action("Download", "Atti", new { path = Model.Atto.Path_Testo_Atto })" data-tooltip="Scarica testo">
                               SCARICA
                            </a>
                        }
                    </h3>
                </div>
            </div>
        </div>
    </div>

    <div id="contentTable" class="row">
        @{
            if (Model.Mode == ClientModeEnum.TRATTAZIONE)
            {
                <ul id="RiepilogoEmendamentiTabs" class="tabs tabs-fixed-width">
                    @if (!filtri_attivi)
                    {
                        <li class="tab col s3">
                            <button type="button" role="button" class="@classActiveTabPresentazione" onclick="go('@Url.Action("RiepilogoEmendamenti", "Emendamenti", new { ordine = (int)OrdinamentoEnum.Presentazione, view = Model.ViewMode })')">Ordine Presentazione</button>
                        </li>
                        <li class="tab col s3">
                            <button type="button" role="button" class="@classActiveTabVotazione" onclick="go('@Url.Action("RiepilogoEmendamenti", "Emendamenti", new { ordine = (int)OrdinamentoEnum.Votazione, view = Model.ViewMode })')">Ordine Votazione</button>
                        </li>
                    }
                    else
                    {
                        <li class="tab col s3">
                            <button type="button" role="button" class="@classActiveTabPresentazione" onclick="filtra_Ordinamento(@Html.Raw((int)OrdinamentoEnum.Presentazione))">Ordine Presentazione</button>
                        </li>
                        <li class="tab col s3">
                            <button type="button" role="button" class="@classActiveTabVotazione" onclick="filtra_Ordinamento(@Html.Raw((int)OrdinamentoEnum.Votazione))">Ordine Votazione</button>
                        </li>
                    }
                </ul>
            }

            Html.RenderPartial("_DataRiepilogoEMPartial", Model);
        }
    </div>
</div>
<div id="pnlViewTestoAtto" class="card" style="display: none;">
    <div class="card-content">
        <div class="row">
            <div class="col l12 right-align">
                <button type="button" role="button" class="btn-flat pink-text tooltipped" data-tooltip="Visualizza la griglia emendamenti" onclick="viewStandard();">
                    <i class="material-icons right pink-text">apps</i>
                    VISUALIZZA EM
                </button>
            </div>
            <div class="col l12">
                <table id="tableTesti" class="tableTesti">
                    <tr>
                        <td colspan="2" style="font-weight: bold; text-align: center;">
                            @Utility.GetText_Tipo(Model.Atto.IDTipoAtto)
                            @Model.Atto.NAtto
                        </td>
                    </tr>
                    <tr>
                        <td colspan="2" style="text-align: center">
                            @Model.Atto.Oggetto
                        </td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
</div>

@{
    Html.RenderPartial("_ComandiMassivi", Model);
    Html.RenderPartial("_PannelloStrumentiRicerche");
    Html.RenderPartial("_TestiAttoScript", Model);
    Html.RenderPartial("_InvitoPanel", new InvitoPanelModel
    {
        UIDAtto = Model.Atto.UIDAtto
    });

    Html.RenderPartial("_StampaModal", Model.Atto.UIDAtto);
}

@section scripts
{
	<script>
        $(window).on('load',
            async function() {
                $('#btnSearch').on("click",
                    function() {
                        openSearch();
                    });
                $("#hdOrdine").val(@((int)Model.Ordinamento));
                var filters = @Html.Raw(Convert.ToInt16(Model.Data.Filters.Any()));
                if (filters == 0) {
                    set_Filtri_EM({});
                    set_ListaArticoliEM([]);
                    set_ListaCommiEM([]);
                    set_ListaLettereEM([]);
                    $('#counterFilterActive').hide();
                } else {
                    /*openSearch();*/
                    $('#counterFilterActive').show();
                }

                Filtri_EM_CaricaText1("filter_em_text1");
                Filtri_EM_CaricaText2("filter_em_text2");
                Filtri_EM_CaricaTextConnector("filter_em_text_connector");
                Filtri_EM_CaricaNumeroEM("filter_em_n_em");
                Filtri_EM_CaricaMy("filter_em_my");
                Filtri_EM_CaricaFinancials("filter_em_effetti_finanziari");
                Filtri_EM_CaricaStatiEM("filter_em_stato");
                Filtri_EM_CaricaPartiEM("filter_em_parte");
                Filtri_EM_CaricaTipiEM("filter_em_tipo");

                checkSelectedEM();
            });

        function viewStandard() {
            $('#btnSearch').show();
            $('#pnlViewStandard').show();
            $('#pnlViewTestoAtto').hide();
            $('#pnlOrdinamento').hide();
        }

        function filtra() {
            setTimeout(function() {
                    $('body').removeClass('loaded');
                },
                200);
            $('#formFiltraEM').submit();
        }

        function filtra(page) {
            $('#inputFilterPage').val(page);
            setTimeout(function() {
                    $('body').removeClass('loaded');
                },
                200);
            $('#formFiltraEM').submit();
        }

        function filtra_Paginazione(size) {
            $('#inputFilterPage').val(1);
            $('#inputFilterSize').val(size);
            setTimeout(function() {
                    $('body').removeClass('loaded');
                },
                200);
            $('#formFiltraEM').submit();
        }

        function filtra_View(view) {
            $('#inputFilterView').val(view);
            setTimeout(function() {
                    $('body').removeClass('loaded');
                },
                200);
            $('#formFiltraEM').submit();
        }

        function filtra_Ordinamento(ordine) {
            $('#inputFilterPage').val(1);
            $('#inputFilterOrdine').val(ordine);
            setTimeout(function() {
                    $('body').removeClass('loaded');
                },
                200);
            $('#formFiltraEM').submit();
        }

        async function reset() {
            set_Filtri_EM({});
            $('#inputFilterPage').val(1);
            Filtri_EM_CaricaText1("filter_em_text1");
            Filtri_EM_CaricaText2("filter_em_text2");
            Filtri_EM_CaricaTextConnector("filter_em_text_connector");
            Filtri_EM_CaricaNumeroEM("filter_em_n_em");
            Filtri_EM_CaricaMy("filter_em_my");
            Filtri_EM_CaricaFinancials("filter_em_effetti_finanziari");
            Filtri_EM_CaricaStatiEM("filter_em_stato");
            Filtri_EM_CaricaTipiEM("filter_em_tipo");
            Filtri_EM_CaricaPartiEM("filter_em_parte");

            $('#filter_em_gruppi option').each(function(index, opt) {
                if ($(opt).is(":checked")) {
                    $(opt).attr("selected", false);
                }
            });
            $('#filter_em_proponente option').each(function(index, opt) {
                if ($(opt).is(":checked")) {
                    $(opt).attr("selected", false);
                }
            });
            $('#filter_em_firmatari option').each(function(index, opt) {
                if ($(opt).is(":checked")) {
                    $(opt).attr("selected", false);
                }
            });

            setTimeout(function() {
                    $('body').removeClass('loaded');
                },
                200);
            $('#formFiltraEM').submit();
        }

        function ShowHideTableColumn(ctrl, enable) {
            if (enable) {
                $('#th' + ctrl).show();
                $('td[id^="td' + ctrl + '"]').show();
            } else {
                $('#th' + ctrl).hide();
                $('td[id^="td' + ctrl + '"]').hide();
            }
        }

		$('#btnCreaEM').attr('onclick', 'goIntoOtherTab("@Url.Action("NuovoEmendamento", new { id = Model.Atto.UIDAtto })")');

        async function RevealMassivo(action) {
            var text = "";
            var button = "";

            var selezionaTutti = getSelezionaTutti();
            var listaEM = getListaEmendamenti();
            var totaleDoc = GetCounterAlert(listaEM, selezionaTutti);

            if (totaleDoc <= 0) {
                swal({
                    title: "Errore",
                    text: "Seleziona almeno un emendamento da elaborare",
                    icon: "error"
                });
                return;
            }

            if (action == @((int)ActionEnum.FIRMA)) {
                text = "Inserisci il PIN per firmare ";
                button = "Firma";
            } else if (action == @((int)ActionEnum.DEPOSITA)) {
                text = "Inserisci il PIN per presentare ";
                button = "Presenta";
            } else if (action == @((int)ActionEnum.INVITA)) {
                await NotificaAEM('@Model.Atto.UIDAtto', @((int)TipoDestinatarioNotificaEnum.CONSIGLIERI));
                return;
            }
            var limite_file = @Html.Raw(AppSettingsConfiguration.LimiteDocumentiDaProcessare);
            if (totaleDoc > limite_file) {
                text = text + " (Verranno processati solamente i primi " + limite_file + " dell'atto)";
            } else {
                text = text + totaleDoc + " emendamenti";
            }
            swal(text,
                    {
                        content: {
                            element: "input",
                            attributes: { placeholder: "******", className: "password" }
                        },
                        buttons: { cancel: "Annulla", confirm: button }
                    })
                .then((value) => {
                    if (value == null || value == "")
                        return;

                    var obj = {};
                    obj.Pin = value;
                    obj.Azione = action;
                    obj.Lista = listaEM.length > 0 ? listaEM : [];
                    obj.Tutti = selezionaTutti;
                    obj.AttoUId = '@Model.Atto.UIDAtto';
                    obj.Mode = @((int)Model.Mode);
                    obj.Richiesta_Firma = @Convert.ToInt16(Convert.ToBoolean(HttpUtility.ParseQueryString(Request.Url.Query).Get("require_my_sign")));

                    $.ajax({
                        url: baseUrl + "/emendamenti/azioni-massive",
                        type: "POST",
                        data: JSON.stringify(obj),
                        contentType: "application/json; charset=utf-8",
                        dataType: "json"
                    }).done(function(data) {
                        var typeMessage = "error";
                        var str = data.message;
                        var pos = str.indexOf('OK');
                        if (pos > 0) {
                            typeMessage = "success";
                        }
                        swal({
                            title: "Esito procedura",
                            text: data.message,
                            icon: typeMessage,
                            button: "Ok"
                        }).then(() => {
                            DeselectALLEM();
                            location.reload();
                        });
                    }).fail(function(err) {
                        console.log("error", err);
                        Error(err);
                    });
                });
        }

        window.addEventListener("message", (event) => {
	        // Controlla l'origine del messaggio per motivi di sicurezza
	        if (event.origin !== "@AppSettingsConfiguration.URL_CLIENT") { // sostituisci con il tuo dominio
		        return;
	        }

	        if (event.data === "aggiornaPadre") {
		        location.reload(); // Ricarica la pagina padre
	        }
        }, false);

        function RevealFirmaDeposito(id, action) {
	var text = "";
	var button = "";
	if (action == 3) {
		text = "Inserisci il PIN per firmare";
		button = "Firma";
	} else if (action == 4) {
		text = "Inserisci il PIN per presentare";
		button = "Presenta";
	}

	swal(text,
		{
			content: {
				element: "input",
				attributes: { placeholder: "******", className: "password" }
			},
			icon: "info",
			buttons: { cancel: "Annulla", confirm: button }
		})
		.then((value) => {
			if (value == null || value == "")
				return;

			$.ajax({
				url: baseUrl + "/emendamenti/azioni?id=" + id + "&azione=" + action + "&pin=" + value,
				method: "GET"
			}).done(function (data) {
				if (data.message) {
					var typeMessage = "error";
					var str = data.message;
					var pos = str.indexOf("OK");
					if (pos > 0) {
						typeMessage = "success";
					}
					swal({
						title: "Esito " + button,
						text: data.message,
						icon: typeMessage,
						button: "OK"
					}).then(() => {
						window.opener.postMessage("aggiornaPadre", "@AppSettingsConfiguration.URL_CLIENT");
                        location.reload();
					});
				} else {
                    window.opener.postMessage("aggiornaPadre", "@AppSettingsConfiguration.URL_CLIENT");
					location.reload();
				}
			}).fail(function (err) {
				console.log("error", err);
				Error(err);
			});
		});
}

	</script>
}