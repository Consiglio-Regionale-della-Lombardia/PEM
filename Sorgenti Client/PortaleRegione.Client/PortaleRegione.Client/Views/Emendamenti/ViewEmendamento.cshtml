@using PortaleRegione.DTO.Enum
@model PortaleRegione.DTO.Domain.EmendamentiDto

@{
    var displayAtto = string.Format("{0} {1}", Model.ATTI.TIPI_ATTO.Tipo_Atto, Model.ATTI.NAtto);
    ViewBag.Title = string.Format("{0}", displayAtto);

    var ordineFromCache = HttpContext.Current.Cache.Get("OrdinamentoEM");
    object objParams = null;
    if (ordineFromCache != null)
    {
        objParams = new
        {
            id = Model.UIDAtto,
            ordine = ordineFromCache
        };
    }
    else
    {
        objParams = new
        {
            id = Model.UIDAtto
        };
    }
    var backUrl = Url.Action("RiepilogoEmendamenti", objParams);

    var gruppoText = "";
    if (Model.id_gruppo >= 10000)
    {
        gruppoText = "Giunta regionale";
    }
    else
    {
        gruppoText = Model.gruppi_politici.nome_gruppo;
    }
}

<script>
    $(document).ready(function() {
        $('#btnSearch').hide();
    });
</script>

<div class="row">
    <div class="col l1 s2">
        <a class="btn-floating waves-effect waves-light grey header-back" onclick="go('@backUrl')">
            <i class="material-icons">arrow_back</i>
        </a>
    </div>
    <div class="col l11 s10">
        <h5>
            <b>
                <span>@ViewBag.Title</span>
            </b>
        </h5>
    </div>
</div>
<div class="row">
    <div class="col s12">
        <div class="card">
            <div class="card-action grey lighten-4 center">
                <h6>
                    <b>
                        <span>@Html.Raw(gruppoText)</span>
                    </b>
                </h6>
            </div>
            @if (Model.Firmabile || Model.Depositabile || Model.Eliminabile || Model.Ritirabile || Model.Modificabile)
            {
                <div class="card-action grey lighten-4 center" style="border-top: unset">
                    <div class="row" style="margin: 0 !important">
                        <div class="col s12" style="margin-top: 5px">
                            @if (Model.Firmabile)
                            {
                                <div class="btn chip hoverable green center white-text" onclick="RevealFirmaDeposito('@Model.UIDEM', @Html.Raw((int) ActionEnum.FIRMA))">
                                    <i class="icon material-icons">gavel</i> Firma
                                </div>
                            }
                            @if (Model.Depositabile)
                            {
                                <div class="btn chip hoverable purple center white-text" onclick="RevealFirmaDeposito('@Model.UIDEM', @Html.Raw((int) ActionEnum.DEPOSITA))">
                                    <i class="icon material-icons">lock</i> Deposita
                                </div>
                            }
                            @if (Model.Eliminabile)
                            {
                                <div class="btn chip hoverable red center white-text" onclick="ConfirmAction('@Model.UIDEM', '@Model.DisplayTitle', @Html.Raw((int) ActionEnum.ELIMINA))">
                                    <i class="icon material-icons">delete</i> Elimina
                                </div>
                            }
                            @if (Model.Ritirabile)
                            {
                                <div class="btn chip hoverable brown lighten-3 center" onclick="ConfirmAction('@Model.UIDEM', '@Model.DisplayTitle', @Html.Raw((int) ActionEnum.RITIRA))">
                                    <i class="icon material-icons">settings_backup_restore</i> Ritira
                                </div>
                            }
                            @if (Model.Modificabile)
                            {
                                <div class="btn chip hoverable blue center white-text"onclick="go('@Url.Action("ModificaEmendamento", new {id = Model.UIDEM})')">
                                    <i class="icon material-icons">edit</i> Modifica
                                </div>
                            }
                            @if (Model.Invito_Abilitato)
                            {
                                <div class="btn chip hoverable amber center" onclick="NotificaA('@Model.UIDAtto', @((int) TipoDestinatarioNotificaEnum.CONSIGLIERI_ASSESSORI))">
                                    <i class="icon material-icons">share</i> Invita
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
            <div class="card-content">
                @* NOTA PUBBLICA + GRUPPO + PROPONENTE *@
                <div class="row">
                    <div class="col s6 left">
                        @if (Model.UIDPersonaModifica.HasValue)
                        {
                            <label style="font-size: small !important">Ultima modifica: </label>
                            <br/>
                            <b>[@Model.DataModifica.Value.ToString("dd/MM/yyyy HH:mm")] @Model.PersonaModifica.DisplayName</b>
                        }
                        @if (!string.IsNullOrEmpty(Model.NOTE_Griglia))
                        {
                            <p class="green-text" style="padding-top: 10px">
                                <b>Nota ufficio dei lavori assembleari: @Model.NOTE_Griglia</b>
                            </p>
                        }
                    </div>
                    <div class="col s6 right-align">
                        <label style="font-size: small !important">Proponente: </label>
                        <br/>
                        <b>@Model.PersonaProponente.DisplayName</b>
                    </div>
                </div>
                @* TITOLO *@
                <div class="row">
                    <div class="col s12 center">
                        <h4>
                            <b>
                                <span>@Html.Raw(Model.DisplayTitle)</span>
                            </b>
                        </h4>
                    </div>
                </div>
                @* BODY *@
                <div class="row">
                    <div class="col s12 center bodyEMClass">
                        @Html.Raw(Model.BodyEM)
                    </div>
                </div>
                @* FIRME *@
                <div class="row">
                    <div class="col s12">
                        @Html.Raw(Model.Firme)

                        @if (!string.IsNullOrEmpty(Model.DataDeposito))
                        {
                            var testoDeposito = "Emendamento depositato";
                            if (Model.Firma_da_ufficio)
                            {
                                testoDeposito += " d'ufficio";
                            }

                            <label class="green-text">@testoDeposito il @Html.Raw(Model.DataDeposito)</label>
                        }

                        @if (!string.IsNullOrEmpty(Model.Firme_dopo_deposito))
                        {
                            @Html.Raw(Model.Firme_dopo_deposito)
                        }
                    </div>
                </div>

                @* INVITI *@
                @if (!string.IsNullOrEmpty(Model.Destinatari))
                {
                    <div class="row">
                        <div class="col s12">
                            <h5>Invitati</h5>
                            <hr />
                            @Html.Raw(Model.Destinatari)
                        </div>
                    </div>
                }

                @* CREA SUB EM *@
                @Html.Partial("_CommandSUBEM", Model)

                @* NOTE RISERVATE *@
                @if (!string.IsNullOrEmpty(Model.NOTE_EM))
                {
                    <div class="row">
                        <div class="col s12">
                            <p class="red-text">
                                <b>Nota riservata: @Model.NOTE_EM</b>
                            </p>
                        </div>
                    </div>
                }
            </div>
        </div>

    </div>
</div>

<div id="modalEmendamentiNotificaA" class="modal">
    <div class="modal-content">
        <h5 id="emProponenteDisplayName"></h5>
        @using (Html.BeginForm("NotificaEmendamento", "Emendamenti", FormMethod.Post, new {id = "formNotificaA"}))
        {
            @Html.AntiForgeryToken()

            var isSegreteria = HttpContext.Current.User.IsInRole(RuoliEnum.Responsabile_Segreteria_Politica) ||
                               HttpContext.Current.User.IsInRole(RuoliEnum.Segreteria_Politica) ||
                               HttpContext.Current.User.IsInRole(RuoliEnum.Responsabile_Segreteria_Giunta) ||
                               HttpContext.Current.User.IsInRole(RuoliEnum.Segreteria_Giunta_Regionale) ||
                               HttpContext.Current.User.IsInRole(RuoliEnum.Amministratore_PEM);

            var displayPin = isSegreteria ? "none" : "block";

            <div class="form-group" style="display: @displayPin">
                <label>Pin:</label>
                <input id="txtPinNotificheInviti" class="password"/>
            </div>
            <div class="row">
                <div class="col s12">
                    <label class="black-text" style="margin-left: 20px">
                        <input name="rdDestinatari" type="radio" checked value="1" onclick="LoadDestinatari('@Model.UIDAtto', @((int) TipoDestinatarioNotificaEnum.CONSIGLIERI_ASSESSORI))"/>
                        <span>Consiglieri</span>
                    </label>
                    @if (!isSegreteria)
                    {
                        <label class="black-text" style="margin-left: 20px">
                            <input name="rdDestinatari" type="radio" value="2" onclick="LoadDestinatari('@Model.UIDAtto', @((int) TipoDestinatarioNotificaEnum.GRUPPI))"/>
                            <span>Gruppi</span>
                        </label>
                        <label class="black-text" style="margin-left: 20px">
                            <input name="rdDestinatari" type="radio" value="3" onclick="LoadDestinatari('@Model.UIDAtto', @((int) TipoDestinatarioNotificaEnum.RELATORI))"/>
                            <span>Relatori</span>
                        </label>
                    }
                </div>
            </div>
            <div class="form-group">
                <label>Destinatari:</label>
                <div id="autocompleteInvitati" class="chips chips-autocomplete"></div>
            </div>
        }
        <div class="modal-footer">
            <button type="button" class="btn modal-close grey">Annulla</button>
            <a id="btnConfermaNotificaA" class="btn blue">Invita</a>
        </div>
    </div>
</div>

@section scripts
{
    <script>
        setListaEmendamenti([]);
        setSelezionaTutti(false);

        var chipInstanceNotificaA = null;

        async function LoadDestinatari(attoUId, tipo) {
            var personeInDB = await GetPersonePerInviti(attoUId, tipo);

            var persone = [];
            for (let [key, value] of Object.entries(personeInDB)) {
                //console.log(`${key}: ${value}`);
                persone.push({
                    tag: value,
                    id: key
                });
            }

            var elems = document.querySelector("#autocompleteInvitati");

            var autocompleteDataOptions = {
                data: persone,
                limit: 10,
                minLength: 1
            };
            if (chipInstanceNotificaA != null) {
                chipInstanceNotificaA.destroy();
            }
            chipInstanceNotificaA = M.Chips.init(elems,
                {
                    autocompleteOptions: autocompleteDataOptions,
                    data: []
                });
        }

        async function NotificaA(attoUId, tipo) {
            await LoadDestinatari(attoUId, tipo);
            $("#modalEmendamentiNotificaA").modal("open");

            $("#btnConfermaNotificaA").on("click",
                function() {
                    setTimeout(function () {
                        $('body').removeClass('loaded');
                    }, 200);
                    $("#formNotificaA").submit();
                });
        }

        $("#formNotificaA").submit(function(e) {
            e.preventDefault();
        }).validate({
            submitHandler: function(form) {
                var destinatari = chipInstanceNotificaA.getData();
                if (destinatari.length == 0) {
                    ErrorAlert("Seleziona almeno un destinatario");
                    return;
                }

                var listaDestinatari = [];
                $.each(destinatari,
                    function(index, item) {
                        listaDestinatari.push(item.id);
                    });
                var obj = {};
                obj.Pin = $('#txtPinNotificheInviti').val();
                obj.Azione = 5;
                obj.ListaEmendamenti = ['@Html.Raw(Model.UIDEM)'];
                obj.ListaDestinatari = listaDestinatari;

                $.ajax({
                    url: baseUrl + "/emendamenti/azioni-massive",
                    type: "POST",
                    data: JSON.stringify(obj),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json"
                }).done(function(data) {
                    if (data.message) {
                        ErrorAlert(data.message);
                    } else {
                        go(data);
                    }
                }).fail(function(err) {
                    console.log("error", err);
                    ErrorAlert(err.message);
                });

                return false; //This doesn't prevent the form from submitting.
            }
        });
    </script>
}