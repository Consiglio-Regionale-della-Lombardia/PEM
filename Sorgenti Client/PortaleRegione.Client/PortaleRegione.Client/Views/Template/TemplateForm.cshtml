@using System.ComponentModel
@using PortaleRegione.Client.Helpers
@using PortaleRegione.DTO.Domain
@using PortaleRegione.DTO.Enum
@model PortaleRegione.DTO.Domain.TemplatesItemDto

@{
    Layout = null;
    var isNew = Model.Uid == Guid.Empty;

    ViewBag.Title = $"{(isNew ? "Nuovo" : "Modifica")} Template: {Model.Nome}";
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>@ViewBag.Title</title>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">

    @Styles.Render("~/Content/css")
    @*Import Trumbowyg plugins style...*@
    <link href="~/Content/editor/plugins/table/ui/trumbowyg.table.min.css" rel="stylesheet"/>

    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
    @Scripts.Render("~/bundles/lib")
    @Scripts.Render("~/bundles/logic")
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>
    <script src="~/Scripts/moment.js"></script>
</head>
<body>

<style>
    .trumbowyg-editor > p > ul {
        list-style-type: disc !important;
        padding-left: 30px !important;
    }

    .trumbowyg-editor > p > ul > li {
        list-style-type: disc !important;
    }
</style>
<div id="waiting" class="modal" style="height: 120px">
    <div class="modal-content center">
        <div class="preloader-wrapper active">
            <div class="spinner-layer spinner-blue-only">
                <div class="circle-clipper left">
                    <div class="circle"></div>
                </div>
                <div class="gap-patch">
                    <div class="circle"></div>
                </div>
                <div class="circle-clipper right">
                    <div class="circle"></div>
                </div>
            </div>
        </div>

        <div id="waiting_info_message"></div>
    </div>
</div>
	
<div class="row" style="margin-bottom: unset !important">
	<div class="col s12">
		<a class="btn-floating waves-effect waves-light grey darken-3 header-back" onclick="window.close()">
			<i class="material-icons">close</i>
		</a>
	</div>
</div>
<div class="row">
	<div class="col s12">
		<div class="card">
			<div class="card-content">
				<div class="row">
					<div class="col s12">
						@using (Html.BeginForm("SaveTemplate", "Template", FormMethod.Post, new { id = "formTemplate" }))
						{
							@Html.AntiForgeryToken()
							@Html.HiddenFor(m => m.Uid)
							<div class="form-group" style="padding-top: 10px">
								<label>Tipo Template: </label>
								<select id="ddlTipo" onchange="ddlTipo_OnChange(this)">
									<option value="@((int)TemplateTypeEnum.REPORT_COVER)" @Html.Raw(Model.Tipo == (int)TemplateTypeEnum.REPORT_COVER ? "selected='selected'" : "")>Copertina</option>
									<option value="@((int)TemplateTypeEnum.REPORT_ITEM_CARD)" @Html.Raw(Model.Tipo == (int)TemplateTypeEnum.REPORT_ITEM_CARD ? "selected='selected'" : "")>Card</option>
									<option value="@((int)TemplateTypeEnum.REPORT_ITEM_GRID)" @Html.Raw(Model.Tipo == (int)TemplateTypeEnum.REPORT_ITEM_GRID ? "selected='selected'" : "")>Griglia</option>
								</select>
							</div>
							<div class="form-group" style="padding-top: 10px">
								@Html.LabelFor(s => s.Nome)
								@Html.TextBoxFor(model => model.Nome, new { @class = "form-control" })
							</div>
							<div class="form-group" style="padding-top: 10px; display:none;" id="pnlTestata">
								@Html.LabelFor(s => s.Testata)
								@Html.TextAreaFor(model => model.Testata, new { @class = "form-control trumbowyg" })
							</div>
							<div class="form-group" style="padding-top: 10px">
								@Html.LabelFor(s => s.Corpo)
								@Html.TextAreaFor(model => model.Corpo, new { @class = "form-control trumbowyg" })
							</div>
							<div class="input-field" style="padding-top: 10px">
								<p>
									<label>
										<input type="checkbox" value="true" name="Template.Visibile" @Html.Raw(Model.Visibile ? "checked=\"checked\"" : "") />
										<span>@nameof(TemplatesItemDto.Visibile)</span>
									</label>
								</p>
							</div>

							<div class="fixed-action-btn">
								<button class="btn-floating btn-large blue darken-3" id="btnSave" type="button" alt="Salva template">
									<i class="large material-icons">save</i>
								</button>
							</div>
						}
					</div>
				</div>
			</div>
		</div>

		<div class="card">
			<div class="card-content black-text">
				<span class="card-title bold-text">Informazioni</span>
				<p>
					Chiavi disponibili per Template CARD:
					<ul style="padding-left: 40px">
						@foreach (var prop in typeof(AttoDASIReportDto).GetProperties())
						{
							var displayName = prop.GetCustomAttributes(typeof(DisplayNameAttribute), true)
								.Cast<DisplayNameAttribute>()
								.FirstOrDefault()?.DisplayName ?? prop.Name;

							<li style="list-style-type: disc;">@displayName: <a class="blue-text" onclick="addKeyOnEditor(this)">{{@prop.Name}}</a></li>
						}
					</ul>
				</p>
			</div>
		</div>
	</div>
</div>

<script>

	$(window).on("load",
		async function () {
            if ($('select[id="ddlTipo"]').children("option:selected").val() == '@Html.Raw((int)TemplateTypeEnum.REPORT_ITEM_GRID)') {
                var pnlTestata = document.getElementById('pnlTestata');
				pnlTestata.style.display = 'block';
            }
        });

    function addKeyOnEditor(ctrl) {
        var keyToAdd = $(ctrl).text();
		var container_testo_richiesta = $("#Corpo").parent();
		var editor_testo_richiesta = $(container_testo_richiesta).find(".trumbowyg-editor");
		var testo = editor_testo_richiesta.html() + keyToAdd;
		editor_testo_richiesta.html(testo);
    }

	function ddlTipo_OnChange(ctrl) {
        var itemFormat = $(ctrl).val();
		var pnlTestata = document.getElementById('pnlTestata');
		if (itemFormat == '@Html.Raw((int)TemplateTypeEnum.REPORT_ITEM_GRID)') {
			pnlTestata.style.display = 'block';
         } else {
			pnlTestata.style.display = 'none';
         }
    }

    $("#btnSave").on("click",
        function() {
			$('#formTemplate').submit();
            window.opener.postMessage("aggiornaPadre", "@AppSettingsConfiguration.URL_CLIENT");
        });

	$("#formTemplate").submit(function(e) {
     e.preventDefault();
 }).validate({
     submitHandler: function(form) {

		 var container_testata = $("#Testata").parent();
		 var editor_testata = $(container_testata).find(".trumbowyg-editor");

         var container_corpo = $("#Corpo").parent();
		 var editor_corpo = $(container_corpo).find(".trumbowyg-editor");

         var obj = {};
		 obj.Uid = $("#Uid").val();
		 obj.Nome = $("#Nome").val();
		 obj.Corpo = editor_corpo.html();
		 obj.Testata = editor_testata.html();
		 obj.Tipo = $('select[id="ddlTipo"]').children("option:selected").val();
		 obj.Visibile = document.querySelector('input[name="Template.Visibile"]').checked;

         $.ajax({
             url: '@Url.Action("SaveTemplate")',
             type: "POST",
			 data: JSON.stringify(obj),
			 contentType: "application/json; charset=utf-8",
			 dataType: "json"
         }).done(function(data) {
             if (data.message) {
                 swal({
                     title: "Errore",
                     text: data.message,
                     icon: "error"
                 });
             } else {
                 swal({
                     title: "Procedura completata",
                     text: "Template inserito correttamente a sistema.",
                     icon: "success"
                 }).then((value) => {
			        go(data);
                 });
             }
         }).fail(function(err) {
             console.log("error", err);
             Error(err);
         });
     }
 });

	$('.trumbowyg').trumbowyg({
		semantic: true, // Usa tag semantici validi
		tagsToKeep: ['b', 'i', 'u', 'strong', 'em'], // Specifica i tag consentiti
		removeformatPasted: true, // Rimuovi formattazioni strane durante il paste
		lang: 'it',
		btns: [
			['viewHTML'],
			['formatting'],
			['strong', 'em', 'del'],
			['justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull'],
			['unorderedList', 'orderedList'],
			['indent', 'outdent'],
			['table'],
			['link'],
			['fontfamily'],
			['fontsize'],
			['removeformat'],
			['fullscreen']
		],
		plugins: {
			fontfamily: {
				fontList: [
					{ name: 'Arial', family: 'Arial, Helvetica, sans-serif' },
					{ name: 'Open Sans', family: '\'Open Sans\', sans-serif' }
				]
			}
		}
	});

</script>
</body>
</html>