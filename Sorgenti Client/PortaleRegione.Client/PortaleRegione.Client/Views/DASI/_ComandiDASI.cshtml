@using Newtonsoft.Json
@using PortaleRegione.Client.Helpers
@using PortaleRegione.DTO.Domain
@using PortaleRegione.DTO.Enum
@using Utility = PortaleRegione.Common.Utility
<div id="btnComandiMassivi" class="fixed-action-btn" style="display: none">
    <button type="button" role="button" class="btn-floating btn-large pink">
        <i class="large material-icons">playlist_add</i>
    </button>
    <ul>
        <li>
            <button type="button" role="button" class="btn-floating btn-large tooltipped btn-firma" data-position="left" 
                    data-tooltip="Firma" onclick="FirmaMassivo_DASI()">
                <i class="material-icons">gavel</i>
            </button>
        </li>
        <li>
            <button type="button" role="button" class="btn-floating btn-large tooltipped btn-presenta" data-position="left" data-tooltip="Deposita" onclick="PresentaMassivo_DASI()">
                <i class="material-icons">lock</i>
            </button>
        </li>
        <li>
            <button type="button" role="button" class="btn-floating btn-large tooltipped btn-invita" data-position="left" data-tooltip="Invita" onclick="InvitoMassivo_DASI()">
                <i class="material-icons">send</i>
            </button>
        </li>
        <li>
            <button type="button" role="button" class="btn-floating btn-large grey tooltipped" onclick="resetGridSelection()" data-position="left" data-tooltip="Annulla">
                <i class="material-icons">undo</i>
            </button>
        </li>
    </ul>
</div>
@{
    PersonaDto currentUser = null;

    if (HttpContext.Current.User.Identity.IsAuthenticated)
    {
        var authCookie1 = Request.Cookies["PRCookies1"];
        var authCookie2 = Request.Cookies["PRCookies2"];
        var authCookie3 = Request.Cookies["PRCookies3"];
        if (authCookie1 != null && authCookie2 != null && authCookie3 != null)
        {
            if (!string.IsNullOrEmpty(authCookie1.Value) && !string.IsNullOrEmpty(authCookie2.Value) && !string.IsNullOrEmpty(authCookie3.Value))
            {
                var authenticationTicket1 = FormsAuthentication.Decrypt(authCookie1.Value);
                var authenticationTicket2 = FormsAuthentication.Decrypt(authCookie2.Value);
                var authenticationTicket3 = FormsAuthentication.Decrypt(authCookie3.Value);
                var data = JsonConvert.DeserializeObject<PersonaDto>(string.Format("{0}{1}{2}", authenticationTicket1.UserData, authenticationTicket2.UserData, authenticationTicket3.UserData));

                currentUser = data;
            }
        }
    }
    var mode = Convert.ToInt16(HttpContext.Current.Cache.Get($"{CacheHelper.CLIENT_MODE}_{currentUser.UID_persona.ToString()}"));
    var block = mode == (int)ClientModeEnum.GRUPPI || mode == 0 ? "block" : "none";
}
<div id="pnlNuovoDASI" class="fixed-action-btn" style="display: @Html.Raw(block)">
    <button type="button" role="button" id="btnNuovoDASI" class="btn-floating btn-large blue darken-3">
        <i class="large material-icons">add</i>
    </button>
    <ul>
        @if (AppSettingsConfiguration.EnableITL)
        {
            <li>
                <button type="button" role="button" class="btn-floating btn-large @Html.Raw(TipoAttoCSSConst.ITL + "_ico")" onclick="goIntoOtherTab('@Url.Action("Nuovo", new { tipo = (int)TipoAttoEnum.ITL })')">@Utility.GetText_Tipo((int)TipoAttoEnum.ITL)</button>
            </li>
        }
        @if (AppSettingsConfiguration.EnableITR)
        {
            <li>
                <button type="button" role="button" class="btn-floating btn-large @Html.Raw(TipoAttoCSSConst.ITR + "_ico")" onclick="goIntoOtherTab('@Url.Action("Nuovo", new { tipo = (int)TipoAttoEnum.ITR })')">@Utility.GetText_Tipo((int)TipoAttoEnum.ITR)</button>
            </li>
        }
        @if (AppSettingsConfiguration.EnableIQT)
        {
            <li>
                <button type="button" role="button" class="btn-floating btn-large @Html.Raw(TipoAttoCSSConst.IQT + "_ico")" onclick="goIntoOtherTab('@Url.Action("Nuovo", new { tipo = (int)TipoAttoEnum.IQT })')">@Utility.GetText_Tipo((int)TipoAttoEnum.IQT)</button>
            </li>
        }
        @if (AppSettingsConfiguration.EnableMOZ)
        {
            <li>
                <button type="button" role="button" class="btn-floating btn-large @Html.Raw(TipoAttoCSSConst.MOZ + "_ico")" onclick="goIntoOtherTab('@Url.Action("Nuovo", new { tipo = (int)TipoAttoEnum.MOZ })')">@Utility.GetText_Tipo((int)TipoAttoEnum.MOZ)</button>
            </li>
        }
        @if (AppSettingsConfiguration.EnableODG)
        {
            <li>
                <button type="button" role="button" class="btn-floating btn-large @Html.Raw(TipoAttoCSSConst.ODG + "_ico")" onclick="goIntoOtherTab('@Url.Action("Nuovo", new { tipo = (int)TipoAttoEnum.ODG })')">@Utility.GetText_Tipo((int)TipoAttoEnum.ODG)</button>
            </li>
        }
    </ul>
</div>

@Html.Partial("_InvitoPanelMassivo")

<script>
	$(document).ready(function () {
		$('.fixed-action-btn').floatingActionButton({
			hoverEnabled: true
		});
	});
	
    async function MassivoDASI(action) {
        var text = "";
        var button = "";
        
        var selezionaTutti = getSelezionaTutti_DASI();
        var lista = getListaAtti();
		var totaleDoc = GetCounterAlert(lista, selezionaTutti);

        if (totaleDoc <= 0) {
            swal({
                title: "Errore",
                text: "Seleziona almeno un atto da elaborare",
                icon: "error"
            });
            return;
        }

        if (action == @((int)ActionEnum.FIRMA)) {
            text = "Inserisci il PIN per firmare ";
            button = "Firma";
        } else if (action == @((int)ActionEnum.DEPOSITA)) {
            text = "Inserisci il PIN per presentare ";
            button = "Presenta";
        } else if (action == @((int)ActionEnum.INVITA)) {
            await NotificaADASI(@((int)TipoDestinatarioNotificaEnum.CONSIGLIERI));
            return;
        }
        var limite_file = @Html.Raw(AppSettingsConfiguration.LimiteDocumentiDaProcessare);
        if (totaleDoc > limite_file) {
            text = text + " (Verranno processati solamente i primi " + limite_file + ")";
        } else {
            text = text + totaleDoc + " atti";
        }
        swal(text,
                {
                    content: {
                        element: "input",
                        attributes: { placeholder: "******", className: "password" }
                    },
                    buttons: { cancel: "Annulla", confirm: button }
                })
            .then((value) => {
                if (value == null || value == "")
                    return;
                waiting(true);

                var obj = {};
                obj.Pin = value;
                obj.Azione = action;
                obj.Lista = lista.length > 0 ? lista : [];
				obj.Tutti = selezionaTutti;
				obj.Richiesta_Firma = $('#checkAllMy').is(':checked');

                $.ajax({
                    url: baseUrl + "/dasi/azioni-massive",
                    type: "POST",
                    data: JSON.stringify(obj),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json"
                }).done(function(data) {
                    var typeMessage = "error";
                    var str = data.message;
                    var pos = str.indexOf('OK');
                    if (pos > 0) {
                        typeMessage = "success";
                    }
                    waiting(false);
                    swal({
                        title: "Esito procedura",
                        text: data.message,
                        icon: typeMessage,
                        button: "Ok"
                    }).then(() => {
                        DeselectALLDASI();
                        location.reload();
                    });
                }).fail(function(err) {
                    waiting(false);
                    console.log("error", err);
                    Error(err);
                });
            });
    }

    function FirmaMassivo_DASI() {
        MassivoDASI(@Html.Raw((int)ActionEnum.FIRMA));
    }

    function PresentaMassivo_DASI() {
        MassivoDASI(@Html.Raw((int)ActionEnum.DEPOSITA));
    }

    function InvitoMassivo_DASI() {
        MassivoDASI(@Html.Raw((int)ActionEnum.INVITA));
    }

    function AbilitaComandiMassivi_DASI(uidAtto) {
		var selezionaTutti = getSelezionaTutti_DASI();
        if (uidAtto) {
            var chk = $("#chk_Atto_" + uidAtto);
            if (chk[0].checked) {
                if (selezionaTutti) {
                    removeAtto(uidAtto); //listaEsclusiva
                } else {
                    addAtto(uidAtto); //listaInsclusiva
                }
            } else {
                if (selezionaTutti) {
                    addAtto(uidAtto); //listaEsclusiva
                } else {
                    removeAtto(uidAtto); //listaInsclusiva
                }
            }
        }

        var lchk = getListaAtti();
        var check_all = false;
        if ($("#checkAll").length > 0) {
            check_all = $("#checkAll")[0].checked;
        }
        if (lchk.length > 0 || check_all || selezionaTutti) {
            $("#btnComandiMassivi").show();
            $("#pnlNuovoDASI").hide();
        } else {
            $("#btnComandiMassivi").hide();
            var mode = @Html.Raw(mode);
            if (mode == @((int)ClientModeEnum.GRUPPI)) {
                $("#pnlNuovoDASI").show();
            } else {
                $("#pnlNuovoDASI").hide();

            }
        }
    }

    function resetGridSelection() {
        $("#checkAll").prop("checked", false);
        $('input[id^="chk_Atto_"]').not(this).prop("checked", false);
        setSelezionaTutti_DASI(false);
        setListaAtti([]);
        AbilitaComandiMassivi_DASI(null);
    }

</script>