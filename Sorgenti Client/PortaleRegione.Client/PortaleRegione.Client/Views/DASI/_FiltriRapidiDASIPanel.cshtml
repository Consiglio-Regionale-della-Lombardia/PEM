@using PortaleRegione.Common
@using PortaleRegione.DTO.Domain
@model PortaleRegione.DTO.Model.RiepilogoDASIModel

<div class="row">
	<div class="input-field col s12">
		<i class="material-icons prefix">textsms</i>
		<input type="text" id="autocomplete-input" class="autocomplete">
		<label for="autocomplete-input">Ricerca filtri disponibili</label>
	</div>
</div>
<div class="row">
	<div class="col l12 m12 s12 left-align">
		<div id="chips-container">
		</div>
	</div>
</div>

<!-- Modal Structure -->
<div id="infoModal" class="modal">
	<div class="modal-content">
		<h4>Dettaglio ricerca</h4>
		<h5 id="modal-content"></h5>
		<input id="modal-filter-id-hidden" type="hidden" />
		<div id="dynamic-select-container"></div>
	</div>
	<div class="modal-footer">
		<a href="#!" class="modal-close waves-effect waves-green btn-flat">Chiudi</a>
		<a id="addFiltersButton" class="btn blue">Aggiungi</a>
	</div>
</div>

<script>
var availableFilterArray = [
        {tag:"@Utility.GetDisplayName(typeof(AttoDASIDto), nameof(AttoDASIDto.Legislatura))", id: "1"},
        {tag:"@Utility.GetDisplayName(typeof(AttoDASIDto), nameof(AttoDASIDto.IDStato))", id: "2"},
        {tag:"@Utility.GetDisplayName(typeof(AttoDASIDto), nameof(AttoDASIDto.Tipo))", id: "3"}
    ];

document.addEventListener('DOMContentLoaded', function() {
    var chipsKeys = {};

	var collection = document.getElementById('data-collection');
	availableFilterArray.forEach(function (item) {
		var li = document.createElement('li');
		li.className = 'collection-item';
		li.textContent = item.tag;

		// Crea il secondary-content con un'icona per aggiungere la chip
		var addIcon = document.createElement('i');
		addIcon.className = 'material-icons secondary-content';
		addIcon.textContent = 'add_circle';
		addIcon.onclick = function (event) {
			event.stopPropagation();
			openModalWithContent(item.id, item.tag, false);
		};

		li.appendChild(addIcon);
		collection.appendChild(li);
	});

    document.getElementById('addFiltersButton').addEventListener('click', function () {
	    var selectedOption = document.querySelector('#dynamic-select-container select');
	    var val = selectedOption.options[selectedOption.selectedIndex].value;
	    var text = selectedOption.options[selectedOption.selectedIndex].text;
	    var chipText = document.getElementById('modal-content').textContent + ": " + text;

	    addChipIfNotExists(document.getElementById('modal-filter-id-hidden').value, document.getElementById('modal-content').textContent, val, text, chipText);

	    // Chiudi la modal
	    $('#infoModal').modal("close");
    });

    var elems = document.querySelectorAll('#autocomplete-input');
    var instances = M.Autocomplete.init(elems, {
        data: availableFilterArray,
	    onAutocomplete: function (txt, key) {
		    // Mostra i dettagli dell'elemento selezionato nella modal
		    openModalWithContent(key, txt, false);
	    }
    });

    document.getElementById('autocomplete-input').addEventListener('keydown', function (event) {
	    if (event.key === 'Enter') {
		    event.preventDefault(); // Previene l'invio del form, se necessario

		    // Ottieni l'elenco dei suggerimenti dell'autocompletamento
		    var autocompleteList = document.querySelectorAll('.autocomplete-content.dropdown-content li');
		    if (autocompleteList.length > 0 && !autocompleteList[0].classList.contains('disabled')) {
			    // Simula un click sul primo suggerimento visibile
			    autocompleteList[0].click();
		    }
	    }
    });

    function openModalWithContent(key, txt, isEditing){
	    document.getElementById('autocomplete-input').value = "";
	    document.getElementById('modal-content').textContent = txt;
	    document.getElementById('modal-filter-id-hidden').value = key;
	    var selectHTML = '';
	    switch (key) {
		    case '1':
			    selectHTML = '<select><option value="soldi">Soldi</option><option value="fama">Fama</option><option value="ricchezza">Ricchezza</option></select>';
			    break;
		    case '2':
			    selectHTML = '<select><option value="presente">Presente</option><option value="passato">Passato</option><option value="futuro">Futuro</option></select>';
			    break;
		    case '3':
			    selectHTML = '<select><option value="ferro">Ferro</option><option value="bronzo">Bronzo</option><option value="acciaio">Acciaio</option></select>';
			    break;
		    default:
			    console.log("Filtro non riconosciuto!");
			    break;
	    }
	    document.getElementById('dynamic-select-container').innerHTML = selectHTML;
	    M.FormSelect.init(document.querySelectorAll('select'));

	    // Apri la modal
	    $('#infoModal').modal("open");
    }

    function addChipIfNotExists(key, keyLabel, val, label, chipText) {
	    // Verifica se la chiave è già stata utilizzata
	    if (!chipsKeys[key]) {
		    // La chiave non esiste, quindi aggiungi la chip
		    var chipsContainer = document.getElementById('chips-container');
		    var newChip = document.createElement('div');
		    newChip.setAttribute('data-val', val);
		    newChip.setAttribute('data-label', label);
		    newChip.setAttribute('data-filterby', key);
		    newChip.setAttribute('data-filterby-label', keyLabel);
		    newChip.classList.add('chip');
		    newChip.textContent = chipText;

		    // Aggiungi un'icona per modificare la chip, se desiderato
		    var editIcon = document.createElement('i');
		    editIcon.classList.add('material-icons', 'tiny');
		    editIcon.style.setProperty('margin-left', '10px');
		    editIcon.style.setProperty('top', '2px');
		    editIcon.textContent = 'edit';
		    editIcon.onclick = function (event) {
			    event.stopPropagation();
			    openModalWithContent(key, keyLabel, true);
		    };
		    newChip.appendChild(editIcon);

		    // Aggiungi un'icona per rimuovere la chip, se desiderato
		    var closeIcon = document.createElement('i');
		    closeIcon.style.setProperty('top', 'unset', 'important');
		    closeIcon.classList.add('close', 'material-icons');
		    closeIcon.textContent = 'close';
		    closeIcon.onclick = function () {
			    delete chipsKeys[key]; // Rimuovi la chiave dall'elenco tracciato quando la chip è rimossa
			    newChip.remove();
		    };
		    newChip.appendChild(closeIcon);

		    chipsContainer.appendChild(newChip);

		    // Aggiorna l'elenco delle chiavi tracciate
		    chipsKeys[key] = true;
	    } else {
		    // La chiave esiste già, quindi non aggiungere una nuova chip
			swal("Info", "Filtro già presente.", "info");
	    }
    }
});

</script>