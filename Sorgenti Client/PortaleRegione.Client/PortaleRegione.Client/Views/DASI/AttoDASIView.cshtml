@using Newtonsoft.Json
@using PortaleRegione.Client.Helpers
@using PortaleRegione.DTO.Domain
@using PortaleRegione.DTO.Enum
@using Utility = PortaleRegione.Common.Utility
@model PortaleRegione.DTO.Model.DASIFormModel

@{
    Layout = null;
    var atto = Model.Atto;
    var title = $"{Utility.GetText_Tipo(atto)} {atto.NAtto}";

    if (!atto.IsBozza)
    {
        title += $" - {atto.GetLegislatura()}";
    }

    ViewBag.Title = title;

    PersonaDto currentUser = null;
    var modeFromCache = (int)ClientModeEnum.TRATTAZIONE;
    if (HttpContext.Current.User.Identity.IsAuthenticated)
    {
	    var data = TryReadChunkedCookies.GetJson<PersonaDto>(Request, "PRCookies");
	    if (data != null)
	    {
		    currentUser = data;
		    modeFromCache = Convert.ToInt16(HttpContext.Current.Cache.Get($"{CacheHelper.CLIENT_MODE}_{currentUser.UID_persona.ToString()}"));
	    }
    }

    var firmeGroup = new List<AttiFirmeDto>();
    firmeGroup.AddRange(atto.FirmeAnte);
    firmeGroup.AddRange(atto.FirmePost);
    firmeGroup = firmeGroup
        .OrderBy(f => f.OrdineVisualizzazione)
        .ToList();
}

<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>@ViewBag.Title</title>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">

    @Styles.Render("~/Content/css")
    @*Import Trumbowyg plugins style...*@
    <link href="~/Content/editor/plugins/table/ui/trumbowyg.table.min.css" rel="stylesheet"/>

    @Scripts.Render("~/bundles/lib")
    @Scripts.Render("~/bundles/logic")
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>
    <script src="~/Scripts/moment.js"></script>
</head>
<body>
<script>
		$(document).ready(function () {
			$('#btnSearch').hide();
		});
	</script>

<div id="waiting" class="modal" style="height: 120px">
    <div class="modal-content center">
        <div class="preloader-wrapper active">
            <div class="spinner-layer spinner-blue-only">
                <div class="circle-clipper left">
                    <div class="circle"></div>
                </div>
                <div class="gap-patch">
                    <div class="circle"></div>
                </div>
                <div class="circle-clipper right">
                    <div class="circle"></div>
                </div>
            </div>
        </div>

        <div id="waiting_info_message"></div>
    </div>
</div>
<div class="row" style="margin-bottom: unset !important">
    <div class="col s12">
        <button type="button" role="button" class="btn-floating grey darken-3 header-back" onclick="window.close()">
            <i class="material-icons">close</i>
        </button>
    </div>
</div>
<div class="row">
<div class="col s12">
<div class="card">
	<div class="card-action grey lighten-4 center">
		@{
			// #1502
			var labelStato = PortaleRegione.Common.Utility.GetText_StatoDASI(atto.IDStato);

			if (atto.TipoChiusuraIter.HasValue && atto.TipoChiusuraIter > 0)
			{
				labelStato += $" {PortaleRegione.Common.Utility.GetText_ChiusuraIterDASI(atto.TipoChiusuraIter)}";
			}
		}
		<div class="chip @PortaleRegione.Client.Helpers.Utility.GetCSS_StatoDASI(atto.IDStato) white-text" style="min-width: unset; position: absolute; right: 10px; top: -18px;border-color:black!important;color:black!important;">@labelStato</div>
		<h6>
			<b>
				<span>@Html.Raw(atto.gruppi_politici.nome_gruppo)</span>
			</b>
		</h6>
	</div>
@if (atto.Firmabile
     || atto.Presentabile
     || atto.Eliminabile
     || atto.Ritirabile
     || atto.Modificabile
     || (atto.Invito_Abilitato
         && Convert.ToInt16(modeFromCache) != (int)ClientModeEnum.TRATTAZIONE))
{
    <div class="card-action grey lighten-4 center" style="border-top: unset">
        <div class="row" style="margin: 0 !important">
            <div class="col s12" style="margin-top: 5px">
                @if (atto.Firmabile)
                {
                    <button type="button" role="button" class="btn-flat green-text" onclick="RevealFirmaDepositoDASI('@atto.UIDAtto', @Html.Raw((int)ActionEnum.FIRMA))">
                         Firma
                    </button>
                }
                @if (atto.Presentabile)
                {
                    <button type="button" role="button" class="btn-flat purple-text" onclick="RevealFirmaDepositoDASI('@atto.UIDAtto', @Html.Raw((int)ActionEnum.DEPOSITA))">
                        Deposita
                    </button>
                }
                @if (atto.Modificabile)
                {
                    <button type="button" role="button" class="btn-flat blue-text" onclick="go('@Url.Action("Modifica", new { id = atto.UIDAtto })')">
                        Modifica
                    </button>
                }
                @if (atto.Invito_Abilitato)
                {
                    <button type="button" role="button" class="btn-flat orange-text" onclick="NotificaADASI('@atto.UIDAtto', @atto.Tipo)">
                        Invita
                    </button>
                }
                @if (atto.Eliminabile)
                {
                    <button type="button" role="button" class="btn-flat red-text" onclick="ConfirmActionDASI('@atto.UIDAtto', '', @Html.Raw((int)ActionEnum.ELIMINA))">
                        Elimina
                    </button>
                }
                @if (atto.Ritirabile)
                {
                    <button type="button" role="button" class="btn-flat red-text" onclick="ConfirmActionDASI('@atto.UIDAtto', '', @Html.Raw((int)ActionEnum.RITIRA))">
                        Ritira Atto
                    </button>
                }
            </div>
        </div>
    </div>
}
<div class="card-content">
	@*### IQT ###*@

	@if (atto.Tipo == (int)TipoAttoEnum.IQT)
	{
		if (string.IsNullOrEmpty(Model.Atto.DataRichiestaIscrizioneSeduta)
			&& (atto.UIDPersonaProponente == Model.CurrentUser.UID_persona
				|| ((Model.CurrentUser.IsCapoGruppo
					 || Model.CurrentUser.IsResponsabileSegreteriaPolitica)
					&& Model.CurrentUser.Gruppo.id_gruppo == atto.id_gruppo)))
		{
			<div class="row">
				<div class="col s12 center">
					<div class="">
						<span class="black-text">
							<button type="button" role="button" class="btn-flat pink-text tooltipped"
                                    data-tooltip="Iscrizione in seduta"
							   onclick="RichiediIscrizioneSedutaDASI('@Html.Raw(Model.Atto.UIDAtto)', '@Html.Raw(Model.Atto.Display)', @Html.Raw(Model.Atto.Tipo), @Html.Raw(Model.Atto.TipoMOZ))">
								Iscrizione in seduta
							</button>
						</span>
					</div>
				</div>
			</div>
		}
		else if (!string.IsNullOrEmpty(Model.Atto.DataRichiestaIscrizioneSeduta))
		{
			<br />
			<label>
				Richiesta iscrizione alla seduta del
			</label>
			<span>
				<b>@Model.Atto.DataRichiestaIscrizioneSeduta</b>
			</span>
			if (atto.IDStato >= (int)StatiAttoEnum.PRESENTATO)
			{
				// ignored
			}
			else if (atto.UIDPersonaProponente == Model.CurrentUser.UID_persona
					 || ((Model.CurrentUser.IsCapoGruppo
						  || Model.CurrentUser.IsResponsabileSegreteriaPolitica)
						 && Model.CurrentUser.Gruppo.id_gruppo == atto.id_gruppo))
			{
				<button type="button" role="button" class="btn-flat red-text" onclick="RimuoviRichiestaIscrizioneDASI('@Model.Atto.UIDAtto', '@Html.Raw(Model.Atto.Display)')">
					Rimuovi richiesta
				</button>
			}
		}
	}

	@*### MOZ e ODG ###*@


	@if (atto.IsMOZ() && atto.TipoMOZ == (int)TipoMOZEnum.URGENTE && !string.IsNullOrEmpty(atto.DataPresentazione_MOZ_URGENTE))
	{
		<label>Richiesta di mozione urgente effettuata il </label>
		<span>
			<b>@atto.DataPresentazione_MOZ_URGENTE</b>
		</span>
		if (Model.Atto.IsMOZ()
			&& (Model.CurrentUser.IsCapoGruppo
				|| Model.CurrentUser.IsResponsabileSegreteriaPolitica)
			&& Model.CurrentUser.Gruppo.id_gruppo == atto.id_gruppo)
		{
			<button type="button" role="button" class="btn-flat red-text" onclick="DeclassaMozione('@atto.UIDAtto', '@atto.Display', 1)">
				Rimuovi urgenza
			</button>
		}
	}
	else if (atto.IsMOZ() && atto.TipoMOZ == (int)TipoMOZEnum.ABBINATA && !string.IsNullOrEmpty(atto.DataPresentazione_MOZ_ABBINATA))
	{
		<label>Richiesta di mozione abbinata effettuata il </label>
		<span>
			<b>@atto.DataPresentazione_MOZ_ABBINATA</b>
		</span>
		if (Model.Atto.IsMOZ()
			&& (Model.CurrentUser.IsCapoGruppo
				|| Model.CurrentUser.IsResponsabileSegreteriaPolitica)
			&& Model.CurrentUser.Gruppo.id_gruppo == atto.id_gruppo)
		{
			<button type="button" role="button" class="btn-flat red-text" onclick="DeclassaMozione('@atto.UIDAtto', '@atto.Display', 2)">
				Rimuovi abbinamento
			</button>
		}
	}
	@if (atto.IsMOZ()
		 && atto.TipoMOZ == (int)TipoMOZEnum.ORDINARIA
		 && (atto.IDStato == (int)StatiAttoEnum.PRESENTATO
			 || atto.IDStato == (int)StatiAttoEnum.IN_TRATTAZIONE)
		 && (Model.CurrentUser.IsCapoGruppo
			 || Model.CurrentUser.IsResponsabileSegreteriaPolitica)
		 && Model.CurrentUser.Gruppo.id_gruppo == atto.id_gruppo)
	{
		<div class="row">
			<div class="col s12 center">
				<div class="">
					<span class="black-text">
						<button type="button" role="button" class="btn-flat orange-text tooltipped"
                                data-tooltip="Proponi urgenza"
						   onclick="ProponiUrgenzaDASI('@Html.Raw(atto.UIDAtto)', '@Html.Raw(atto.Display)')">
							Proponi urgenza
						</button>
						<button type="button" role="button" class="btn-flat orange-text tooltipped"
                                data-tooltip="Proponi abbinamento"
						   onclick="ProponiAbbinataDASI('@Html.Raw(atto.UIDAtto)', '@Html.Raw(atto.Display)')">
							Proponi abbinamento
						</button>
					</span>
				</div>
			</div>
		</div>
	}

	@if ((atto.IsMOZ() && (atto.IDStato == (int)StatiAttoEnum.PRESENTATO || atto.IDStato == (int)StatiAttoEnum.IN_TRATTAZIONE))
		 || atto.IsODG())
	{
		if (string.IsNullOrEmpty(Model.Atto.DataRichiestaIscrizioneSeduta)
			&& (Model.CurrentUser.IsCapoGruppo
				|| Model.CurrentUser.IsResponsabileSegreteriaPolitica)
			&& Model.CurrentUser.Gruppo.id_gruppo == atto.id_gruppo)
		{
			<div class="row">
				<div class="col s12 center">
					<div class="">
						<span class="black-text">
							<button type="button" role="button" class="btn-flat pink-text tooltipped"
                                    data-tooltip="Iscrizione in seduta"
							   onclick="RichiediIscrizioneSedutaDASI('@Html.Raw(Model.Atto.UIDAtto)', '@Html.Raw(Model.Atto.Display)', @Html.Raw(Model.Atto.Tipo), @Html.Raw(Model.Atto.TipoMOZ))">
								Iscrizione in seduta
							</button>
						</span>
					</div>
				</div>
			</div>
		}
		else if (!string.IsNullOrEmpty(Model.Atto.DataRichiestaIscrizioneSeduta))
		{
			<br />
			if (Model.Atto.IsMOZ())
			{
				<label>
					Richiesta iscrizione alla seduta del
				</label>
				<span>
					<b>@Model.Atto.DataRichiestaIscrizioneSeduta</b>
				</span>
			}
			else if (Model.Atto.Tipo == (int)TipoAttoEnum.ODG)
			{
				<label>
					Iscrizione per la seduta del
				</label>
				<span>
					<b>@Model.Atto.DataRichiestaIscrizioneSeduta</b>
				</span>
			}

			if (Model.Atto.IsMOZ()
				&& (Model.CurrentUser.IsCapoGruppo
					|| Model.CurrentUser.IsResponsabileSegreteriaPolitica)
				&& Model.CurrentUser.Gruppo.id_gruppo == atto.id_gruppo)
			{
				<button type="button" role="button" class="btn-flat red-text"
					 onclick="RimuoviRichiestaIscrizioneDASI('@Model.Atto.UIDAtto', '@Html.Raw(Model.Atto.Display)')">
					Rimuovi richiesta
				</button>
			}
		}
	}

	@if (atto.IsMOZ() && atto.TipoMOZ == (int)TipoMOZEnum.ORDINARIA && !string.IsNullOrEmpty(atto.DataPresentazione_MOZ))
	{
		<br />
		<label>Richiesta di iscrizione effettuata il </label>
		<span>
			<b>@atto.DataPresentazione_MOZ</b>
		</span>
	}

	@if (atto.DataIscrizioneSeduta.HasValue)
	{
		var textSeduta = $"{atto.Seduta.Data_seduta:dd/MM/yyyy}";
		var tooltipSeduta = $"Iscritto dal {atto.DataIscrizioneSeduta.Value:dd/MM/yyyy HH:mm:ss}";
		<br />
		<label>Iscritto alla seduta del </label>
		<span class="tooltipped" data-tooltip="@tooltipSeduta">
			<b>@textSeduta</b>
		</span>
	}

	@* NOTA PUBBLICA + GRUPPO + PROPONENTE *@
	<div class="row">
		<div class="col s6 left">
			@if (atto.UIDPersonaModifica.HasValue && atto.IDStato < (int)StatiAttoEnum.PRESENTATO)
			{
				<label style="font-size: small !important">Ultima modifica: </label>
				<br />
				<b>[@atto.DataModifica.Value.ToString("dd/MM/yyyy HH:mm")] @atto.PersonaModifica.DisplayName</b>
			}
			@if (!string.IsNullOrEmpty(atto.Note_Pubbliche))
			{
				<div class="green-text">
					<p style="padding-top: 10px">
						<b>Nota ufficio dei lavori assembleari: </b>
						@Html.Raw(atto.Note_Pubbliche)
					</p>
				</div>
			}
		</div>
		<div class="col s6 right-align">
			<label style="font-size: small !important">Proponente: </label>
			<br />
			<b>@atto.PersonaProponente.DisplayName</b>
		</div>
	</div>

	@* BODY *@
	<div class="row">
		<div class="col s12 center bodyEMClass">
			@Html.Raw(atto.BodyAtto)
		</div>
	</div>
	@* FIRME *@
	<div class="row" id="pnlStandardFirme">
		<div class="col s12">

			@if (string.IsNullOrEmpty(Model.Atto.Protocollo)
			&& (Model.Atto.IsIQT() || Model.Atto.IsMOZ() || Model.Atto.IsODG()))
			{
				if ((firmeGroup.Any()
				     && Model.Atto.UIDPersonaProponente == Model.CurrentUser.UID_persona)
				    || (Model.CurrentUser.IsCapoGruppo && Model.CurrentUser.Gruppo.id_gruppo == atto.id_gruppo
				                                       && Model.Atto.IDStato <= (int)StatiAttoEnum.PRESENTATO)
				    || (Model.CurrentUser.IsResponsabileSegreteriaPolitica && Model.CurrentUser.Gruppo.id_gruppo == atto.id_gruppo
				                                                           && Model.Atto.IDStato <= (int)StatiAttoEnum.PRESENTATO)
				    || Model.CurrentUser.IsSegreteriaAssemblea)
				{
					<button type="button" role="button" class="btn-flat pink-text" onclick="SwitchVisualizzazionePriorita()">
						Gestisci priorità e ordinamento firme @*#987*@
					</button>
					<br />
				}
			}

			<ul class="collection" id="pnlFirme">
				@foreach (var firme in firmeGroup)
				{
					//#985

					<li class="collection-item" data-uid-persona="@firme.UID_persona" data-uid-atto="@firme.UIDAtto" data-ordine="@firme.OrdineVisualizzazione" data-dopo-deposito="@(firme.Timestamp > atto.Timestamp && !atto.IsBozza)">
                        <span @Html.Raw(firme.Prioritario ? "class='bold-text'" : "") @Html.Raw(!string.IsNullOrEmpty(firme.Data_ritirofirma) ? "style='text-decoration:line-through!important'" : "")>
                            @firme.FirmaCert
                            <label>Firmato il @firme.Timestamp.ToString("dd/MM/yyyy")</label>
							
                            @if (!string.IsNullOrEmpty(firme.Data_ritirofirma))
                            {
                                <label>(@firme.Data_ritirofirma)</label>
                            }
                        </span>
                        
						@if (Model.CurrentUser.UID_persona.Equals(firme.UID_persona))
						{
                            if (string.IsNullOrEmpty(firme.Data_ritirofirma))
                            {
                                @*#986*@
                                if (atto.IDStato >= (int)StatiAttoEnum.PRESENTATO)
                                {
                                    <button type="button" role="button" class='btn-flat red-text secondary-content tooltipped' data-tooltip="Ritira la tua firma da questo atto. Se sei il proponente dell'atto, l'atto potrebbe decadere"
                                            style="min-width:unset" onclick="RitiraFirmaDASI('@firme.UIDAtto')"><i class='icon material-icons'>delete</i></button>
                                }
                                else
                                {
                                    <button type="button" role="button" class='btn-flat red-text secondary-content' style="min-width:unset;" onclick="EliminaFirmaDASI('@firme.UIDAtto')"><i class='icon material-icons'>delete</i></button>
                                }
                            }
						}
					</li>
				}
			</ul>

			@if (!string.IsNullOrEmpty(atto.DataPresentazione))
			{
				var testoDeposito = "Atto presentato";

				<label class="black-text">
					<b>@testoDeposito il @Html.Raw(atto.DataPresentazione)</b>
				</label>
			}
		</div>
	</div>

	@if ((firmeGroup.Any()
          && Model.Atto.UIDPersonaProponente == Model.CurrentUser.UID_persona)
		 || (Model.CurrentUser.IsCapoGruppo && Model.CurrentUser.Gruppo.id_gruppo == atto.id_gruppo
			 && Model.Atto.IDStato <= (int)StatiAttoEnum.PRESENTATO)
		 || (Model.CurrentUser.IsResponsabileSegreteriaPolitica && Model.CurrentUser.Gruppo.id_gruppo == atto.id_gruppo
			 && Model.Atto.IDStato <= (int)StatiAttoEnum.PRESENTATO)
		 || Model.CurrentUser.IsSegreteriaAssemblea) // Aggiunta condizione per UOLA
	{
		@* FIRME PRIORITA' *@
		<div class="row" id="pnlPrioritaFirme" style="display: none;">
			<div class="col s12">
				<button type="button" role="button" class="btn-flat pink-text" onclick="$('#pnlPrioritaFirme').hide();$('#pnlStandardFirme').show();">
					Termina gestione firme @*#987*@
				</button>
				<br />

				<ul class="collapsible expandable">
					@foreach (var firme in firmeGroup)
					{
						<li data-uid-persona="@firme.UID_persona" data-uid-atto="@firme.UIDAtto" data-ordine="@firme.OrdineVisualizzazione" data-dopo-deposito="@(firme.Timestamp > atto.Timestamp && !atto.IsBozza)">
							@if (firme.Prioritario)
							{
								<div class="collapsible-header valign-wrapper">
									@if (atto.UIDPersonaProponente != firme.UID_persona)
									{
										if (atto.IsMOZ()
											|| atto.IsIQT()
											|| atto.IsODG())
										{
                                            <button type="button" role="button" class="btn-floating white secondary-content tooltipped" data-tooltip="Aggiungi/rimuovi priorità firmatario"
											   onclick="CambiaPrioritaFirma(this, '@firme.UIDAtto', '@firme.UID_persona');">
												<i class="material-icons black-text" style="margin-left: 5px;">star</i>
											</button>
										}
									}
									<span class="title bold-text">
										@firme.FirmaCert
									</span>
									<p> - Firmato il @firme.Timestamp.ToString("dd/MM/yyyy")</p>

									@if (atto.UIDPersonaProponente != firme.UID_persona) // Controllo aggiuntivo per il primo firmatario
									{
                                        if ((Model.Atto.UIDPersonaProponente == Model.CurrentUser.UID_persona && Model.Atto.IDStato < (int)StatiAttoEnum.PRESENTATO)
                                            || (Model.CurrentUser.IsCapoGruppo && Model.CurrentUser.Gruppo.id_gruppo == atto.id_gruppo
                                                                               && Model.Atto.IDStato < (int)StatiAttoEnum.PRESENTATO)
                                            || (Model.CurrentUser.IsResponsabileSegreteriaPolitica && Model.CurrentUser.Gruppo.id_gruppo == atto.id_gruppo
                                                                                                   && Model.Atto.IDStato < (int)StatiAttoEnum.PRESENTATO)
                                            || (Model.CurrentUser.IsSegreteriaAssemblea && !atto.IsChiuso)) 
                                        {
                                            <i class="material-icons black-text arrow-up" style="margin-left: 5px;" onclick="CambioOrdineVisualizzazione(this, -1)">arrow_upward</i>
                                            <i class="material-icons black-text arrow-down" style="margin-left: 5px;" onclick="CambioOrdineVisualizzazione(this, 1)">arrow_downward</i>
                                        }
									}
								</div>
							}
							else
							{
								<div class="collapsible-header valign-wrapper">
									@if (string.IsNullOrEmpty(firme.Data_ritirofirma))
									{
										if (atto.IsMOZ()
										    || atto.IsIQT()
										    || atto.IsODG())
										{
                                            <button type="button" role="button" class="btn-floating white secondary-content tooltipped" data-tooltip="Aggiungi/rimuovi priorità firmatario"
                                                    onclick="CambiaPrioritaFirma(this, '@firme.UIDAtto', '@firme.UID_persona');">
												<i class="material-icons" style="margin-left: 5px;">star_border</i>
											</button>
										}
										<span class="title">@firme.FirmaCert</span>
										<p> - Firmato il @firme.Timestamp.ToString("dd/MM/yyyy")</p>
									}
									else
									{
										<del>
											<span class="title">@firme.FirmaCert</span>
										</del>
										<p> - Firmato il <del>@firme.Timestamp.ToString("dd/MM/yyyy")</del> ritirato il @firme.Data_ritirofirma</p>
									}

                                    @if (atto.UIDPersonaProponente != firme.UID_persona) // Controllo aggiuntivo per il primo firmatario
                                    {
                                        if ((Model.Atto.UIDPersonaProponente == Model.CurrentUser.UID_persona && Model.Atto.IDStato < (int)StatiAttoEnum.PRESENTATO)
                                            || (Model.CurrentUser.IsCapoGruppo && Model.CurrentUser.Gruppo.id_gruppo == atto.id_gruppo
                                                                               && Model.Atto.IDStato < (int)StatiAttoEnum.PRESENTATO)
                                            || (Model.CurrentUser.IsResponsabileSegreteriaPolitica && Model.CurrentUser.Gruppo.id_gruppo == atto.id_gruppo
                                                                                                   && Model.Atto.IDStato < (int)StatiAttoEnum.PRESENTATO)
                                            || (Model.CurrentUser.IsSegreteriaAssemblea && !atto.IsChiuso)) 
                                        {
                                            <i class="material-icons black-text arrow-up" style="margin-left: 5px;" onclick="CambioOrdineVisualizzazione(this, -1)">arrow_upward</i>
                                            <i class="material-icons black-text arrow-down" style="margin-left: 5px;" onclick="CambioOrdineVisualizzazione(this, 1)">arrow_downward</i>
                                        }
                                    }
								</div>
							}
						</li>
					}
				</ul>
			</div>
		</div>
	}



	@* INVITI *@
	@if (!string.IsNullOrEmpty(atto.Destinatari))
	{
		<div class="row">
			<div class="col s12">
				<h5>Invitati</h5>
				<hr />
				@Html.Raw(atto.Destinatari)
			</div>
		</div>
	}

	@* NOTE RISERVATE *@
	@if (!string.IsNullOrEmpty(atto.Note_Private) &&
		 (User.IsInRole(RuoliExt.Amministratore_PEM)
		  || User.IsInRole(RuoliExt.Segreteria_Assemblea)))
	{
		<div class="row">
			<div class="col s12 red-text">
				<p>
					<b>Nota riservata:</b>
					@Html.Raw(atto.Note_Private)
				</p>
			</div>
		</div>
	}
</div>
</div>
</div>
</div>

<div class="fixed-action-btn">
    @if (Model.CurrentUser.UID_persona == atto.UIDPersonaProponente)
    {
        <button type="button" role="button"
                class="btn-floating btn-large white black-text tooltipped"
           data-position="bottom"
           data-tooltip="Stampa"
           data-url="@Url.Action("Download", "DASI", new { id = atto.UIDAtto })"
           data-url-privacy="@Url.Action("DownloadWithPrivacy", "DASI", new { id = atto.UIDAtto })"
           onclick="StampaUOLA(this)"
           style="margin-right: 15px;">
            <i class="material-icons">print</i>
        </button>
    }
    else
    {
        <a
                class="btn-floating btn-large white black-text tooltipped"
           data-tooltip="Stampa"
           onclick="goIntoOtherTab('@Url.Action("DownloadWithPrivacy", "DASI", new { id = atto.UIDAtto })')"
           style="margin-right: 15px;">
            <i class="material-icons">print</i>
        </a>
    }
</div>

@Html.Partial("_InvitoPanel", atto)

@{
    Html.RenderPartial("_ProponiMozioneUrgenteModal");
    Html.RenderPartial("_ProponiMozioneAbbinataModal");
    Html.RenderPartial("_RichiestaIscrizioneASedutaModal", false);
}
<script>
    var sedute = [];
	var seduteMOZU = [];

    var templateSeduteAttive = "<li class='collection-item'><div><p><label><input name='gruppoSeduteAttive' type='radio' value='{VALUE}' {CHECKED}/><span>{TEXT}</span></label></p></div></li>";
    $(window).on("load",
        async function() {
            if (sedute.length == 0) {
                var data = await GetSeduteAttive();
                sedute = data.Results;
            }
			if (seduteMOZU.length == 0) {
				var data = await GetSeduteAttiveMOZU();
				seduteMOZU = data.Results;
			}
        });
        
        function SwitchVisualizzazionePriorita(){
			// #979, #988
			swal({
				title: "Informazioni ordinamento firme",
				text: "Eventuali spostamenti di firme in date diverse non verranno salvati alla chiusura dell'atto.",
				icon: "warning"
			})
            .then((value)=>{
                if (value){
					$('#pnlStandardFirme').hide(); 
                    $('#pnlPrioritaFirme').show();
                }
            });
        }

	$(document).ready(function () {
		aggiornaFrecceNavigazione();
	});

    function CambioOrdineVisualizzazione(ctrl, direction) {

    waiting(true);
    // Trova il contesto del firmatario corrente
    var listItem = $(ctrl).closest('li');
    var currentIndex = listItem.index();
    var newIndex = currentIndex + direction;

    // Ottieni la lista dei firmatari
    var list = listItem.parent();
    var listStandard = $("#pnlFirme");

	var uidPersona = listItem.data('uid-persona');
	var listItemStandard = listStandard.find('li[data-uid-persona="' + uidPersona + '"]');

    // Scambia gli elementi
    if (newIndex >= 0 && newIndex < list.children().length) {
        if (direction === -1) {
            listItem.insertBefore(listItem.prev());
			listItemStandard.insertBefore(listItemStandard.prev());
        } else if (direction === 1) {
            listItem.insertAfter(listItem.next());
			listItemStandard.insertAfter(listItemStandard.next());
        }

        // Aggiorna gli indici degli elementi nella lista
        list.children().each(function(index, element) {
            if (index != 0){
				$(element).attr('data-ordine', index);
            }
        });

		listStandard.children().each(function (index, element) {
			if (index != 0) {
				$(element).attr('data-ordine', index);
			}
		});

        // Prepara la lista aggiornata da inviare al server
        var updatedList = [];
        list.children().each(function(index, element) {
            var uidPersona = $(element).data('uid-persona');
            var uidAtto = $(element).data('uid-atto');
			updatedList.push({ UIDAtto: uidAtto, UID_persona: uidPersona, OrdineVisualizzazione: index });
        });

        // Invia la lista aggiornata al server
        var url = '@Url.Action("UpdateOrdineVisualizzazione", "DASI")';
        $.ajax({
            url: url,
            type: 'POST',
            data: JSON.stringify(updatedList),
            contentType: 'application/json; charset=utf-8',
            dataType: 'json',
            success: function(response) {
				waiting(false);
				if (response.message) {
					swal("Errore", "Si è verificato un errore durante l'aggiornamento dell'ordine di visualizzazione.", "error");
                } else {
					M.toast({ html: "<span>L'ordine di visualizzazione è stato aggiornato con successo.</span>", classes: 'rounded', displayLength: 10000 });
                }

				aggiornaFrecceNavigazione();
            },
            error: function(xhr, status, error) {
				waiting(false);
                console.error("Errore nella richiesta: " + status + ". Motivo: " + error);
                swal("Errore", "Si è verificato un errore durante l'aggiornamento dell'ordine di visualizzazione.", "error");
            }
        });
    }
}

	function aggiornaFrecceNavigazione() {
		var list = $('ul.collapsible.expandable');
		var maxIndex = list.children().length - 1;

		list.children().each(function (index, element) {
			var upArrow = $(element).find('.arrow-up');
			var downArrow = $(element).find('.arrow-down');

			if (index === 1) {
				upArrow.hide();
			} else {
				upArrow.show();
			}

			if (index === maxIndex) {
				downArrow.hide();
			} else {
				downArrow.show();
			}
		});
	}

    function CambiaPrioritaFirma(ctrl, uidAtto, uidPersona) {
        waiting(true);
        var body = {};
        body.UIDAtto = uidAtto;
        body.UID_persona = uidPersona;

		var listStandard = $("#pnlFirme");
		var listItemStandard = listStandard.find('li[data-uid-persona="' + uidPersona + '"]');

        var url = "@Url.Action("CambiaPrioritaFirma", "DASI")";
        $.ajax({
            url: url,
            type: "POST",
            data: JSON.stringify(body),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            beforeSend: function() {
                console.log("RICHIESTA INVIATA");
            },
            success: function(response, status, xhr) {
				waiting(false);
                if (response.message) {
                    swal({
                        title: "Azione non permessa",
                        text: response.message,
                        icon: "error"
                    });
                    return;
                }
                var elem = $(ctrl).find('i');
                if (elem.text() == "star") {
                    elem.text("star_border");
					$(ctrl).parent().find('span').removeClass("bold-text");

					$(listItemStandard).find('span').removeClass("bold-text");
                } else {
                    elem.text("star");
					$(ctrl).parent().find('span').addClass("bold-text");

					$(listItemStandard).find('span').addClass("bold-text");
                }
            },
            error: function(xhr, status, error) {
				waiting(false);
                console.error("Errore nella richiesta: " + status + ". Motivo: " + error);
            },
            complete: function() {
				waiting(false);
                console.log("OK");
            },
            cache: false,
            processData: false
        });
    }


    function DeclassaMozione(uidAtto, nome, tipo) {
        var nome_atto = nome;
    var azione = "l'urgenza";
    if (tipo == 2) {
        azione ="l'abbinamento";
    }
        swal("Verrà rimosso dall'atto " + nome_atto + " " + azione + ". Sei sicuro?",
            {
                buttons: {
                    cancel: "Annulla",
                    confirm: {
                        className: "red white-text",
                        title: "Rimuovi urgenza/abbinamento",
                        value: true
                    }
                }
            }).then((value) => {
            if (value == true) {
                var url = '@Url.Action("DeclassaMozione", "DASI")';
                var mozs = [];
                mozs.push(uidAtto);
                $.ajax({
                    url: url,
                    type: "POST",
                    data: JSON.stringify(mozs),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json"
                }).done(function(data) {
					if (data.message) {
						swal({
							title: "Errore",
							text: data.message,
							icon: "error"
						});
					}else
                    {
                        location.reload();
                    }

                }).fail(function(err) {
                    console.log("error", err);
                    Error(err);
                });
            }
        });
    }

	function RevealFirmaDepositoDASI(id, action) {

		var text = "";
		var button = "";
		if (action == 3) {
			text = "Inserisci il PIN per firmare";
			button = "Firma";
		} else if (action == 4) {
			text = "Inserisci il PIN per presentare";
			button = "Presenta";
		}

		swal(text,
			{
				content: {
					element: "input",
					attributes: { placeholder: "******", className: "password" }
				},
				icon: "info",
				buttons: { cancel: "Annulla", confirm: button }
			})
			.then((value) => {
				if (value == null || value == "")
					return;
				waiting(true);
				$.ajax({
					url: baseUrl + "/dasi/azioni?id=" + id + "&azione=" + action + "&pin=" + value,
					method: "GET"
				}).done(function (data) {
					console.log('qui', data);
					console.log('esito', data.message)
					if (data.message) {
						var typeMessage = "info";
						var message = data.message;
						var str = data.message;
						var pos = str.indexOf("OK");
						if (pos > 0) {
							typeMessage = "success";
						}
						pos = str.indexOf("?!?");
						if (pos > 0) {
							typeMessage = "info";
							message = "Proposta di firma inviata al proponente";
						}

						waiting(false);
						swal({
							title: "Esito " + button,
							text: message,
							icon: typeMessage,
							button: "OK"
						}).then(() => {
							if (data.message.includes("OK") || data.message.includes("?!?")) {
                                window.opener.postMessage("aggiornaPadre", "@AppSettingsConfiguration.URL_CLIENT");
								location.reload();
							}
						});
					}

					waiting(false);
				}).fail(function (err) {
					waiting(false);
					console.log("error", err);
					Error(err);
				});
			});
	}

	function ConfirmActionDASI(id, name, action) {

		$("#attoActionDisplayName").empty();
		$("#attoActionDisplayName").append(name);
		$("#attoActionMessage").empty();

		if (action == 1) {
			$("#btnConfermaActionDASI").text("ELIMINA");
			$("#attoActionMessage").append("Stai per eliminare l'atto selezionato. Sei sicuro?");
		} else if (action == 2) {
			$("#btnConfermaActionDASI").text("RITIRA");
			$("#attoActionMessage").append("Stai per ritirare l'atto selezionato. Sei sicuro?");
		}
		$("#btnConfermaActionDASI").on("click",
			function () {
				$.ajax({
					url: baseUrl + "/dasi/azioni?id=" + id + "&azione=" + action,
					method: "GET"
				}).done(function (data) {

					$("#modalActionDASI").modal("close");
					$("#btnConfermaActionDASI").off("click");

					if (data.message) {
						swal({
							title: "Errore",
							text: data.message,
							icon: "error"
						});
					} else {
                        window.opener.postMessage("aggiornaPadre", "@AppSettingsConfiguration.URL_CLIENT");
                        if (action == 1)
						    {
                                window.close();
                            }
					}
				}).fail(function (err) {
					console.log("error", err);
					Error(err);
				});
			});
		$("#modalActionDASI").modal("open");
	}

	function RitiraFirmaDASI(id) {
		swal("Inserisci il pin per ritirare la firma",
			{
				content: {
					element: "input",
					attributes: { placeholder: "******", className: "password" }
				},
				icon: "warning",
				buttons: { cancel: "Annulla", confirm: "Ritira" }
			})
			.then((value) => {
				if (value == null || value == "")
					return;
				$.ajax({
					url: baseUrl + "/dasi/ritiro-firma?id=" + id + "&pin=" + value,
					method: "GET"
				}).done(function (data) {
					var typeMessage = "error";
					var str = data.message;
					var pos = str.indexOf("OK");
					if (pos > 0) {
						typeMessage = "success";
					}
					pos = str.indexOf("INFO");
					if (pos > 0) {
						typeMessage = "info";
						data.message = data.message.replace("INFO: ", "");
					}
					swal({
						title: "Esito ritiro firma",
						text: data.message,
						icon: typeMessage,
						button: "OK"
					}).then(() => {
						location.reload();
                        window.opener.postMessage("aggiornaPadre", "@AppSettingsConfiguration.URL_CLIENT");
					});
				}).fail(function (err) {
					console.log("error", err);
					Error(err);
				});
			});
	}

	function EliminaFirmaDASI(id) {

		swal("Inserisci il pin per eliminare la firma",
			{
				content: {
					element: "input",
					attributes: { placeholder: "******", className: "password" }
				},
				icon: "warning",
				buttons: { cancel: "Annulla", confirm: "Elimina" }
			})
			.then((value) => {
				if (value == null || value == "")
					return;
				$.ajax({
					url: baseUrl + "/dasi/elimina-firma?id=" + id + "&pin=" + value,
					method: "GET"
				}).done(function (data) {
					if (data.message) {
						var typeMessage = "error";
						var str = data.message;
						var pos = str.indexOf("OK");
						if (pos > 0) {
							typeMessage = "success";
						}
						swal({
							title: "Esito ritiro firma",
							text: data.message,
							icon: typeMessage,
							button: "OK"
						}).then(() => {
							location.reload();
                            window.opener.postMessage("aggiornaPadre", "@AppSettingsConfiguration.URL_CLIENT");
						});
					} else {
						location.reload();
                        window.opener.postMessage("aggiornaPadre", "@AppSettingsConfiguration.URL_CLIENT");
					}
				}).fail(function (err) {
					console.log("error", err);
					Error(err);
				});
			});
	}
</script>

<div id="modalActionDASI" class="modal" style="height: unset !important">
    <div class="modal-content">
        <h5 id="attoActionDisplayName"></h5>
        <p id="attoActionMessage"></p>
        <div class="modal-footer" style="position: unset !important;">
            <button type="button" class="btn-flat modal-close grey-text">Annulla</button>
            <button type="button" role="button" id="btnConfermaActionDASI" class="btn-flat red-text" href="#">Elimina</button>
        </div>
    </div>
</div>

</body>
</html>