@using PortaleRegione.Client.Helpers
@using PortaleRegione.DTO.Domain
@using PortaleRegione.DTO.Enum
@using Utility = PortaleRegione.Common.Utility
@model PortaleRegione.DTO.Model.RiepilogoDASIModel

<div class="row">
    <div class="input-field col s12">
        <i class="material-icons prefix">search</i>
        <input type="text" id="autocomplete-input" class="autocomplete">
        <label for="autocomplete-input">Ricerca filtri disponibili</label>
    </div>
</div>
<div class="row">
    <div class="col l8 m12 s12 left-align">
        <div id="chips-container"></div>
        <br/>
        <div id="chips-container-groups"></div>
    </div>
    <div class="col l4 m12 s12 right-align">
        <a id="btnFiltroConfig" class="btn-flat blue-text">Salva filtro</a>
        <a id="btnReportConfig" class="btn-flat pink-text">Genera report</a>
        <div class="row">
            <div class="col s12">
                <div id="chips-container-selected-report"></div>
            </div>
        </div>
    </div>
</div>

<!-- Modal Structure -->
<script>
var availableFilterArray = [
	{ tag:"@Utility.GetDisplayName(typeof(AttoDASIDto), nameof(AttoDASIDto.Legislatura))", id: "@nameof(AttoDASIDto.Legislatura)"},
	{ tag:"@Utility.GetDisplayName(typeof(AttoDASIDto), nameof(AttoDASIDto.IDStato))", id: "@nameof(AttoDASIDto.IDStato)"},
	{ tag:"@Utility.GetDisplayName(typeof(AttoDASIDto), nameof(AttoDASIDto.Tipo))", id: "@nameof(AttoDASIDto.Tipo)"},
	{ tag:"@Utility.GetDisplayName(typeof(AttoDASIDto), nameof(AttoDASIDto.IDTipo_Risposta))", id: "@nameof(AttoDASIDto.IDTipo_Risposta)"},
	{ tag:"@Utility.GetDisplayName(typeof(AttoDASIDto), nameof(AttoDASIDto.NAtto))", id: "@nameof(AttoDASIDto.NAtto)"},
	{ tag:"@Utility.GetDisplayName(typeof(AttoDASIDto), nameof(AttoDASIDto.Timestamp))", id: "@nameof(AttoDASIDto.Timestamp)"},
	{ tag:"@Utility.GetDisplayName(typeof(AttoDASIDto), nameof(AttoDASIDto.UIDSeduta))", id: "@nameof(AttoDASIDto.UIDSeduta)"},
	{ tag:"@Utility.GetDisplayName(typeof(AttoDASIDto), nameof(AttoDASIDto.DataIscrizioneSeduta))", id: "@nameof(AttoDASIDto.DataIscrizioneSeduta)"},
	{ tag:"@Utility.GetDisplayName(typeof(AttoDASIDto), nameof(AttoDASIDto.UIDPersonaProponente))", id: "@nameof(AttoDASIDto.UIDPersonaProponente)"},
	{ tag:"@Utility.GetDisplayName(typeof(AttoDASIDto), nameof(AttoDASIDto.DataAnnunzio))", id: "@nameof(AttoDASIDto.DataAnnunzio)"},
	{ tag:"@Utility.GetDisplayName(typeof(AttoDASIDto), nameof(AttoDASIDto.TipoMOZ))", id: "@nameof(AttoDASIDto.TipoMOZ)"},
	{ tag:"Oggetto e Testo", id: "@nameof(AttoDASIDto.Oggetto)"},
];

var chipsKeys = {};

document.addEventListener('DOMContentLoaded', async function() {
	document.getElementById('loadingSpinner').style.display = 'none';

	ripristinaFiltri();
	await ripristinaPreferiti();
	await ripristinaReports();
	creaPannelloFiltriLaterale();
	creaPannelloReportLaterale();

    document.getElementById('addFiltersButton').addEventListener('click', function () {
		var key = document.getElementById('modal-filter-id-hidden').value;
		var keyLabel = document.getElementById('modal-content').textContent;
		var val, text, chipText;
		if (key === "@nameof(AttoDASIDto.NAtto)") {
            val = document.getElementById('n_atto').value;
            text = val;
            chipText = keyLabel + ": " + val;
        }else if (key === "@nameof(AttoDASIDto.Oggetto)") {
            val = document.getElementById('oggetto').value;
            text = val;
            chipText = keyLabel + ": " + val;
        }else if (key === "@nameof(AttoDASIDto.Timestamp)") {
			var data_da_str = document.getElementById('data_presentazione_da').value;
			var date_da_obj = new Date(data_da_str);
			var data_da_formatted_date = ('0' + date_da_obj.getDate()).slice(-2) + '/' + ('0' + (date_da_obj.getMonth() + 1)).slice(-2) + '/' + date_da_obj.getFullYear();
			val = data_da_formatted_date;
			text = data_da_formatted_date;
			if (document.getElementById('data_presentazione_a').value !== '') {
			    var data_a_str = document.getElementById('data_presentazione_a').value;
			    var date_a_obj = new Date(data_a_str);
			    var data_a_formatted_date = ('0' + date_a_obj.getDate()).slice(-2) + '/' + ('0' + (date_a_obj.getMonth() + 1)).slice(-2) + '/' + date_a_obj.getFullYear();
				val += "," + data_a_formatted_date;
				text = " dal " + data_da_formatted_date + " al " + data_a_formatted_date;

			}
            chipText = keyLabel + ": " + text;
        }else if (key === "@nameof(AttoDASIDto.UIDSeduta)") {
			var data_seduta_str = document.getElementById('data_seduta').value;
			var data_seduta_obj = new Date(data_seduta_str);
			var data_seduta_formatted_date = ('0' + data_seduta_obj.getDate()).slice(-2) + '/' + ('0' + (data_seduta_obj.getMonth() + 1)).slice(-2) + '/' + data_seduta_obj.getFullYear();
			val = data_seduta_formatted_date;
			text = data_seduta_formatted_date;
            chipText = keyLabel + ": " + text;
        }else if (key === "@nameof(AttoDASIDto.DataIscrizioneSeduta)") {
			var data_iscrizione_seduta_str = document.getElementById('data_iscrizione_seduta').value;
			var data_iscrizione_seduta_obj = new Date(data_iscrizione_seduta_str);
			var data_iscrizione_seduta_formatted_date = ('0' + data_iscrizione_seduta_obj.getDate()).slice(-2) + '/' + ('0' + (data_iscrizione_seduta_obj.getMonth() + 1)).slice(-2) + '/' + data_iscrizione_seduta_obj.getFullYear();
			val = data_iscrizione_seduta_formatted_date;
			text = data_iscrizione_seduta_formatted_date;
            chipText = keyLabel + ": " + text;
        }else if (key === "@nameof(AttoDASIDto.UIDPersonaProponente)") {
			text = "";
			val = "";
			var existingChips = document.querySelectorAll(`.chip[data-proponente-uid]`);
			existingChips.forEach(function (item, index){
				var chipInnerText = Array.from(item.childNodes)
					.filter(node => node.nodeType === Node.TEXT_NODE)
					.map(node => node.textContent.trim())
					.join('');
				if (index > 0) {
					text += ", ";
					val += ",";
				}
				text += chipInnerText;
				val += item.getAttribute('data-proponente-uid');
			});
            chipText = keyLabel + ": " + text;
        } else {
            // Per altri filtri che usano una select
            var selectedOption = document.querySelector('#dynamic-select-container select');
            val = selectedOption.options[selectedOption.selectedIndex].value;
            text = selectedOption.options[selectedOption.selectedIndex].text;
            chipText = keyLabel + ": " + text;
        }

	    addChipIfNotExists(key, keyLabel, val, text, chipText, true);
		resetSelezionePreferiti();
	    // Chiudi la modal
	    $('#infoModal').modal("close");
    });

    var elems = document.querySelectorAll('#autocomplete-input');
    var instances = M.Autocomplete.init(elems, {
        data: availableFilterArray,
	    onAutocomplete: async function (txt, key) {
		    // Mostra i dettagli dell'elemento selezionato nella modal
		    await openModalWithContent(key, txt, false, 0);
	    }
    });

    document.getElementById('autocomplete-input').addEventListener('keydown', function (event) {
	    if (event.key === 'Enter') {
		    event.preventDefault(); // Previene l'invio del form, se necessario

		    // Ottieni l'elenco dei suggerimenti dell'autocompletamento
		    var autocompleteList = document.querySelectorAll('.autocomplete-content.dropdown-content li');
		    if (autocompleteList.length > 0 && !autocompleteList[0].classList.contains('disabled')) {
			    // Simula un click sul primo suggerimento visibile
			    autocompleteList[0].click();
		    }
	    }
    });
});

async function inviaDatiChips(page, size) {
	if (!page){
		page = 1;
	}
	if (!size){
		size = 20;
	}
	document.getElementById('tableResults').innerHTML = "";
	document.getElementById('paginazione-container-top').innerHTML = "";
	document.getElementById('paginazione-container-bottom').innerHTML = "";
	document.getElementById('loadingSpinner').style.display = 'block';

	var request = {};
	var chipsData = [];
	document.querySelectorAll('#chips-container .chip').forEach(function (chip) {
		chipsData.push({
			property: chip.getAttribute('data-filterby'),
			value: chip.getAttribute('data-val')
		});
	});

	try {
		request.filters = chipsData;
		request.page = page;
		request.size = size;

		// Invia la richiesta al server
		const response = await fetch('@Url.Action("Riepilogo")', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify(request),
		});

		if (!response.ok) {
			throw new Error('Network response was not ok');
		}

		const responseData = await response.json();
		if (responseData.message){
			ErrorAlert(responseData.message);
			return;
		}

		if (responseData.Data && responseData.Data.Results && responseData.Data.Results.length > 0) {
			CreaTabella(responseData);
		} else {
			if (chipsData.length == 0){
				document.getElementById('tableResults').innerHTML = `<div class="card-panel blue lighten-5 center">
<span class="center">
    <p>Esegui una ricerca per poter visualizzare gli atti</p>
</span>
</div>`;
			}else{
				// Se non ci sono risultati, mostra il messaggio
				document.getElementById('tableResults').innerHTML = `<div class="card-panel panel-warning center">
<span class="center">
     <p>Nessun atto trovato</p>
</span>
</div>`;
			}
		}
		creaPaginazione(responseData);
		AggiornaContatori(responseData);
		document.getElementById('loadingSpinner').style.display = 'none';
	} catch (error) {
		document.getElementById('loadingSpinner').style.display = 'none';
		console.error('Errore durante l\'invio dei dati delle chips:', error);
	}
}

function CreaTabella(responseData) {
	// Pulisci i risultati precedenti
	const tableResults = document.getElementById('tableResults');
	tableResults.innerHTML = '';

	// Crea la struttura della tabella
	const table = document.createElement('table');
	table.className = 'highlight';

	// Crea l'intestazione della tabella
	const thead = document.createElement('thead');
	thead.innerHTML = `
        <tr>
            <th></th>
			<th>Atto</th>
            <th>Tipo</th>
            <th>Oggetto</th>
            <th>Firmatari</th>
            <th>Stato</th>
            <th>Seduta</th>
            <th></th>
        </tr>
    `;
	table.appendChild(thead);

	// Crea il corpo della tabella e popolalo con i dati
	const tbody = document.createElement('tbody');
	responseData.Data.Results.forEach(result => {
		var htmlFirme = ``;
		if (result.Firmato_Dal_Proponente == false) {
			htmlFirme = `<span class="grey-text tooltipped" data-tooltip="Il Proponente non ha ancora firmato">${result.PersonaProponente.DisplayName} (${result.gruppi_politici.codice_gruppo})</span>`;
		} else {
			htmlFirme = `<b>${result.PersonaProponente.DisplayName} (${result.gruppi_politici.codice_gruppo})</b>`;
		}

		if (result.ConteggioFirme > 1) {
			htmlFirme += `<br/><a class='chip tooltipped blue white-text' data-position='left' data-tooltip='${result.Firme}' style="min-width: unset;">
+ ${result.ConteggioFirme - 1} <i class='icon material-icons right hide-on-med-and-down' style="margin-left: unset">group</i>
</a>`
		}

		const row = document.createElement('tr');
		row.innerHTML = `
            <td style="width: 1%;">
				<p>
                    <label>
                        <input type="checkbox" id="chk_Atto_${result.UIDAtto}" onclick="AbilitaComandiMassivi_DASI('${result.UIDAtto}');"/>
                        <span></span>
                    </label>
                </p>
            </td>
			<td style="width: 10%;"><div class="chip chip-centered hoverable badge${result.DisplayTipo}" onclick="goIntoOtherTab('@Html.Raw(AppSettingsConfiguration.URL_CLIENT)/dasi/${result.UIDAtto}')">${result.Display}</div></td>
            <td>${result.DisplayTipoRispostaRichiesta}</td>
            <td>${result.Oggetto}</td>
            <td>${htmlFirme}</td>
            <td>${result.DisplayStato}</td>
            <td></td>
            <td style="width: 10%;" class="center">
			     <a class="blue-text tooltipped" style="margin: 2px" data-tooltip="Vai alla banca dati in internet" onclick="goToGeasi('${result.DisplayTipo}', ${result.NAtto}, ${result.Legislatura})">
                     <i class="icon material-icons">remove_red_eye</i>
                 </a>
                 <a class="black-text tooltipped" style="margin: 2px" data-tooltip="Stampa" data-url="@Url.Action("Download", "DASI")?id=${result.UIDAtto}"
                    data-url-privacy="@Url.Action("DownloadWithPrivacy", "DASI")?id=${result.UIDAtto}" onclick="StampaUOLA(this)">
                     <i class="material-icons">print</i>
                 </a>
                 <a class="black-text tooltipped" data-tooltip="Modifica Metadati" onclick="openMetaDatiDASI('${result.UIDAtto}')">
                     <i class="icon material-icons">edit</i>
                 </a>
			</td>
        `;
		tbody.appendChild(row);
	});
	table.appendChild(tbody);

	// Aggiungi la tabella al container dei risultati
	tableResults.appendChild(table);

	//reset tooltips
	var elems = document.querySelectorAll('.tooltipped');
	var instances = M.Tooltip.init(elems, {});
}

function creaPaginazione(data) {
    if (!data.Data || !data.Data.Results || data.Data.Results.length == 0) {
	    document.getElementById('paginazione-container-top').innerHTML = "";
	    document.getElementById('paginazione-container-bottom').innerHTML = "";
	    return;
    }
    // Dati della paginazione ottenuti dalla risposta JSON
    var totalePagine = data.Data.Paging.Last_Page;
    var paginaCorrente = data.Data.Paging.Page;
    var totaleRisultati = data.Data.Paging.Total;
    var risultatiPerPagina = data.Data.Paging.Limit; // Aggiunto per gestire i tagli di paginazione

    // Elemento HTML per la paginazione
    var paginationHTML = `<ul class="pagination">`;
    // Aggiungi controlli di navigazione se necessario
    if (data.Data.Paging.Has_Prev) {
	    paginationHTML += `
            <li class="waves-effect" style="margin-top: -4px;">
            <a onclick="filterByPage(1)">
            <i class="material-icons tooltipped" data-position="top" data-tooltip="Prima pagina">
                first_page
            </i>
            </a>
            </li>
            <li class="waves-effect" style="margin-top: -4px;">
            <a onclick="filterByPage(${paginaCorrente - 1})">
            <i class="material-icons tooltipped" data-position="top" data-tooltip="Pagina precedente">
                chevron_left
            </i>
            </a>
            </li>`;
    }

    // Aggiungi informazioni sulla pagina corrente e il totale delle pagine
    paginationHTML += `
    <li class="waves-effect">
    <span class="badge tooltipped" data-tooltip="Seleziona pagina" data-position="top" onclick="ShowHidePaginationTabs()">
        Pagina ${paginaCorrente} di ${totalePagine}
    </span>
    </li>
    <li class="waves-effect">
    <span>
        ${totaleRisultati} risultati
    </span>
    </li>`;

    // Aggiungi controlli di navigazione se necessario
    if (data.Data.Paging.Has_Next) {
	    paginationHTML += `
            <li class="waves-effect" style="margin-top: -4px;">
                <a onclick="filterByPage(${paginaCorrente + 1})">
                    <i class="material-icons tooltipped" data-position="top" data-tooltip="Prossima pagina">
                        chevron_right
                    </i>
                </a>
            </li>
            <li class="waves-effect" style="margin-top: -4px;">
                <a onclick="filterByPage(${totalePagine})">
                    <i class="material-icons tooltipped" data-position="top" data-tooltip="Ultima pagina">
                        last_page
                    </i>
                </a>
            </li>`;
    }

    paginationHTML += `</ul>`;

    // Costruzione del selettore per i tagli di paginazione
    var tagliPaginazione = [20, 50, 100, 250]; // Definisci i tagli di paginazione disponibili
    var dropdownHTML_top = `<div class="chip deep-purple lighten-5 center" style="min-width: unset">
        Paginazione
        <a class="dropdown-trigger chip grey white-text" href="#" data-target="ddlPaginazione-top" style="font-size: small; margin-right: -12px; min-width: unset">${risultatiPerPagina}</a>
        <ul id="ddlPaginazione-top" class="dropdown-content" style="width: 100px !important">`;
    var dropdownHTML_bottom = `<div class="chip deep-purple lighten-5 center" style="min-width: unset">
        Paginazione
        <a class="dropdown-trigger chip grey white-text" href="#" data-target="ddlPaginazione-bottom" style="font-size: small; margin-right: -12px; min-width: unset">${risultatiPerPagina}</a>
        <ul id="ddlPaginazione-bottom" class="dropdown-content" style="width: 100px !important">`;

    tagliPaginazione.forEach(function (limite) {
	    dropdownHTML_top += `<li><a onclick="filterBySize(1, ${limite})">${limite}</a></li>`;
	    dropdownHTML_bottom += `<li><a onclick="filterBySize(1, ${limite})">${limite}</a></li>`;
    });

    dropdownHTML_top += `</ul></div>`;
    dropdownHTML_bottom += `</ul></div>`;

    var hiddenHTML = `<input id="hdPaginaCorrente" type="hidden" value="${paginaCorrente}"/><input id="hdPaginazioneCorrente" type="hidden" value="${risultatiPerPagina}"/>`;

    // Inserisci l'HTML nel DOM
    document.getElementById('paginazione-container-top').innerHTML = paginationHTML + dropdownHTML_top;
    document.getElementById('paginazione-container-bottom').innerHTML = paginationHTML + dropdownHTML_bottom + hiddenHTML;

    // Inizializza il dropdown con Materialize
	var elems = document.querySelectorAll('.dropdown-trigger.chip.grey.white-text');
	console.log("elems:", elems);
	var instances = M.Dropdown.init(elems, { constrainWidth: false });
}

function AggiornaContatori(responseData) {
	aggiornaConteggi('li.collection-item div', "TOTALE", responseData.CountBarData.TUTTI);
	aggiornaConteggi('li.collection-item div', "ITL", responseData.CountBarData.ITL);
	aggiornaConteggi('li.collection-item div', "ITR", responseData.CountBarData.ITR);
	aggiornaConteggi('li.collection-item div', "IQT", responseData.CountBarData.IQT);
	aggiornaConteggi('li.collection-item div', "MOZ", responseData.CountBarData.MOZ);
	aggiornaConteggi('li.collection-item div', "ODG", responseData.CountBarData.ODG);

	if (!responseData.CurrentUser.IsSegreteriaAssemblea) {
		aggiornaConteggi('li.collection-item div', "BOZZE", responseData.CountBarData.BOZZE);
	}
	aggiornaConteggi('li.collection-item div', "PRESENTATI", responseData.CountBarData.PRESENTATI);
	aggiornaConteggi('li.collection-item div', "IN TRATTAZIONE", responseData.CountBarData.IN_TRATTAZIONE);
	aggiornaConteggi('li.collection-item div', "CHIUSO", responseData.CountBarData.CHIUSO);
}

function aggiornaConteggi(selector, testo, valore) {
	document.querySelectorAll(selector).forEach(function (element) {
		if (element.textContent.includes(testo)) {
			element.querySelector('span').textContent = valore;
		}
	});
}

async function openModalWithContent(key, txt, isEditing, currentValue){

	waiting(true);

    document.getElementById('autocomplete-input').value = "";
    document.getElementById('modal-content').textContent = txt;
    document.getElementById('modal-filter-id-hidden').value = key;
    var selectHTML = '';
    switch (key) {
	    case '@nameof(AttoDASIDto.Legislatura)':
			var legislature = await GetLegislature();
			selectHTML = '<select id="legislature-select">';
			legislature.forEach(function (item) {
				var selected = isEditing && currentValue > 0 && item.id_legislatura == currentValue ? 'selected' : '';
				selectHTML += `<option value="${item.id_legislatura}" ${selected}>${item.num_legislatura}</option>`;
			});
			selectHTML += '</select>';
			document.getElementById('dynamic-select-container').innerHTML = selectHTML;
			M.FormSelect.init(document.querySelectorAll('select'));
		    break;
	    case '@nameof(AttoDASIDto.IDStato)':
			var stati = await GetStatiDASI();
			selectHTML = '<select id="stati-select">';
			stati.forEach(function (item) {
				if (item.IDStato != 0) {
					var selected = isEditing && currentValue > 0 && item.IDStato == currentValue ? 'selected' : '';
					selectHTML += `<option value="${item.IDStato}" ${selected}>${item.Stato}</option>`;
				}
			});
			selectHTML += '</select>';
			document.getElementById('dynamic-select-container').innerHTML = selectHTML;
			M.FormSelect.init(document.querySelectorAll('select'));
		    break;
	    case '@nameof(AttoDASIDto.Tipo)':
			var tipi = await GetTipiDASI();
			selectHTML = '<select id="tipi-select">';
			tipi.forEach(function (item) {
				if (item.IDTipoAtto != 0) {
					var selected = isEditing && currentValue > 0 && item.IDTipoAtto == currentValue ? 'selected' : '';
					selectHTML += `<option value="${item.IDTipoAtto}" ${selected}>${item.Tipo_Atto}</option>`;
				}
			});
			selectHTML += '</select>';
			document.getElementById('dynamic-select-container').innerHTML = selectHTML;
			M.FormSelect.init(document.querySelectorAll('select'));
		    break;
		case '@nameof(AttoDASIDto.IDTipo_Risposta)':
			var tipiRisposta = [
			    { id: @((int)TipoRispostaEnum.ORALE), text: '@(Utility.GetText_TipoRispostaDASI((int)TipoRispostaEnum.ORALE))'},
			    { id: @((int)TipoRispostaEnum.SCRITTA), text: '@(Utility.GetText_TipoRispostaDASI((int)TipoRispostaEnum.SCRITTA))'},
			    { id: @((int)TipoRispostaEnum.COMMISSIONE), text: '@(Utility.GetText_TipoRispostaDASI((int)TipoRispostaEnum.COMMISSIONE))'},
			];

			selectHTML = '<select id="tipi-risposta-select">';
			tipiRisposta.forEach(function (item) {
				if (item.id != 0) {
					var selected = isEditing && currentValue > 0 && item.id == currentValue ? 'selected' : '';
					selectHTML += `<option value="${item.id}" ${selected}>${item.text}</option>`;
				}
			});
			selectHTML += '</select>';
			document.getElementById('dynamic-select-container').innerHTML = selectHTML;
			M.FormSelect.init(document.querySelectorAll('select'));
		    break;
		case '@nameof(AttoDASIDto.NAtto)':
            var currentValueFormatted = isEditing && currentValue ? `value="${currentValue}"` : '';
            selectHTML = `<div class="input-field col s12">
                <input id="n_atto" type="text" ${currentValueFormatted} placeholder="Es. 100, 150-200">
                <div class="card blue lighten-5">
                    <div class="card-content black-text">
                        <span class="card-title">Informazioni</span>
                        <p>È possibile filtrare nei seguenti modi:
                        <ul style="padding-left:40px">
                            <li style="list-style-type: disc;">Singolo numero: 100</li>
                            <li style="list-style-type: disc;">Intervallo: 150-200</li>
                        </ul>
                        </p>
                    </div>
                </div>
            </div>`;
			document.getElementById('dynamic-select-container').innerHTML = selectHTML;
            break;
		case '@nameof(AttoDASIDto.Oggetto)':
            var currentValueFormatted = isEditing && currentValue ? `value="${currentValue}"` : '';
            selectHTML = `<div class="input-field col s12">
                <input id="oggetto" type="text" ${currentValueFormatted}/>
            </div>`;
			document.getElementById('dynamic-select-container').innerHTML = selectHTML;
            break;
		case '@nameof(AttoDASIDto.Timestamp)':

			var dateValues = handleDateValue(currentValue);
			var currentValueFormatted1 = dateValues.date1 ? `value="${dateValues.date1}"` : '';
			var currentValueFormatted2 = dateValues.date2 ? `value="${dateValues.date2}"` : '';

			selectHTML = `<div class="input-field col s12">
      <input id="data_presentazione_da" type="date" ${currentValueFormatted1}/>
  </div>
  <div class="input-field col s12">
      <input id="data_presentazione_a" type="date" ${currentValueFormatted2}/>
  </div>`;
			document.getElementById('dynamic-select-container').innerHTML = selectHTML;
            break;
		case '@nameof(AttoDASIDto.UIDSeduta)':

			var dateValues = handleDateValue(currentValue);
			var currentValueFormatted1 = dateValues.date1 ? `value="${dateValues.date1}"` : '';

			selectHTML = `<div class="input-field col s12">
      <input id="data_seduta" type="date" ${currentValueFormatted1}/>
  </div>`;
			document.getElementById('dynamic-select-container').innerHTML = selectHTML;
            break;
		case '@nameof(AttoDASIDto.DataIscrizioneSeduta)':

			var dateValues = handleDateValue(currentValue);
			var currentValueFormatted1 = dateValues.date1 ? `value="${dateValues.date1}"` : '';

			selectHTML = `<div class="input-field col s12">
      <input id="data_iscrizione_seduta" type="date" ${currentValueFormatted1}/>
  </div>`;
			document.getElementById('dynamic-select-container').innerHTML = selectHTML;
            break;
		case '@nameof(AttoDASIDto.UIDPersonaProponente)':
			var persone = await GetProponenti();
			selectHTML = `<div class="input-field col s12">
				            <i class="material-icons prefix">search</i>
					        <input type="text" id="proponenti-autocomplete" class="autocomplete">

							<div id="proponenti-selected"></div>
					     </div>`;

			document.getElementById('dynamic-select-container').innerHTML = selectHTML;
			var data = [];
			persone.forEach(function (item) {
				data.push({
					tag: `${item.DisplayName}`,
					id: `${item.uid}`
				});
			});
			var elems = document.querySelectorAll('#proponenti-autocomplete');
			var instances = M.Autocomplete.init(elems, {
				data: data,
				limit: 20,
				minLength: 2,
				onAutocomplete: function (txt, key) {

					var existingChip = document.querySelector(`.chip[data-proponente-uid="${key}"]`);
					if (!existingChip) {
					    var chipsContainerProponenti = document.getElementById('proponenti-selected');
					    var newChip = document.createElement('div');
						newChip.setAttribute('data-proponente-uid', key);
					    newChip.classList.add('chip');
					    newChip.textContent = txt;

					    var closeIcon = document.createElement('i');
					    closeIcon.classList.add('close', 'material-icons');
					    closeIcon.style.setProperty('top', 'unset', 'important');
					    closeIcon.textContent = 'close';
					    closeIcon.onclick = function () {
						    newChip.remove();
					    };
					    newChip.appendChild(closeIcon);

					    chipsContainerProponenti.appendChild(newChip);
					}

					document.getElementById('proponenti-autocomplete').value = "";
				}
			});

			if (isEditing){
				var currentValueArray = currentValue.split(',');
				var chipsContainerProponenti = document.getElementById('proponenti-selected');
				currentValueArray.forEach(function (guid) {
					var item = data.find(item => item.id === guid);
					if (item) {
						var newChip = document.createElement('div');
						newChip.setAttribute('data-proponente-uid', item.id);
						newChip.classList.add('chip');
						newChip.textContent = item.tag;

						var closeIcon = document.createElement('i');
						closeIcon.classList.add('close', 'material-icons');
						closeIcon.style.setProperty('top', 'unset', 'important');
						closeIcon.textContent = 'close';
						closeIcon.onclick = function () {
							newChip.remove();
						};
						newChip.appendChild(closeIcon);

						chipsContainerProponenti.appendChild(newChip);
					}
				});
			}
            break;
		case '@nameof(AttoDASIDto.TipoMOZ)':
	        var tipiMozione = [
	            { id: @((int)TipoMOZEnum.URGENTE), text: '@(Utility.GetText_TipoMOZDettaglioDASI((int)TipoMOZEnum.URGENTE))'},
	            { id: @((int)TipoMOZEnum.ABBINATA), text: '@(Utility.GetText_TipoMOZDettaglioDASI((int)TipoMOZEnum.ABBINATA))'},
	            { id: @((int)TipoMOZEnum.CENSURA), text: '@(Utility.GetText_TipoMOZDettaglioDASI((int)TipoMOZEnum.CENSURA))'},
	            { id: @((int)TipoMOZEnum.SFIDUCIA), text: '@(Utility.GetText_TipoMOZDettaglioDASI((int)TipoMOZEnum.SFIDUCIA))'},
	        ];

	        selectHTML = '<select id="tipi-mozione-select">';
			tipiMozione.forEach(function (item) {
		        if (item.id != 0) {
			        var selected = isEditing && currentValue > 0 && item.id == currentValue ? 'selected' : '';
			        selectHTML += `<option value="${item.id}" ${selected}>${item.text}</option>`;
		        }
	        });
	        selectHTML += '</select>';
	        document.getElementById('dynamic-select-container').innerHTML = selectHTML;
	        M.FormSelect.init(document.querySelectorAll('select'));
            break;
	    default:
		    console.log("Filtro non riconosciuto!");
		    break;
    }

    // Apri la modal
	waiting(false);
    $('#infoModal').modal("open");
}

function addChipIfNotExists(key, keyLabel, val, label, chipText, refresh) {

	var existingChip = document.querySelector(`.chip[data-filterby="${key}"]`);

	if (!existingChip) {
	    // La chiave non esiste, quindi aggiungi la chip
	    var chipsContainer = document.getElementById('chips-container');
	    var newChip = document.createElement('div');
	    newChip.setAttribute('data-val', val);
	    newChip.setAttribute('data-label', label);
	    newChip.setAttribute('data-filterby', key);
	    newChip.setAttribute('data-filterby-label', keyLabel);
	    newChip.classList.add('chip');
	    newChip.textContent = chipText;

		addIconsToChip(newChip, key, keyLabel, val);
	    chipsContainer.appendChild(newChip);

	    // Aggiorna l'elenco delle chiavi tracciate
	    chipsKeys[key] = true;
    } else {
		existingChip.setAttribute('data-val', val);
		existingChip.setAttribute('data-label', label);
		existingChip.setAttribute('data-filterby', key);
		existingChip.setAttribute('data-filterby-label', keyLabel);
		existingChip.textContent = chipText;
		addIconsToChip(existingChip, key, keyLabel, val);
    }

	salvaFiltri();

	if (refresh) {
		inviaDatiChips($("#hdPaginaCorrente").val(), $("#hdPaginazioneCorrente").val());
	}
}

function addIconsToChip(chip, key, keyLabel, val) {
	// Aggiungi un'icona per modificare la chip, se desiderato
	var editIcon = document.createElement('i');
	editIcon.classList.add('material-icons', 'tiny');
	editIcon.style.setProperty('margin-left', '10px');
	editIcon.style.setProperty('top', '2px');
	editIcon.textContent = 'edit';
	editIcon.onclick = async function (event) {
		event.stopPropagation();
		await openModalWithContent(key, keyLabel, true, val);
	};
	chip.appendChild(editIcon);

	// Aggiungi un'icona per rimuovere la chip
	var closeIcon = document.createElement('i');
	closeIcon.classList.add('close', 'material-icons');
	closeIcon.style.setProperty('top', 'unset', 'important');
	closeIcon.textContent = 'close';
	closeIcon.onclick = function () {
		delete chipsKeys[key]; // Rimuovi la chiave dall'elenco tracciato quando la chip è rimossa
		chip.remove();
		resetSelezionePreferiti();
		salvaFiltri();
		inviaDatiChips($("#hdPaginaCorrente").val(), $("#hdPaginazioneCorrente").val());
	};
	chip.appendChild(closeIcon);
}

function salvaFiltri() {
	const filtri = [];
	document.querySelectorAll('#chips-container .chip').forEach(function (chip) {
		const key = chip.getAttribute('data-filterby');
		const keyLabel = chip.getAttribute('data-filterby-label');
		const val = chip.getAttribute('data-val');
		const label = chip.getAttribute('data-label');
		// Rimuovi gli elementi icona dal testo della chip prima di salvarlo
		const chipTextContent = chip.cloneNode(true); // Clona il nodo della chip
		chipTextContent.querySelectorAll('.material-icons').forEach(icon => icon.remove()); // Rimuovi le icone
		const chipText = chipTextContent.textContent.trim(); // Ottieni il testo pulito

		filtri.push({
			key: key,
			keyLabel: keyLabel,
			val: val,
			label: label,
			chipText: chipText
		});
	});
	localStorage.setItem('filtriDasi', JSON.stringify(filtri));
}

function ripristinaFiltri(){
	const filtri = JSON.parse(localStorage.getItem('filtriDasi'));
	if (filtri) {
		filtri.forEach(function (filtro) {
			addChipIfNotExists(filtro.key, filtro.keyLabel, filtro.val, filtro.label, filtro.chipText, false);
		});
		inviaDatiChips(1, 20);
	}
}

function filterByPage(page){
    inviaDatiChips(page, $("#hdPaginazioneCorrente").val());
	window.scrollTo({ top: 0, behavior: 'smooth' });
}

function filterBySize(page, size){
    inviaDatiChips(page, size);
	window.scrollTo({ top: 0, behavior: 'smooth' });
}
</script>


@{
    Html.RenderPartial("Filtri/_DettaglioFiltroModal", Model);
    Html.RenderPartial("Filtri/_FiltroConfigModal", Model);
    Html.RenderPartial("Filtri/_ReportConfigModal", Model);
}