<div id="modalReportConfig" class="modal">
    <div class="modal-content">
        <h4>Report</h4>
        <div id="chips-container-report-config">

        </div>

        <div class="row">
            <div class="input-field col s12">
                <input placeholder="Placeholder" id="report_name" type="text" class="validate">
                <label for="report_name">Nome report</label>
            </div>
        </div>
        <div class="row">
            <div class="input-field col s6">
                <select name="coverType">
                    <option value="" disabled selected>Scegli la copertina</option>
                    <option value="1">Copertina 1</option>
                    <option value="2">Copertina 2</option>
                    <option value="3">Copertina 3</option>
                </select>
                <label>Copertina</label>
            </div>
            <div class="input-field col s6">
                <select name="dataViewType">
                    <option value="1" selected>GRIGLIA</option>
                    <option value="2">CARD</option>
                </select>
                <label>Visualizzazione dati</label>
            </div>
        </div>
        <div class="row">
            <div class="input-field col s6">
                <select name="columns" multiple>
                    <option value="" disabled selected>Scegli colonne</option>
                    <option value="1">Colonna 1</option>
                    <option value="2">Colonna 2</option>
                    <option value="3">Colonna 3</option>
                </select>
                <label>Colonne da visualizzare</label>
            </div>
            <div class="input-field col s6">
                <select name="exportFormat">
                    <option value="1" selected>WORD</option>
                    <option value="2">PDF</option>
                </select>
                <label>Formato esportazione</label>
            </div>
        </div>
    </div>
    <div class="modal-footer">
        <a id="btnSalvaReport" class="btn blue-text waves-effect waves-green btn-flat">Salva report</a>
        <a class="btn orange-text waves-effect waves-green btn-flat">Estrai testi (ZIP)</a>
        <a id="btnGenerateReport" class="btn pink-text waves-effect waves-green btn-flat">Genera report</a>
    </div>
</div>

<script>
	var reportsArray = [];
	document.getElementById('btnReportConfig').addEventListener('click', function () {
		openModalWithContent_Report("", localStorage.getItem('filtriDasi'));
	});

	document.getElementById('btnSalvaReport').addEventListener('click', function () {
		var request = {};
		var filtri = JSON.parse(localStorage.getItem('filtriDasi'));
		var filtriList = [];
		$.each(filtri, function (index, item) {
			filtriList.push({
				property: item.key,
				value: item.val
			});
		});
		request.filters = JSON.stringify(filtriList);
		request.reportName = document.getElementById('report_name').value;
		request.coverType = document.querySelector('select[name="coverType"]').value;
		request.dataViewType = document.querySelector('select[name="dataViewType"]').value;
		request.columns = JSON.stringify(Array.from(document.querySelector('select[name="columns"]').selectedOptions).map(option => option.value));
		request.exportFormat = document.querySelector('select[name="exportFormat"]').value;

        var url = '@Url.Action("SalvaReport", "DASI")';

		$.ajax({
			url: url,
			type: "POST",
			data: JSON.stringify(request),
			contentType: "application/json; charset=utf-8",
			success: function (response) {
				M.toast({
					html: `<span><b class="yellow-text">${document.getElementById('report_name').value}</b> salvato con successo</span>`, classes: 'rounded', displayLength: 5000
				});
				creaPannelloReportLaterale();
			},
			error: function (xhr, status, error) {
				console.error("Errore nella richiesta: " + status + ". Motivo: " + error);
			}
		});
	});

	document.getElementById('btnGenerateReport').addEventListener('click', function () {
		var request = {};
		var filtri = JSON.parse(localStorage.getItem('filtriDasi'));
        var filtriList = [];
        $.each(filtri, function(index, item){
			filtriList.push({
				property: item.key,
				value: item.val
			});
        });
		request.filters = JSON.stringify(filtriList);
		request.reportName = document.getElementById('report_name').value;
		request.coverType = document.querySelector('select[name="coverType"]').value;
		request.dataViewType = document.querySelector('select[name="dataViewType"]').value;
		request.columns = Array.from(document.querySelector('select[name="columns"]').selectedOptions).map(option => option.value);
		request.exportFormat = document.querySelector('select[name="exportFormat"]').value;

        var url = '@Url.Action("GeneraReport", "DASI")';

        $.ajax({
            url: url,
            type: "POST",
            data: JSON.stringify(request),
            contentType: "application/json; charset=utf-8",
            beforeSend: function() {
                console.log("RICHIESTA INVIATA");
                waiting(true, "Elaborazione in corso...");
            },
            success: function (response) {
                console.log("Risposta ricevuta", response);
                var a = document.createElement("a");
                a.href = response;
				a.target = '_blank';
                document.body.appendChild(a);
                a.click();
                a.remove();
                $('#modalReportConfig').modal("close");
            },
            error: function(xhr, status, error) {
                console.error("Errore nella richiesta: " + status + ". Motivo: " + error);
                waiting(false);
            },
            complete: function() {
                console.log("Chiamata completata");
                waiting(false);
            }
        });

		$('#modalReportConfig').modal("close");
	});

	function openModalWithContent_Report(name, filters) {
		$('#report_name').val(name);
		$('#chips-container-report-config').empty();
		const filtri = JSON.parse(filters);
		if (filtri) {
			filtri.forEach(function (filtro) {
				addChipReportConfig(filtro.chipText);
			});
		}
		$('#modalReportConfig').modal("open");
	}

	function addChipReportConfig(chipText) {
		var chipsContainer = document.getElementById('chips-container-report-config');
		var newChip = document.createElement('div');
		newChip.classList.add('chip', 'yellow', 'black-text');
		newChip.textContent = chipText;

		chipsContainer.appendChild(newChip);
	}
    
	async function ripristinaReports() {
		var reports = await GetReportsDASI();
		console.log(reports)
		reportsArray = [];
		$.each(reports, function (index, item) {
			reportsArray.push(item);
		});
	}

    function creaPannelloReportLaterale() {
    var collection = document.getElementById('data-collection-report');
    $('#data-collection-report').empty();
    reportsArray.forEach(function (item) {
        var li = document.createElement('li');
        li.textContent = item.reportname;

        var addIcon = document.createElement('i');
	    addIcon.className = 'material-icons secondary-content';
	    addIcon.textContent = 'add_circle';

	    addIcon.onclick = function (event) {
            event.stopPropagation();

			resetSelezionePreferiti();
			localStorage.setItem('filtriDasi', item.filters);
			chipsKeys = [];
			$('#chips-container').empty();
			ripristinaFiltri();
        };

        li.appendChild(addIcon);

	    var deleteIcon = document.createElement('i');
	    deleteIcon.className = 'material-icons secondary-content';
	    deleteIcon.style.marginRight = '10px';
	    deleteIcon.textContent = 'delete';
	    deleteIcon.classList.add('red-text');
	    deleteIcon.onclick = async function (event) {
		    event.stopPropagation();
		    swal(`Sei sicuro di voler eliminare il gruppo di filtri "${item.reportname}"?`, {
			    buttons: ["No", "Si"],
		    }).then(async (value) => {
			    if (value == true){
				    try {
					    var deleteUrl = '@Url.Action("EliminaGruppoFiltri", "DASI")';
					    deleteUrl = `${deleteUrl}?nomeFiltro=${encodeURIComponent(item.name)}`;
					    let response = await fetch(deleteUrl, {
                            method: 'GET',
                            headers: {
                                'Content-Type': 'application/json',
                            }
                        });
                        if (!response.ok) {
                            throw new Error('Network response was not ok');
                        }

                        let data = await response.json();
                        if(data.message){
                            ErrorAlert(data.message);
                            return;
                        }

					    M.toast({
						    html: `<span><b class="yellow-text">${item.name}</b> eliminato con successo</span>`, classes: 'rounded', displayLength: 5000 });

					    li.remove();
					    var indexToRemove = filtriPreferitiArray.findIndex(el => el.name === item.name);

					    if (indexToRemove !== -1) {
						    filtriPreferitiArray.splice(indexToRemove, 1);
					    }
					    $(`[data-nome-gruppo-filtri="${item.name}"]`).remove();
				    } catch (error) {
					    console.error('Errore di fetch:', error);
					    ErrorAlert(error.message);
				    }
			    }
		    });
	    };
	    li.appendChild(deleteIcon);
        collection.appendChild(li);
    });
}

</script>