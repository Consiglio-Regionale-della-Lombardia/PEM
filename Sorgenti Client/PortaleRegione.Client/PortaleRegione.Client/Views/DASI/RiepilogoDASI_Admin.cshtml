@using PortaleRegione.Client.Helpers
@using PortaleRegione.DTO.Domain
@using PortaleRegione.DTO.Enum
@model PortaleRegione.DTO.Model.RiepilogoDASIModel

@{
	ViewBag.Title = "DASI";

	var classTabPresentati = "";
	var classTabInTrattazione = "";
	var classTabChiuso = "";
	switch (Model.Stato)
	{
		case StatiAttoEnum.PRESENTATO:
			classTabPresentati = "active";
			break;
		case StatiAttoEnum.IN_TRATTAZIONE:
			classTabInTrattazione = "active";
			break;
		case StatiAttoEnum.CHIUSO:
			classTabChiuso = "active";
			break;
	}
	var url = Url.Action("Index", "Home");

	if (Model.ClientMode == ClientModeEnum.TRATTAZIONE)
	{
		var uidSeduta = Model.Data.Filters.First(item => item.PropertyId == nameof(AttoDASIDto.UIDSeduta)).Value;
		url = Url.Action("Index", "AttiTrattazione", new { id = uidSeduta });
	}

	var filtri_attivi = Request.Url.AbsolutePath.Contains("filtra");
	var textTitoloRicerca = filtri_attivi ? " - Ricerca" : string.Empty;
}

<div class="row" style="margin-bottom: unset!important">
	<div class="col s12">
		<a class="btn-floating waves-effect waves-light grey header-back" href="@url">
			<i class="material-icons">arrow_back</i>
		</a>
		<div class="row valign-wrapper">
			<div class="col s12">
				@if (Model.ClientMode == ClientModeEnum.GRUPPI)
				{
					<h4>
						<b>Riepilogo atti di indirizzo e di sindacato ispettivo @textTitoloRicerca</b>
					</h4>
				}
				else
				{
					var tipo = Convert.ToInt16(Model.Tipo);
					<h4>
						<div class="chip @Utility.GetCSS_TipoDASI(tipo)" style="min-width: unset !important;">
							@PortaleRegione.Common.Utility.GetText_Tipo(tipo)
						</div>
						<b> - Riepilogo atti di indirizzo e di sindacato ispettivo  @textTitoloRicerca</b>
					</h4>
				}
			</div>
		</div>
	</div>
</div>
<hr />
@if (Model.ClientMode == ClientModeEnum.GRUPPI)
{
	@*<div class="row">
		<div class="s12">
			@foreach (var ctx in Model.Data.Filters)
			{
				<div class="chip">
					@ctx.Label:
					<i class="close material-icons">close</i>
				</div>
			}
		</div>
	</div>*@
    <div class="row">
        <div class="input-field col s12">
            <i class="material-icons prefix">textsms</i>
            <input type="text" id="autocomplete-input" class="autocomplete">
            <label for="autocomplete-input">Prova Autocompletamento</label>
        </div>
    </div>
    <div class="row">
        <div class="col l8 m7 s12 left-align">
            <div id="chips-container">
            </div>
        </div>
        <div class="col l4 m5 s12 center">
			<a id="esportaReportButton" class="btn-flat green-text">Esporta Report</a>
        </div>
    </div>

    <!-- Modal Structure -->
    <div id="infoModal" class="modal">
        <div class="modal-content">
            <h4>Dettaglio ricerca</h4>
            <h5 id="modal-content"></h5>
            <input id="modal-filter-id-hidden" type="hidden"/>
            <div id="dynamic-select-container"></div>
        </div>
        <div class="modal-footer">
            <a href="#!" class="modal-close waves-effect waves-green btn-flat">Chiudi</a>
            <a id="addFiltersButton" class="btn blue">Aggiungi</a>
        </div>
    </div>

    <script>
document.addEventListener('DOMContentLoaded', function() {
	var chipsKeys = {};

	document.getElementById('addFiltersButton').addEventListener('click', function () {
		var selectedOption = document.querySelector('#dynamic-select-container select');
		var val = selectedOption.options[selectedOption.selectedIndex].value;
		var text = selectedOption.options[selectedOption.selectedIndex].text;
		var chipText = document.getElementById('modal-content').textContent + ": " + text;
		
		addChipIfNotExists(document.getElementById('modal-filter-id-hidden').value, document.getElementById('modal-content').textContent, val, text, chipText);

		// Chiudi la modal
		$('#infoModal').modal("close");
	});

	var elems = document.querySelectorAll('#autocomplete-input');
    var instances = M.Autocomplete.init(elems, {
        data: [
            {tag:"@PortaleRegione.Common.Utility.GetDisplayName(typeof(AttoDASIDto), nameof(AttoDASIDto.Legislatura))", id: "1"},
            {tag:"@PortaleRegione.Common.Utility.GetDisplayName(typeof(AttoDASIDto), nameof(AttoDASIDto.IDStato))", id: "2"},
            {tag:"@PortaleRegione.Common.Utility.GetDisplayName(typeof(AttoDASIDto), nameof(AttoDASIDto.Tipo))", id: "3"}
        ],
		onAutocomplete: function (txt, key) {
			// Mostra i dettagli dell'elemento selezionato nella modal
			openModalWithContent(key, txt);
		}
    });
	
	document.getElementById('autocomplete-input').addEventListener('keydown', function (event) {
		if (event.key === 'Enter') {
			event.preventDefault(); // Previene l'invio del form, se necessario

			// Ottieni l'elenco dei suggerimenti dell'autocompletamento
			var autocompleteList = document.querySelectorAll('.autocomplete-content.dropdown-content li');
			if (autocompleteList.length > 0 && !autocompleteList[0].classList.contains('disabled')) {
				// Simula un click sul primo suggerimento visibile
				autocompleteList[0].click();
			}
		}
	});
	
	function openModalWithContent(key, txt){
		document.getElementById('autocomplete-input').value = "";
		document.getElementById('modal-content').textContent = txt;
		document.getElementById('modal-filter-id-hidden').value = key;
		var selectHTML = '';
		switch (key) {
			case '1':
				selectHTML = '<select><option value="soldi">Soldi</option><option value="fama">Fama</option><option value="ricchezza">Ricchezza</option></select>';
				break;
			case '2':
				selectHTML = '<select><option value="presente">Presente</option><option value="passato">Passato</option><option value="futuro">Futuro</option></select>';
				break;
			case '3':
				selectHTML = '<select><option value="ferro">Ferro</option><option value="bronzo">Bronzo</option><option value="acciaio">Acciaio</option></select>';
				break;
			default:
				console.log("Filtro non riconosciuto!");
				break;
		}
		document.getElementById('dynamic-select-container').innerHTML = selectHTML;
		M.FormSelect.init(document.querySelectorAll('select'));

		// Apri la modal
		$('#infoModal').modal("open");
	}
	
	function addChipIfNotExists(key, keyLabel, val, label, chipText) {
		// Verifica se la chiave è già stata utilizzata
		if (!chipsKeys[key]) {
			// La chiave non esiste, quindi aggiungi la chip
			var chipsContainer = document.getElementById('chips-container');
			var newChip = document.createElement('div');
			newChip.setAttribute('data-val', val);
			newChip.setAttribute('data-label', label);
			newChip.setAttribute('data-filterby', key);
			newChip.setAttribute('data-filterby-label', keyLabel);
			newChip.classList.add('chip');
			newChip.textContent = chipText;

			//// Aggiungi un'icona per modificare la chip, se desiderato
			//var editIcon = document.createElement('a');
			//editIcon.classList.add('btn','red');
			//editIcon.textContent = 'MODIFICA';
			//editIcon.onclick = function () {
			//	openModalWithContent(key, keyLabel);
			//};
			//newChip.appendChild(editIcon);
			
			// Aggiungi un'icona per rimuovere la chip, se desiderato
			var closeIcon = document.createElement('i');
			closeIcon.style.setProperty('top', 'unset', 'important');
			closeIcon.classList.add('close', 'material-icons');
			closeIcon.textContent = 'close';
			closeIcon.onclick = function () {
				delete chipsKeys[key]; // Rimuovi la chiave dall'elenco tracciato quando la chip è rimossa
				newChip.remove();
			};
			newChip.appendChild(closeIcon);

			chipsContainer.appendChild(newChip);

			// Aggiorna l'elenco delle chiavi tracciate
			chipsKeys[key] = true;
		} else {
			// La chiave esiste già, quindi non aggiungere una nuova chip
			console.log("Una chip con questa chiave è già stata aggiunta.");
		}
	}
});

		
</script>
}

<div id="contentTable" class="row">
    <div class="col s12">
		@{
			if (Model.ViewMode == ViewModeEnum.GRID)
			{
				Html.RenderPartial("_GridView_RiepilogoDASI_Admin", Model);
			}
			else
			{
				Html.RenderPartial("_ZoomView_RiepilogoDASI", Model);
			}
		}
	</div>
</div>

@{
	Html.RenderPartial("_IscriviASedutaModal");
	Html.RenderPartial("_PannelloRicerche", Model);
	Html.RenderPartial("_ComandiDASI_Admin");
	Html.RenderPartial("_MetaDatiPanelPartial", Model);
	Html.RenderPartial("_GeasiViewPartial");
	Html.RenderPartial("_StampaModal");
	Html.RenderPartial("_CartaceoPanelPartial", Model);

	Html.RenderPartial("_ScriptRiepilogoDASI", Model);
}

