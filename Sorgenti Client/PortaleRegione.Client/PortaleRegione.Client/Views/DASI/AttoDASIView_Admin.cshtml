@using PortaleRegione.Client.Helpers
@using PortaleRegione.DTO.Domain
@using PortaleRegione.DTO.Enum
@model PortaleRegione.DTO.Model.DASIFormModel

@{
    Layout = null;
    var atto = Model.Atto;
    ViewBag.Title = $"{atto.Display} - {atto.GetLegislatura()}";

    if (string.IsNullOrEmpty(Model.Atto.DCRL))
    {
        Model.Atto.DCRL = Model.Atto.GetLegislatura();
    }

    var cssClass = Utility.GetCSS_TipoDASI(atto.Tipo);
}
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <title>@ViewBag.Title</title>
    <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0/css/materialize.min.css">

    @Styles.Render("~/Content/css")
    @*Import Trumbowyg plugins style...*@
    <link href="~/Content/editor/plugins/table/ui/trumbowyg.table.min.css" rel="stylesheet"/>

    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
    @Scripts.Render("~/bundles/lib")
    @Scripts.Render("~/bundles/logic")
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>
    <script src="~/Scripts/moment.js"></script>
</head>
<body>
	<script>
		$(document).ready(function () {
			$('#btnSearch').hide();
		});
	</script>

	<style>
		.collection-header-custom {
			background-color: #f5f5f5 !important;
			font-weight: bold;
		}
	</style>

	<div id="waiting" class="modal" style="height: 120px">
		<div class="modal-content center">
			<div class="preloader-wrapper active">
				<div class="spinner-layer spinner-blue-only">
					<div class="circle-clipper left">
						<div class="circle"></div>
					</div>
					<div class="gap-patch">
						<div class="circle"></div>
					</div>
					<div class="circle-clipper right">
						<div class="circle"></div>
					</div>
				</div>
			</div>

			<div id="waiting_info_message"></div>
		</div>
	</div>


	<div class="row" style="left: 10px; margin-bottom: unset !important; position: absolute; top: 12px;">
		<div class="col s12">
			<a class="btn-floating waves-effect waves-light grey header-back" onclick="window.close()">
				<i class="material-icons">close</i>
			</a>

		</div>
	</div>
	<div class="row" style="margin-bottom: unset !important; position: absolute; right: 10px; top: 25px;">
		<div class="col s12">
			<div class="chip @Utility.GetCSS_StatoDASI(atto.IDStato) white-text" style="min-width: unset;">@PortaleRegione.Common.Utility.GetText_StatoDASI(atto.IDStato)</div>
		</div>
	</div>
	
        <div class="row valign-wrapper">
            <div class="col s12 center">
                <h4>
                    @if (atto.Tipo != (int)TipoAttoEnum.RIS)
                    {
                        <b>@atto.gruppi_politici.nome_gruppo</b>
                    }
                    else
                    {
                        <b>&nbsp;</b>
                    }
                </h4>
            </div>
        </div>
    
		<div class="row">
			<div class="col s12">
				<ul class="collapsible expandable">
					<li class="active">
						<div class="collapsible-header collection-header-custom @cssClass"><i class="material-icons">cloud_queue</i>Testo atto - @Html.Raw($"{atto.Display} ({atto.GetLegislatura()})")</div>
						<div class="collapsible-body">
							<div class="row">
								<div class="col s12 center bodyEMClass">
									@Html.Raw(atto.BodyAtto)
								</div>
							</div>
							<div class="row" id="pnlStandardFirme">
								<div class="col s12">
									@if (atto.Tipo == (int)TipoAttoEnum.IQT
										 || atto.Tipo == (int)TipoAttoEnum.MOZ)
									{
										if ((atto.FirmeAnte.Any()
											 && Model.Atto.UIDPersonaProponente == Model.CurrentUser.UID_persona)
											|| (Model.CurrentUser.IsResponsabileSegreteriaPolitica && Model.CurrentUser.Gruppo.id_gruppo == atto.id_gruppo
												&& Model.Atto.IDStato < (int)StatiAttoEnum.PRESENTATO)
											|| Model.CurrentUser.IsSegreteriaAssemblea)
										{
											<a class="btn-flat pink-text" onclick="$('#pnlStandardFirme').hide();$('#pnlPrioritaFirme').show();">
												Visualizza priorita
												<i class="material-icons right pink-text">low_priority</i>
											</a>
											<br />
										}
									}

									@Html.Raw(atto.Firme)

									@if (!string.IsNullOrEmpty(atto.DataPresentazione))
									{
										var testoDeposito = "Atto presentato";

										<label class="black-text">
											<b>@testoDeposito il @Html.Raw(atto.DataPresentazione)</b>
										</label>
									}

									@if (!string.IsNullOrEmpty(atto.Firme_dopo_deposito))
									{
										@Html.Raw(atto.Firme_dopo_deposito)
									}
								</div>
							</div>
							@if (atto.Tipo == (int)TipoAttoEnum.IQT
								 || atto.Tipo == (int)TipoAttoEnum.MOZ)
							{
								if (Model.Atto.UIDPersonaProponente == Model.CurrentUser.UID_persona
									|| Model.CurrentUser.IsSegreteriaAssemblea
									|| (Model.CurrentUser.IsResponsabileSegreteriaPolitica && Model.CurrentUser.Gruppo.id_gruppo == atto.id_gruppo))
								{
									@* FIRME PRIORITA' *@
									<div class="row" id="pnlPrioritaFirme" style="display: none;">
										<div class="col s12">
											<a class="btn-flat pink-text" onclick="$('#pnlPrioritaFirme').hide();$('#pnlStandardFirme').show();">
												Visualizza griglia
												<i class="material-icons right pink-text">grid_on</i>
											</a>
											<br />

											<ul class="collapsible expandable">
												@{
													var firmeGroup = new List<AttiFirmeDto>();
													firmeGroup.AddRange(atto.FirmeAnte);
													firmeGroup.AddRange(atto.FirmePost);
												}
												@foreach (var firme in firmeGroup)
												{
													<li>
														@if (firme.Prioritario)
														{
															<div class="collapsible-header valign-wrapper">
																@if (atto.UIDPersonaProponente != firme.UID_persona)
																{
																	<a class="btn-floating white secondary-content tooltipped" data-tooltip="Aggiungi/rimuovi priorità firmatario"
																	   onclick="CambiaPrioritaFirma(this, '@firme.UIDAtto', '@firme.UID_persona');">
																		<i class="material-icons black-text" style="margin-left: 5px;">star</i>
																	</a>
																}
																@firme.FirmaCert

															</div>
														}
														else
														{
															<div class="collapsible-header valign-wrapper">
																@if (string.IsNullOrEmpty(firme.Data_ritirofirma))
																{
																	<a class="btn-floating white secondary-content tooltipped" data-tooltip="Aggiungi/rimuovi priorità firmatario"
																	   onclick="CambiaPrioritaFirma(this, '@firme.UIDAtto', '@firme.UID_persona');">
																		<i class="material-icons" style="margin-left: 5px;">star_border</i>
																	</a>
																	@firme.FirmaCert
																}
																else
																{
																	<del>@firme.FirmaCert</del>
																}
															</div>
														}
													</li>
												}
											</ul>

										</div>
									</div>
								}
							}
						</div>
					</li>
					<li>
						<div class="collapsible-header collection-header-custom @cssClass"><i class="material-icons">info</i>Informazioni generali</div>
						<div class="collapsible-body">
							<div class="row">
								<div class="input-field col s12 m12 l6">
									<select id="Atto_Stato">
										<option value="@Html.Raw((int)StatiAttoEnum.PRESENTATO)" @Html.Raw(Model.Atto.IDStato == (int)StatiAttoEnum.PRESENTATO ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_StatoDASI((int)StatiAttoEnum.PRESENTATO)</option>
										<option value="@Html.Raw((int)StatiAttoEnum.IN_TRATTAZIONE)" @Html.Raw(Model.Atto.IDStato == (int)StatiAttoEnum.IN_TRATTAZIONE ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_StatoDASI((int)StatiAttoEnum.IN_TRATTAZIONE)</option>
										<option value="@Html.Raw((int)StatiAttoEnum.COMPLETATO)" @Html.Raw(Model.Atto.IDStato == (int)StatiAttoEnum.COMPLETATO ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_StatoDASI((int)StatiAttoEnum.COMPLETATO)</option>
									</select>
									<label for="Atto_Stato">Stato</label>
								</div>
								<div class="input-field col s12 m12 l6">
									@Html.TextBoxFor(s => s.Atto.DataAnnunzio, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
									@Html.LabelFor(s => s.Atto.DataAnnunzio, new { @class = "active" })
								</div>
							</div>
							<div class="row">
								<div class="input-field col s12">
									@Html.TextBoxFor(model => model.Atto.Oggetto, new { @class = "form-control" })
									@Html.LabelFor(s => s.Atto.Oggetto)
								</div>
							</div>
							<div class="row">
								<div class="input-field col s12 m12 l6">
									@Html.TextBoxFor(model => model.Atto.Protocollo, new { @class = "form-control" })
									@Html.LabelFor(s => s.Atto.Protocollo)
								</div>
								<div class="input-field col s12 m12 l6">
									@Html.TextBoxFor(model => model.Atto.CodiceMateria, new { @class = "form-control" })
									@Html.LabelFor(s => s.Atto.CodiceMateria)
								</div>
							</div>
							<div class="row">
								<div class="input-field col s12 m12 l6">
									<select id="Atto_AreaPolitica">
										<option value="@Html.Raw((int)AreaPoliticaIntEnum.Minoranza)" @Html.Raw(Model.Atto.AreaPolitica == (int)AreaPoliticaIntEnum.Minoranza ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_AreaPolitica((int)AreaPoliticaIntEnum.Minoranza)</option>
										<option value="@Html.Raw((int)AreaPoliticaIntEnum.Maggioranza)" @Html.Raw(Model.Atto.AreaPolitica == (int)AreaPoliticaIntEnum.Maggioranza ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_AreaPolitica((int)AreaPoliticaIntEnum.Maggioranza)</option>
										<option value="@Html.Raw((int)AreaPoliticaIntEnum.Misto)" @Html.Raw(Model.Atto.AreaPolitica == (int)AreaPoliticaIntEnum.Misto ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_AreaPolitica((int)AreaPoliticaIntEnum.Misto)</option>
										<option value="@Html.Raw((int)AreaPoliticaIntEnum.Misto_Minoranza)" @Html.Raw(Model.Atto.AreaPolitica == (int)AreaPoliticaIntEnum.Misto_Minoranza ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_AreaPolitica((int)AreaPoliticaIntEnum.Misto_Minoranza)</option>
										<option value="@Html.Raw((int)AreaPoliticaIntEnum.Misto_Maggioranza)" @Html.Raw(Model.Atto.AreaPolitica == (int)AreaPoliticaIntEnum.Misto_Maggioranza ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_AreaPolitica((int)AreaPoliticaIntEnum.Misto_Maggioranza)</option>
									</select>
									<label for="Atto_AreaPolitica">Area politica</label>
								</div>
								<div class="input-field col s12 m12 l6">
									<select id="Atto_RispostaRichiesta">
										<option value="@Html.Raw((int)TipoRispostaEnum.ORALE)" @Html.Raw(Model.Atto.IDTipo_Risposta == (int)TipoRispostaEnum.ORALE ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_TipoRispostaDASI((int)TipoRispostaEnum.ORALE)</option>
										<option value="@Html.Raw((int)TipoRispostaEnum.SCRITTA)" @Html.Raw(Model.Atto.IDTipo_Risposta == (int)TipoRispostaEnum.SCRITTA ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_TipoRispostaDASI((int)TipoRispostaEnum.SCRITTA)</option>
										<option value="@Html.Raw((int)TipoRispostaEnum.COMMISSIONE)" @Html.Raw(Model.Atto.IDTipo_Risposta == (int)TipoRispostaEnum.COMMISSIONE ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_TipoRispostaDASI((int)TipoRispostaEnum.COMMISSIONE)</option>
									</select>
									<label for="Atto_RispostaRichiesta">Risposta richiesta</label>
								</div>
							</div>
							<div class="row">
								<div class="input-field col s12 m12 l6">
									<p>
										<label>
											<input type="checkbox" value="true" name="Atto.Pubblicato" @Html.Raw(Model.Atto.Pubblicato ? "checked=\"checked\"" : "") />
											<span>Pubblicato</span>
										</label>
									</p>
								</div>
								<div class="input-field col s12 m12 l6">
									<p>
										<label>
											<input type="checkbox" name="Atto.Sollecito" value="true" @Html.Raw(Model.Atto.Sollecito ? "checked=\"checked\"" : "") />
											<span>Sollecito</span>
										</label>
									</p>
								</div>
							</div>
							<div class="row">
								<div class="col s12">
									<a id="btnSalva_InformazioniGenerali" class="btn blue-text waves-effect waves-green btn-flat" style="width: 100%">Salva</a>
								</div>
							</div>
							<div class="row">
								<div class="col s12">
									<a id="btnAggiungiDocumento_InformazioniGenerali" class="btn pink-text waves-effect waves-green btn-flat" style="width: 100%">Aggiungi documento</a>
								</div>
							</div>
							<div class="row">
								<div class="input-field col s12">
									@if (atto.Documenti.Any())
									{
										if (atto.Documenti.Any(d => d.TipoEnum == TipoDocumentoEnum.AGGIUNTIVO))
										{
											<h6>
												<b>Documenti aggiuntivi</b>
											</h6>
											<hr />
											<table>
												<thead>
													<tr>
														<td>Tipo</td>
														<td>Documento</td>
														<td>Scarica</td>
														<td></td>
													</tr>
												</thead>
												<tbody>
													@foreach (var doc in atto.Documenti.Where(d => d.TipoEnum == TipoDocumentoEnum.AGGIUNTIVO))
													{
														<tr>
															<td>@doc.Tipo</td>
															<td>@doc.Titolo</td>
															<td>
																<a href="@doc.Link" target="_blank">
																	<i class="material-icons icon">link</i>
																</a>
															</td>
															<td>
																<a href="#!" class="red-text" onclick='rimuoviDocumento(this, "@doc.Titolo", "@doc.Uid")'>
																	<i class="material-icons">close</i>
																</a>
															</td>
														</tr>
													}
												</tbody>
											</table>
										}
									}
								</div>
							</div>
						</div>
					</li>
					<li>
						<div class="collapsible-header collection-header-custom @cssClass">
							<i class="material-icons">insert_link</i>Abbinamenti
							@if (atto.Abbinamenti.Any())
							{
								<div class="chip" style="left: 190px; margin-top: -4px; position: absolute;">@atto.Abbinamenti.Count</div>
							}
						</div>
						<div class="collapsible-body">
							<div class="row">
								<div class="col s12">
									<a id="btnAggiungiAbbinamento" class="btn blue-text waves-effect waves-green btn-flat" style="width: 100%">Aggiungi abbinamento</a>
								</div>
							</div>
							<div class="row">
								<div class="input-field col s12 m12 l12">

									<h6>
										<b>Lista abbinamenti</b>
									</h6>
									<hr />
									<ul id="lstAbbinamentiAtto" class="collection">
										@foreach (var abb in atto.Abbinamenti)
										{
											<li class="collection-item">
												@abb.TipoAttoAbbinato @abb.NumeroAttoAbbinato
												@if (!string.IsNullOrEmpty(abb.OggettoAttoAbbinato))
												{
													@Html.Raw($", con oggetto: {abb.OggettoAttoAbbinato}")
												}

												<a href="#!" class="secondary-content red-text" onclick="rimuoviAbbinamento(this,'@abb.UidAttoAbbinato')">
													<i class="material-icons">close</i>
												</a>
											</li>
										}
									</ul>

									@if (!atto.Abbinamenti.Any())
									{
										<div id="empty-abbinamenti" class="card-panel panel-warning center">
											<span class="center">
												<p>Nessun abbinamento</p>
											</span>
										</div>
									}
								</div>
							</div>
						</div>
					</li>
					<li>
						<div class="collapsible-header collection-header-custom @cssClass">
							<i class="material-icons">event_note</i>Trattazione
							@if (atto.Risposte.Any())
							{
								<div style="left: 160px; position: absolute;">
									<i class="material-icons icon right green-text">check_circle</i>
								</div>
							}
							else
							{
								<div class="tooltipped" style="left: 160px; position: absolute;" data-tooltip="Nessuna risposta">
									<i class="material-icons icon right red-text">remove_circle</i>
								</div>
							}
						</div>
						<div class="collapsible-body">
							<div class="row">
								<div class="col s12">
									<a id="btnAggiungiRisposta" class="btn blue-text waves-effect waves-green btn-flat" style="width: 100%">Aggiungi risposta</a>
								</div>
							</div>
							<h6>
								<b>Risposte fornite</b>
							</h6>
							<hr />
							<table id="tableRisposte">
								<thead>
									<tr>
										<th>Tipo risposta fornita</th>
										<th>Data risposta</th>
										<th>Tipo organo</th>
										<th>Organo</th>
										<th>Data trasmissione</th>
										<th>Data trattazione</th>
										<th></th>
									</tr>
								</thead>

								<tbody>
									@foreach (var risposta in atto.Risposte)
									{
										<tr>
											<td>@Html.Raw(risposta.DisplayTipo)</td>
											<td>@Html.Raw(risposta.Data.HasValue ? risposta.Data.Value.ToString("dd/MM/yyyy") : "")</td>
											<td>@Html.Raw(risposta.DisplayTipoOrgano)</td>
											<td>@Html.Raw(risposta.DescrizioneOrgano)</td>
											<td>@Html.Raw(risposta.DataTrasmissione.HasValue ? risposta.DataTrasmissione.Value.ToString("dd/MM/yyyy") : "")</td>
											<td>@Html.Raw(risposta.DataTrattazione.HasValue ? risposta.DataTrattazione.Value.ToString("dd/MM/yyyy") : "")</td>
											<td>
												<a onclick="modificaDettagliRisposta(this, @risposta.IdOrgano)">
													<i class="material-icons">edit</i>
												</a>
												<a href="#!" class="red-text" onclick="rimuoviRisposta(this, @risposta.IdOrgano)">
													<i class="material-icons">close</i>
												</a>
											</td>
										</tr>
									}
								</tbody>
							</table>

							@if (!atto.Risposte.Any())
							{
								<div id="empty-risposte" class="card-panel panel-warning center">
									<span class="center">
										<p>Nessuna risposta</p>
									</span>
								</div>
							}

							<div class="row">
								<div class="col s12">
									<a id="btnAggiungiDocumento_Risposta" class="btn pink-text waves-effect waves-green btn-flat" style="width: 100%">Aggiungi documento</a>
								</div>
							</div>

							@if (atto.Documenti.Any())
							{
								if (atto.Documenti.Any(d => d.TipoEnum == TipoDocumentoEnum.RISPOSTA))
								{
									<h6>
										<b>Documenti risposte</b>
									</h6>
									<hr />
									<table>
										<thead>
											<tr>
												<td>Tipo</td>
												<td>Documento</td>
												<td>Scarica</td>
												<td></td>
											</tr>
										</thead>
										<tbody>
											@foreach (var doc in atto.Documenti.Where(d => d.TipoEnum == TipoDocumentoEnum.RISPOSTA))
											{
												<tr>
													<td>@doc.Tipo</td>
													<td>@doc.Titolo</td>
													<td>
														<a href="@doc.Link" target="_blank">
															<i class="material-icons icon">link</i>
														</a>
													</td>
													<td>
														<a href="#!" class="red-text" onclick='rimuoviDocumento(this, "@doc.Titolo", "@doc.Uid")'>
															<i class="material-icons">close</i>
														</a>
													</td>
												</tr>
											}
										</tbody>
									</table>
								}
							}
						</div>
					</li>

					@{
						var monitoraggio_visibile = atto.Tipo == (int)TipoAttoEnum.MOZ
													|| atto.Tipo == (int)TipoAttoEnum.IQT
													|| atto.Tipo == (int)TipoAttoEnum.ODG
													|| atto.Tipo == (int)TipoAttoEnum.RIS;
					}

					<li style="@Html.Raw(monitoraggio_visibile ? "display: block;" : "display: none;")">
						<div class="collapsible-header collection-header-custom @cssClass">
							<i class="material-icons">network_check</i>Monitoraggio
							@if (atto.Monitoraggi.Any())
							{
								<div class="chip" style="left: 195px; margin-top: -4px; position: absolute;">@atto.Monitoraggi.Count</div>
							}
						</div>
						<div class="collapsible-body">
							<div class="row">
								<div class="input-field col s12 m12 l6">
									@Html.TextBoxFor(model => model.Atto.AreaTematica, new { @class = "form-control" })
									@Html.LabelFor(s => s.Atto.AreaTematica)
								</div>
								<div class="input-field col s12 m12 l6">
									@Html.TextBoxFor(model => model.Atto.AltriSoggetti, new { @class = "form-control" })
									@Html.LabelFor(s => s.Atto.AltriSoggetti)
								</div>
							</div>
							<div class="row">
								<div class="col s12">
									<a id="btnSalva_InformazioniAggiuntiveMonitoraggio" class="btn blue-text waves-effect waves-green btn-flat" style="width: 100%">Salva informazioni monitoraggio</a>
								</div>
							</div>
							<div class="row">
								<div class="col s12">
									<a id="btnAggiungiMonitoraggio" class="btn blue-text waves-effect waves-green btn-flat" style="width: 100%">Aggiungi monitoraggio</a>
								</div>
							</div>
							<div class="row">
								<div class="input-field col s12">

									<table id="tableMonitoraggio">
										<thead>
											<tr>
												<th>Tipo organo monitorato</th>
												<th>Organo monitorato</th>
												<th></th>
											</tr>
										</thead>

										<tbody>
											@foreach (var monitoraggio in atto.Monitoraggi)
											{
												<tr>
													<td>@Html.Raw(monitoraggio.DisplayTipoOrgano)</td>
													<td>@Html.Raw(monitoraggio.DescrizioneOrgano)</td>
													<td>
														<a href="#!" class="red-text" onclick="rimuoviMonitoraggio(this, @monitoraggio.IdOrgano)">
															<i class="material-icons">close</i>
														</a>
													</td>
												</tr>
											}
										</tbody>
									</table>

									@if (!atto.Monitoraggi.Any())
									{
										<div id="empty-monitoraggio" class="card-panel panel-warning center">
											<span class="center">
												<p>Nessuna monitoraggio</p>
											</span>
										</div>
									}

									<div class="row">
										<div class="col s12">
											<a id="btnAggiungiDocumento_Monitoraggio" class="btn pink-text waves-effect waves-green btn-flat" style="width: 100%">Aggiungi documento</a>
										</div>
									</div>

									@if (atto.Documenti.Any())
									{
										if (atto.Documenti.Any(d => d.TipoEnum == TipoDocumentoEnum.MONITORAGGIO))
										{
											<h6>
												<b>Documenti monitoraggio</b>
											</h6>
											<hr />
											<table>
												<thead>
													<tr>
														<td>Tipo</td>
														<td>Documento</td>
														<td>Scarica</td>
														<td></td>
													</tr>
												</thead>
												<tbody>
													@foreach (var doc in atto.Documenti.Where(d => d.TipoEnum == TipoDocumentoEnum.MONITORAGGIO))
													{
														<tr>
															<td>@doc.Tipo</td>
															<td>@doc.Titolo</td>
															<td>
																<a href="@doc.Link" target="_blank">
																	<i class="material-icons icon">link</i>
																</a>
															</td>
															<td>
																<a href="#!" class="red-text" onclick='rimuoviDocumento(this, "@doc.Titolo", "@doc.Uid")'>
																	<i class="material-icons">close</i>
																</a>
															</td>
														</tr>
													}
												</tbody>
											</table>
										}
									}
								</div>
							</div>
						</div>
					</li>
					<li>
						<div class="collapsible-header collection-header-custom @cssClass">
							<i class="material-icons">lock</i>
							Chiusura iter

							@if (atto.DataChiusuraIter.HasValue)
							{
								<div style="left: 160px; position: absolute;">
									<i class="material-icons icon right green-text">check_circle</i>
								</div>
							}
							else
							{
								<div class="tooltipped" style="left: 160px; position: absolute;" data-tooltip="Informazioni mancanti">
									<i class="material-icons icon right red-text">remove_circle</i>
								</div>
							}
						</div>
						<div class="collapsible-body">
							<div class="row">
								<div class="input-field col s12 m12 l4">
									<select id="Atto_TipoChiusuraIter">
										<option value="@Html.Raw((int)TipoChiusuraIterEnum.APPROVATO)" @Html.Raw(Model.Atto.TipoChiusuraIter == (int)TipoChiusuraIterEnum.APPROVATO ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_ChiusuraIterDASI((int)TipoChiusuraIterEnum.APPROVATO)</option>
										<option value="@Html.Raw((int)TipoChiusuraIterEnum.COMUNICAZIONE_ASSEMBLEA)" @Html.Raw(Model.Atto.TipoChiusuraIter == (int)TipoChiusuraIterEnum.COMUNICAZIONE_ASSEMBLEA ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_ChiusuraIterDASI((int)TipoChiusuraIterEnum.COMUNICAZIONE_ASSEMBLEA)</option>
										<option value="@Html.Raw((int)TipoChiusuraIterEnum.TRATTAZIONE_ASSEMBLEA)" @Html.Raw(Model.Atto.TipoChiusuraIter == (int)TipoChiusuraIterEnum.TRATTAZIONE_ASSEMBLEA ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_ChiusuraIterDASI((int)TipoChiusuraIterEnum.TRATTAZIONE_ASSEMBLEA)</option>
										<option value="@Html.Raw((int)TipoChiusuraIterEnum.RESPINTO)" @Html.Raw(Model.Atto.TipoChiusuraIter == (int)TipoChiusuraIterEnum.RESPINTO ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_ChiusuraIterDASI((int)TipoChiusuraIterEnum.RESPINTO)</option>
										<option value="@Html.Raw((int)TipoChiusuraIterEnum.RITIRATO)" @Html.Raw(Model.Atto.TipoChiusuraIter == (int)TipoChiusuraIterEnum.RITIRATO ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_ChiusuraIterDASI((int)TipoChiusuraIterEnum.RITIRATO)</option>
										<option value="@Html.Raw((int)TipoChiusuraIterEnum.INAMMISSIBILE)" @Html.Raw(Model.Atto.TipoChiusuraIter == (int)TipoChiusuraIterEnum.INAMMISSIBILE ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_ChiusuraIterDASI((int)TipoChiusuraIterEnum.INAMMISSIBILE)</option>
										<option value="@Html.Raw((int)TipoChiusuraIterEnum.DECADUTO)" @Html.Raw(Model.Atto.TipoChiusuraIter == (int)TipoChiusuraIterEnum.DECADUTO ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_ChiusuraIterDASI((int)TipoChiusuraIterEnum.DECADUTO)</option>
										<option value="@Html.Raw((int)TipoChiusuraIterEnum.DECADENZA_PER_FINE_LEGISLATURA)" @Html.Raw(Model.Atto.TipoChiusuraIter == (int)TipoChiusuraIterEnum.DECADENZA_PER_FINE_LEGISLATURA ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_ChiusuraIterDASI((int)TipoChiusuraIterEnum.DECADENZA_PER_FINE_LEGISLATURA)</option>
										<option value="@Html.Raw((int)TipoChiusuraIterEnum.DECADENZA_PER_FINE_MANDATO_CONSIGLIERE)" @Html.Raw(Model.Atto.TipoChiusuraIter == (int)TipoChiusuraIterEnum.DECADENZA_PER_FINE_MANDATO_CONSIGLIERE ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_ChiusuraIterDASI((int)TipoChiusuraIterEnum.DECADENZA_PER_FINE_MANDATO_CONSIGLIERE)</option>
										<option value="@Html.Raw((int)TipoChiusuraIterEnum.CHIUSURA_PER_MOTIVI_DIVERSI)" @Html.Raw(Model.Atto.TipoChiusuraIter == (int)TipoChiusuraIterEnum.CHIUSURA_PER_MOTIVI_DIVERSI ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_ChiusuraIterDASI((int)TipoChiusuraIterEnum.CHIUSURA_PER_MOTIVI_DIVERSI)</option>
									</select>
									<label for="Atto_TipoChiusuraIter">Tipo chiusura iter</label>
								</div>
								<div class="input-field col s12 m12 l4">
									@Html.TextBoxFor(s => s.Atto.DataChiusuraIter, "{0:yyyy-MM-dd}", new { @class = "form-control", type = "date" })
									@Html.LabelFor(s => s.Atto.DataChiusuraIter, new { @class = "active" })
								</div>
								<div class="input-field col s12 m12 l4">
									<select id="Atto_TipoVotazione">
										<option value="@Html.Raw((int)TipoVotazioneIterEnum.NESSUNO)" @Html.Raw(!Model.Atto.TipoVotazioneIter.HasValue ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_TipoVotazioneDASI((int)TipoVotazioneIterEnum.NESSUNO)</option>
										<option value="@Html.Raw((int)TipoVotazioneIterEnum.PALESE_ALZATA_DI_MANO)" @Html.Raw(Model.Atto.TipoVotazioneIter == (int)TipoVotazioneIterEnum.PALESE_ALZATA_DI_MANO ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_TipoVotazioneDASI((int)TipoVotazioneIterEnum.PALESE_ALZATA_DI_MANO)</option>
										<option value="@Html.Raw((int)TipoVotazioneIterEnum.APPELLO_NOMINALE)" @Html.Raw(Model.Atto.TipoVotazioneIter == (int)TipoVotazioneIterEnum.APPELLO_NOMINALE ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_TipoVotazioneDASI((int)TipoVotazioneIterEnum.APPELLO_NOMINALE)</option>
										<option value="@Html.Raw((int)TipoVotazioneIterEnum.SCRUTINIO_SEGRETO)" @Html.Raw(Model.Atto.TipoVotazioneIter == (int)TipoVotazioneIterEnum.SCRUTINIO_SEGRETO ? "selected=\"selected\"" : "")>@PortaleRegione.Common.Utility.GetText_TipoVotazioneDASI((int)TipoVotazioneIterEnum.SCRUTINIO_SEGRETO)</option>
									</select>
									<label for="Atto_TipoVotazione">Tipo votazione</label>
								</div>
							</div>
							<div class="row">
								<div class="input-field col s12 m12 l8">
									<div class="row">
										<div class="input-field col s12 m12 l4">
											<label>DCR</label>
											@Html.TextBoxFor(model => model.Atto.DCRL, new { @class = "form-control" })
										</div>
										<div class="input-field col s12 m12 l4">
											<label> </label>
											@Html.TextBoxFor(model => model.Atto.DCR, new { @class = "form-control" })
										</div>
										<div class="input-field col s12 m12 l4">
											<label> </label>
											@Html.TextBoxFor(model => model.Atto.DCCR, new { @class = "form-control" })
										</div>
									</div>
								</div>
								<div class="input-field col s12 m12 l4">
									<p>
										<label>
											<input name="Atto.Emendato" type="checkbox" value="true" @Html.Raw(Model.Atto.Emendato ? "checked=\"checked\"" : "") />
											<span>Emendato</span>
										</label>
									</p>
								</div>
							</div>
							<div class="row">
								<div class="col s12">
									<a id="btnSalva_InformazioniChiusuraIter" class="btn blue-text waves-effect waves-green btn-flat" style="width: 100%">Salva</a>
								</div>
							</div>
							<div class="row">
								<div class="col s12">
									<a id="btnAggiungiDocumento_ChiusuraIter" class="btn pink-text waves-effect waves-green btn-flat" style="width: 100%">Aggiungi documento</a>
								</div>
							</div>
							<div class="row">
								<div class="input-field col s12 m12 l12">
									@if (atto.Documenti.Any())
									{
										if (atto.Documenti.Any(d => d.TipoEnum == TipoDocumentoEnum.CHIUSURA_ITER
												|| d.TipoEnum == TipoDocumentoEnum.VERBALE_VOTAZIONE))
										{
											<h6>
												<b>Documenti di chiusura iter</b>
											</h6>
											<hr />
											<table>
												<thead>
													<tr>
														<td>Tipo</td>
														<td>Documento</td>
														<td>Scarica</td>
														<td></td>
													</tr>
												</thead>
												<tbody>
													@foreach (var doc in atto.Documenti.Where(d => d.TipoEnum == TipoDocumentoEnum.CHIUSURA_ITER
																								   || d.TipoEnum == TipoDocumentoEnum.VERBALE_VOTAZIONE))
													{
														<tr>
															<td>@doc.Tipo</td>
															<td>@doc.Titolo</td>
															<td>
																<a href="@doc.Link" target="_blank">
																	<i class="material-icons icon">link</i>
																</a>
															</td>
															<td>
																<a href="#!" class="red-text" onclick='rimuoviDocumento(this, "@doc.Titolo", "@doc.Uid")'>
																	<i class="material-icons">close</i>
																</a>
															</td>
														</tr>
													}
												</tbody>
											</table>
										}
									}
								</div>
							</div>
						</div>
					</li>
					<li>
						<div class="collapsible-header collection-header-custom @cssClass">
							<i class="material-icons">comment</i>Note
							@if (atto.Note.Any())
							{
								<div class="chip" style="left: 130px; margin-top: -4px; position: absolute;">@atto.Note.Count</div>
							}
						</div>
						<div class="collapsible-body">
							<div class="row">
								<div class="col s12">
									<a id="btnAggiungiNota" class="btn blue-text waves-effect waves-green btn-flat" style="width: 100%">Aggiungi nota</a>
								</div>
							</div>
							<h6>
								<b>Note dell'atto</b>
							</h6>
							<hr />
							<table id="tableNoteGenerali">
								<thead>
									<tr>
										<th>Tipo nota</th>
										<th>Nota</th>
										<th>Utente</th>
										<th></th>
									</tr>
								</thead>

								<tbody>
									@foreach (var nota in atto.Note)
									{
										<tr>
											<td>@Html.Raw(nota.Tipo)</td>
											<td>@Html.Raw(nota.Nota)</td>
											<td>@Html.Raw(nota.Persona.DisplayName)</td>
											<td>
												<a onclick="modificaNota(this)">
													<i class="material-icons">edit</i>
												</a>
												<a class="red-text" onclick="rimuoviNota(this, @((int)nota.TipoEnum))">
													<i class="material-icons">close</i>
												</a>
											</td>
										</tr>
									}
								</tbody>
							</table>

							@if (!atto.Note.Any())
							{
								<div id="empty-note" class="card-panel panel-warning center">
									<span class="center">
										<p>Nessuna nota</p>
									</span>
								</div>
							}

						</div>
					</li>
					<li>
						<div class="collapsible-header collection-header-custom @cssClass"><i class="material-icons">security</i>Privacy</div>
						<div class="collapsible-body">
							<div class="row">
								<div class="input-field col s12 m12 l12">
									<p>
										<label>
											<input type="checkbox" name="Atto.Privacy" value="true" @Html.Raw(Model.Atto.Privacy ? "checked=\"checked\"" : "") />
											<span>Privacy</span>
										</label>
									</p>
								</div>
								<div class="input-field col s12 m12 l12">
									<p>
										<label>
											<input type="checkbox" name="Atto.Privacy_Dati_Personali_Semplici" value="true" @Html.Raw(Model.Atto.Privacy_Dati_Personali_Semplici ? "checked=\"checked\"" : "") />
											<span>Privacy - dati personali semplici</span>
										</label>
									</p>
								</div>
								<div class="input-field col s12 m12 l12">
									<p>
										<label>
											<input type="checkbox" value="true" name="Atto.Privacy_Dati_Personali_Sensibili" @Html.Raw(Model.Atto.Privacy_Dati_Personali_Sensibili ? "checked=\"checked\"" : "") />
											<span>Privacy - dati sensibili</span>
										</label>
									</p>
								</div>
								<div class="input-field col s12 m12 l12">
									<p>
										<label>
											<input type="checkbox" value="true" name="Atto.Privacy_Dati_Personali_Giudiziari" @Html.Raw(Model.Atto.Privacy_Dati_Personali_Giudiziari ? "checked=\"checked\"" : "") />
											<span>Privacy - dati giudiziari</span>
										</label>
									</p>
								</div>
								<div class="input-field col s12 m12 l12">
									<p>
										<label>
											<input type="checkbox" value="true" name="Atto.Privacy_Divieto_Pubblicazione" @Html.Raw(Model.Atto.Privacy_Divieto_Pubblicazione ? "checked=\"checked\"" : "") />
											<span>Privacy - divieto di pubblicazione</span>
										</label>
									</p>
								</div>
								<div class="input-field col s12 m12 l12">
									<p>
										<label>
											<input type="checkbox" value="true" name="Atto.Privacy_Divieto_Pubblicazione_Salute" @Html.Raw(Model.Atto.Privacy_Divieto_Pubblicazione_Salute ? "checked=\"checked\"" : "") />
											<span>Privacy - dati sanitari</span>
										</label>
									</p>
								</div>
								<div class="input-field col s12 m12 l12">
									<p>
										<label>
											<input type="checkbox" value="true" name="Atto.Privacy_Divieto_Pubblicazione_Vita_Sessuale" @Html.Raw(Model.Atto.Privacy_Divieto_Pubblicazione_Vita_Sessuale ? "checked=\"checked\"" : "") />
											<span>Privacy - dati di natura sessuale</span>
										</label>
									</p>
								</div>
								<div class="input-field col s12 m12 l12">
									<p>
										<label>
											<input type="checkbox" value="true" name="Atto.Privacy_Divieto_Pubblicazione_Altri" @Html.Raw(Model.Atto.Privacy_Divieto_Pubblicazione_Altri ? "checked=\"checked\"" : "") />
											<span>Privicy - altri motivi</span>
										</label>
									</p>
								</div>
							</div>
							<div class="row">
								<div class="col s12">
									<a id="btnSalva_Privacy" class="btn blue-text waves-effect waves-green btn-flat" style="width: 100%">Salva</a>
								</div>
							</div>
						</div>
					</li>
					<li>
						<div class="collapsible-header collection-header-custom @cssClass"><i class="material-icons">local_printshop</i>Stampe</div>
						<div class="collapsible-body">
							<span>Lorem ipsum dolor sit amet.</span>
						</div>
					</li>
				</ul>
			</div>
		</div>

		<div class="fixed-action-btn">
			@if (Model.CurrentUser.UID_persona == atto.UIDPersonaProponente)
			{
				<a class="btn-floating btn-large white black-text tooltipped"
				   data-position="left"
				   data-tooltip="Stampa"
				   data-url="@Url.Action("Download", "DASI", new { id = atto.UIDAtto })"
				   data-url-privacy="@Url.Action("DownloadWithPrivacy", "DASI", new { id = atto.UIDAtto })"
				   onclick="StampaUOLA(this)"
				   style="margin-right: 15px;">
					<i class="material-icons">print</i>
				</a>
			}
			else
			{
				<a class="btn-floating btn-large white black-text tooltipped"
				   data-position="left"
				   data-tooltip="Stampa"
				   target="_blank"
				   href="@Url.Action("DownloadWithPrivacy", "DASI", new { id = atto.UIDAtto })"
				   style="margin-right: 15px;">
					<i class="material-icons">print</i>
				</a>
			}
		</div>

		<div id="modalAbbinamenti" class="modal">
			<div class="modal-content">
				<h4>Abbinamenti</h4>
				<p>Ricerca abbinamenti all'atto @Model.Atto.Display</p>
				<div class="row">
					<div class="input-field col s12">
						<i class="material-icons prefix">search</i>
						<input type="text" id="abbinamenti-autocomplete" class="autocomplete">
					</div>
				</div>
			</div>
			<div class="modal-footer">
				<a href="#!" class="modal-close waves-effect waves-green btn-flat">Annulla</a>
			</div>
		</div>

		<div id="modalRisposte" class="modal">
			<div class="modal-content">
				<h4>Risposte</h4>
				<p>Ricerca organi di risposta all'atto @Model.Atto.Display</p>
				<div class="row">
					<div class="input-field col s12">
						<i class="material-icons prefix">search</i>
						<input type="text" id="organi-autocomplete" class="autocomplete">
					</div>
				</div>
			</div>
			<div class="modal-footer">
				<a href="#!" class="modal-close waves-effect waves-green btn-flat">Annulla</a>
			</div>
		</div>

		<div id="modalDettaglioRisposta" class="modal">
			<div class="modal-content">
				<div class="row">
					<div class="input-field col s12 m12 l12">
						<select id="tipi-risposta-select">
							<option value="@Html.Raw((int)TipoRispostaEnum.ORALE)">@PortaleRegione.Common.Utility.GetText_TipoRispostaDASI((int)TipoRispostaEnum.ORALE)</option>
							<option value="@Html.Raw((int)TipoRispostaEnum.SCRITTA)">@PortaleRegione.Common.Utility.GetText_TipoRispostaDASI((int)TipoRispostaEnum.SCRITTA)</option>
							<option value="@Html.Raw((int)TipoRispostaEnum.COMMISSIONE)">@PortaleRegione.Common.Utility.GetText_TipoRispostaDASI((int)TipoRispostaEnum.COMMISSIONE)</option>
							<option value="@Html.Raw((int)TipoRispostaEnum.ITER_IN_ASSEMBLEA)">@PortaleRegione.Common.Utility.GetText_TipoRispostaDASI((int)TipoRispostaEnum.ITER_IN_ASSEMBLEA)</option>
							<option value="@Html.Raw((int)TipoRispostaEnum.ITER_IN_ASSEMBLEA_COMMISSIONE)">@PortaleRegione.Common.Utility.GetText_TipoRispostaDASI((int)TipoRispostaEnum.ITER_IN_ASSEMBLEA_COMMISSIONE)</option>
						</select>
						<label>Tipo risposta</label>
					</div>
					<div class="input-field col s12 m12 l12">
						<input id="dataRisposta" type="date" />
						<label>Data risposta</label>
					</div>
					<div class="input-field col s12 m12 l12">
						<input id="dataTrasmissione" type="date" />
						<label>Data trasmissione</label>
					</div>
					<div class="input-field col s12 m12 l12">
						<input id="dataTrattazione" type="date" />
						<label>Data trattazione</label>
					</div>
				</div>

				<input id="idOrganoDettaglioRisposta" type="hidden" />
				<input id="descrizioneOrganoDettaglioRisposta" type="hidden" />

			</div>
			<div class="modal-footer">
				<a href="#!" class="modal-close waves-effect waves-green btn-flat">Annulla</a>
				<a onclick="btnSalvaDettagliRisposta()" class="blue-text waves-effect waves-green btn-flat">Salva</a>
			</div>
		</div>

		<div id="modalMonitoraggio" class="modal">
			<div class="modal-content">
				<h4>Monitoraggio</h4>
				<p>Ricerca organi da monitorare all'atto @Model.Atto.Display</p>
				<div class="row">
					<div class="input-field col s12">
						<i class="material-icons prefix">search</i>
						<input type="text" id="organi-monitoraggio-autocomplete" class="autocomplete">
					</div>
				</div>
			</div>
			<div class="modal-footer">
				<a href="#!" class="modal-close waves-effect waves-green btn-flat">Annulla</a>
			</div>
		</div>

		<div id="modalNota" class="modal">
			<div class="modal-content">
				<h4>Nota</h4>
				<div class="row">
					<div class="input-field col s12">
						<select id="tipi-nota-select">
							<option value="0"></option>
							<option value="@Html.Raw((int)TipoNotaEnum.GENERALE_PRIVATA)">@PortaleRegione.Common.Utility.GetText_TipoNotaDASI((int)TipoNotaEnum.GENERALE_PRIVATA)</option>
							<option value="@Html.Raw((int)TipoNotaEnum.GENERALE_PUBBLICA)">@PortaleRegione.Common.Utility.GetText_TipoNotaDASI((int)TipoNotaEnum.GENERALE_PUBBLICA)</option>
							<option value="@Html.Raw((int)TipoNotaEnum.CHIUSURA_ITER)">@PortaleRegione.Common.Utility.GetText_TipoNotaDASI((int)TipoNotaEnum.CHIUSURA_ITER)</option>
							<option value="@Html.Raw((int)TipoNotaEnum.RISPOSTA)">@PortaleRegione.Common.Utility.GetText_TipoNotaDASI((int)TipoNotaEnum.RISPOSTA)</option>
						</select>
						<label>Tipo nota</label>
					</div>
					<label>Nota</label>

					<div class="input-field col s12">
						<textarea id="txtNota_Testo" class="materialize-textarea"></textarea>
					</div>
				</div>
			</div>
			<div class="modal-footer">
				<a href="#!" class="modal-close waves-effect waves-green btn-flat">Annulla</a>
				<a onclick="btnSalvaNota()" class="blue-text waves-effect waves-green btn-flat">Salva</a>
			</div>
		</div>

		<div id="modalDocumento" class="modal">
			<div class="modal-content">
				<h4>Documento</h4>
				<div class="row">
					<div class="input-field col s12">
						<select id="tipi-documento-select">
						</select>
						<label>Tipo documento</label>
					</div>
					<label>Carica documento</label>

					<div class="file-field input-field">
						<div class="btn">
							<span>SFOGLIA</span>
							<input type="file" name="document_object" accept="application/pdf">
						</div>
						<div class="file-path-wrapper">
							<input class="file-path validate" type="text" placeholder="Carica documento">
						</div>
					</div>
				</div>
			</div>
			<div class="modal-footer">
				<a href="#!" class="modal-close waves-effect waves-green btn-flat">Annulla</a>
				<a onclick="btnSalvaDocumento()" class="blue-text waves-effect waves-green btn-flat">Salva</a>
			</div>
		</div>

		<script>
	document.addEventListener('DOMContentLoaded', async function () {
	    var elem = document.querySelector('.collapsible.expandable');
	    var instance = M.Collapsible.init(elem, {
		    accordion: false
	    });
    });

    document.getElementById('btnSalva_InformazioniGenerali').addEventListener('click', async function () {

        swal({
            title: "Salvataggio informazioni generali",
            text: "Sei sicuro di voler salvare le informazioni generali?",
            icon: "warning",
            buttons: ["Annulla", "Salva"]
        }).then(async (answer) => {
            if (answer) {
                var data = {
                    UIDAtto: '@Html.Raw(Model.Atto.UIDAtto)',
                    Stato: document.getElementById('Atto_Stato').value,
                    DataAnnunzio: document.querySelector('input[name="Atto.DataAnnunzio"]').value,
                    Oggetto: document.querySelector('input[name="Atto.Oggetto"]').value,
                    Protocollo: document.querySelector('input[name="Atto.Protocollo"]').value,
                    CodiceMateria: document.querySelector('input[name="Atto.CodiceMateria"]').value,
                    AreaPolitica: document.getElementById('Atto_AreaPolitica').value,
                    RispostaRichiesta: document.getElementById('Atto_RispostaRichiesta').value,
                    Pubblicato: document.querySelector('input[name="Atto.Pubblicato"]').checked,
                    Sollecito: document.querySelector('input[name="Atto.Sollecito"]').checked
                };

                var url = '@Url.Action("Salva_InformazioniGeneraliAtto", "DASI")';
                // Send the data using fetch
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
				}

				try {
					const errorData = await response.json();
					if (errorData !== "OK") { ErrorAlert(errorData.message); return; }

				} catch (error) {
					// ignored
				}

                M.toast({
                    html: `<span>Informazioni generali salvate con successo</span>`,
                    classes: 'rounded',
                    displayLength: 5000
                });
            }
        });
	});

	document.getElementById('btnSalva_Privacy').addEventListener('click', async function () {

        swal({
            title: "Salvataggio privacy",
            text: "Sei sicuro di voler salvare le informazioni riguardanti la privacy dell'atto?",
            icon: "warning",
            buttons: ["Annulla", "Salva"]
        }).then(async (answer) => {
            if (answer) {
                var data = {
                    UIDAtto: '@Html.Raw(Model.Atto.UIDAtto)',
					Privacy_Dati_Personali_Giudiziari: document.querySelector('input[name="Atto.Privacy_Dati_Personali_Giudiziari"]').checked,
					Privacy_Divieto_Pubblicazione_Salute: document.querySelector('input[name="Atto.Privacy_Divieto_Pubblicazione_Salute"]').checked,
					Privacy_Divieto_Pubblicazione_Vita_Sessuale: document.querySelector('input[name="Atto.Privacy_Divieto_Pubblicazione_Vita_Sessuale"]').checked,
					Privacy_Divieto_Pubblicazione: document.querySelector('input[name="Atto.Privacy_Divieto_Pubblicazione"]').checked,
					Privacy_Dati_Personali_Sensibili: document.querySelector('input[name="Atto.Privacy_Dati_Personali_Sensibili"]').checked,
					Privacy_Divieto_Pubblicazione_Altri: document.querySelector('input[name="Atto.Privacy_Divieto_Pubblicazione_Altri"]').checked,
					Privacy_Dati_Personali_Semplici: document.querySelector('input[name="Atto.Privacy_Dati_Personali_Semplici"]').checked,
					Privacy: document.querySelector('input[name="Atto.Privacy"]').checked
                };

                var url = '@Url.Action("Salva_PrivacyAtto", "DASI")';
                // Send the data using fetch
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
				}

				try {
					const errorData = await response.json();
					if (errorData !== "OK") { ErrorAlert(errorData.message); return; }

				} catch (error) {
					// ignored
				}

                M.toast({
                    html: `<span>Informazioni privacy salvate con successo</span>`,
                    classes: 'rounded',
                    displayLength: 5000
                });
            }
        });
    });

    document.getElementById('btnAggiungiAbbinamento').addEventListener('click', async function () {
        waiting(true);
        var abbinamenti = await GetAbbinamentiDisponibili(@Html.Raw(Model.Atto.Legislatura));
		var data = [];
		abbinamenti.forEach(function (item) {
			data.push({
				tag: `${item.display}, con oggetto: ${item.oggetto}`,
				id: `${item.uidAtto}`
			});
		});
        var elems = document.querySelectorAll('#abbinamenti-autocomplete');
		var instances = M.Autocomplete.init(elems, {
			data: data,
			limit: 20,
			minLength: 2,
			onAutocomplete: function (txt, key) {
				swal({
					title: "Inserimento nuovo abbinamento",
					text: "Sei sicuro di voler inserire l'abbinamento " + txt + " all'atto @Html.Raw(Model.Atto.Display)?",
					icon: "warning",
					buttons: ["Annulla", "Inserisci"]
				}).then(async (answer) => {

					if (answer) {
						var request = {
							UidAbbinamento: "@Html.Raw(Model.Atto.UIDAtto)",
							UidAttoAbbinato: `${key}`,
						}

						var url = '@Url.Action("Salva_NuovoAbbinamento", "DASI")';
						// Send the data using fetch
						const response = await fetch(url, {
							method: 'POST',
							headers: {
								'Content-Type': 'application/json'
							},
							body: JSON.stringify(request)
						});

						if (!response.ok) {
							throw new Error('Network response was not ok');
						}

						try {
							const errorData = await response.json();
							if (errorData !== "OK") { ErrorAlert(errorData.message); return; }

						} catch (error) {
							// ignored
						}

						// Aggiungi il nuovo abbinamento alla lista
						var newItem = document.createElement('li');
						newItem.className = 'collection-item';
						newItem.innerHTML = `${txt} <a href="#!" class="secondary-content red-text" onclick="rimuoviAbbinamento(this,'${key}')"><i class="material-icons">close</i></a> `;

						document.getElementById('lstAbbinamentiAtto').appendChild(newItem);

						M.toast({
							html: `<span>Abbinamento ${txt} inserito con successo nell'atto @Html.Raw(Model.Atto.Display)</span>`,
							classes: 'rounded',
							displayLength: 5000
						});

						$('#empty-abbinamenti').hide();
					}
					document.getElementById('abbinamenti-autocomplete').value = "";
				});
			}
		});
		waiting(false);
		$('#modalAbbinamenti').modal("open");
	});

	function rimuoviAbbinamento(ctrl, uidAttoAbbinato){
		swal({
				title: "Rimuovi abbinamento",
				text: "Sei sicuro di voler rimuovere l'abbinamento?",
				icon: "error",
				buttons: ["Annulla", "Rimuovi"]
		}).then(async (answer) => {
			if (answer) {

				var request = {
					UidAbbinamento: `@Html.Raw(Model.Atto.UIDAtto)`,
					UidAttoAbbinato: `${uidAttoAbbinato}`,
				}

				var url = '@Url.Action("Salva_RimuoviAbbinamento", "DASI")';
				// Send the data using fetch
				const response = await fetch(url, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify(request)
				});

				if (!response.ok) {
					throw new Error('Network response was not ok');
				}

				try {
					const errorData = await response.json();
					if (errorData !== "OK") { ErrorAlert(errorData.message); return; }

				} catch (error) {
					// ignored
				}

				$(ctrl).parent().remove();
				M.toast({
					html: `<span>Abbinamento rimosso con successo dall'atto @Html.Raw(Model.Atto.Display)</span>`,
					classes: 'rounded',
					displayLength: 5000
				});
			}
		});
	}

	document.getElementById('btnAggiungiRisposta').addEventListener('click', async function () {
		waiting(true);

		var organi = await GetOrganiDisponibili(@Html.Raw(Model.Atto.Legislatura));
		var data = [];
		organi.forEach(function (item) {
			data.push({
				tag: `${item.nome_organo}`,
				id: `${item.id_organo}`
			});
		});
		var elems = document.querySelectorAll('#organi-autocomplete');
		var instances = M.Autocomplete.init(elems, {
			data: data,
			limit: 20,
			minLength: 2,
			onAutocomplete: function (txt, key) {
				swal({
					title: "Inserimento nuovo organo",
					text: "Sei sicuro di voler inserire " + txt + " all'atto @Html.Raw(Model.Atto.Display)?",
					icon: "warning",
					buttons: ["Annulla", "Inserisci"]
				}).then(async (answer) => {

					if (answer) {

						let tipoOrgano;
						let displayTipoOrgano;

						if (txt.includes("Commissione")) {
							tipoOrgano = 1; // TipoOrganoEnum.COMMISSIONE
							displayTipoOrgano = "Commissione";
						} else {
							tipoOrgano = 2; // TipoOrganoEnum.GIUNTA
							displayTipoOrgano = "Giunta";
						}

						// Simula la richiesta al server per salvare i dati
						var request = {
							UIDAtto: '@Model.Atto.UIDAtto',
							IdOrgano: `${key}`,
							TipoOrgano: tipoOrgano,
							DisplayTipoOrgano: displayTipoOrgano,
							DescrizioneOrgano: txt,
						}

						var url = '@Url.Action("Salva_NuovaRisposta", "DASI")';
						// Send the data using fetch
						const response = await fetch(url, {
							method: 'POST',
							headers: {
								'Content-Type': 'application/json'
							},
							body: JSON.stringify(request)
						});

						if (!response.ok) {
							throw new Error('Network response was not ok');
						}

						try {
							const errorData = await response.json();
							if (errorData !== "OK") { ErrorAlert(errorData.message); return; }

						} catch (error) {
							// ignored
						}

						// Aggiungi una nuova riga alla tabella
						var newRow = document.createElement('tr');
						newRow.innerHTML = `
							<td></td>
							<td></td>
							<td>${request.DisplayTipoOrgano}</td>
							<td>${request.DescrizioneOrgano}</td>
							<td></td>
							<td></td>
							<td>
								<a onclick="modificaDettagliRisposta(this, ${key})"><i class="material-icons">edit</i></a>
								<a class="red-text" onclick="rimuoviRisposta(this, ${key})"><i class="material-icons">close</i></a>
							</td>
						`;

							document.querySelector('#tableRisposte tbody').appendChild(newRow);

							M.toast({
								html: `<span>${txt} inserito con successo all'atto @Html.Raw(Model.Atto.Display)</span>`,
								classes: 'rounded',
								displayLength: 5000
							});

							$('#empty-risposte').hide();
						}
						document.getElementById('organi-autocomplete').value = "";
					});
				}
			});
		waiting(false);
		$('#modalRisposte').modal("open");
	});

	function rimuoviRisposta(ctrl, organoId) {
			var row = $(ctrl).closest('tr');
			var id = organoId;

			swal({
				title: "Rimuovi risposta",
				text: "Sei sicuro di voler rimuovere questa risposta?",
				icon: "warning",
				buttons: ["Annulla", "Rimuovi"]
			}).then(async (answer) => {
				if (answer) {
					// Simula la richiesta al server per rimuovere i dati
					var url = '@Url.Action("Salva_RimuoviRisposta", "DASI")';
					const response = await fetch(url, {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json'
						},
						body: JSON.stringify({ IdOrgano: id, UIDAtto: '@Model.Atto.UIDAtto' })
					});

					if (!response.ok) {
						throw new Error('Network response was not ok');
					}

					try {
						const errorData = await response.json();
						if (errorData !== "OK") { ErrorAlert(errorData.message); return; }

					} catch (error) {
						// ignored
					}

					// Rimuovi la riga dalla tabella
					row.remove();

					M.toast({
						html: `<span>Risposta rimossa con successo</span>`,
						classes: 'rounded',
						displayLength: 5000
					});
				}
			});
	}

	function modificaDettagliRisposta(ctrl, organoId) {
		// Ottieni la riga selezionata
		var row = $(ctrl).closest('tr');

		// Ottieni i dati dalla riga
		var tipoRisposta = row.find('td:eq(0)').text().trim(); // Primo TD
		var dataRisposta = row.find('td:eq(1)').text().trim(); // Secondo TD
		var tipoOrgano = row.find('td:eq(2)').text().trim(); // Terzo TD
		var descrizioneOrgano = row.find('td:eq(3)').text().trim(); // Quarto TD
		var dataTrasmissione = row.find('td:eq(4)').text().trim(); // Quinto TD
		var dataTrattazione = row.find('td:eq(5)').text().trim(); // Sesto TD

		var tipoRispostaValue = null;
		$('#tipi-risposta-select option').each(function () {
			if ($(this).text().trim() === tipoRisposta) {
				tipoRispostaValue = $(this).val();
			}
		});

		// Precompila i controlli nella modale
		$('#tipi-risposta-select').val(tipoRispostaValue).formSelect(); // Seleziona il valore nel select
		$('#dataRisposta').val(formatDateForInput(dataRisposta)); // Setta la data risposta
		$('#dataTrasmissione').val(formatDateForInput(dataTrasmissione)); // Setta la data trasmissione
		$('#dataTrattazione').val(formatDateForInput(dataTrattazione)); // Setta la data trattazione
		$('#idOrganoDettaglioRisposta').val(organoId); // Setta l'organo
		$('#descrizioneOrganoDettaglioRisposta').val(descrizioneOrgano); // Setta la descrizione dell' organo

		// Apri la modale
		$('#modalDettaglioRisposta').modal('open');
	}

	document.getElementById('btnAggiungiMonitoraggio').addEventListener('click', async function () {
		waiting(true);

		var organi = await GetOrganiDisponibili(@Html.Raw(Model.Atto.Legislatura));
		var data = [];
		organi.forEach(function (item) {
			data.push({
				tag: `${item.nome_organo}`,
				id: `${item.id_organo}`
			});
		});
		var elems = document.querySelectorAll('#organi-monitoraggio-autocomplete');
		var instances = M.Autocomplete.init(elems, {
			data: data,
			limit: 20,
			minLength: 2,
			onAutocomplete: function (txt, key) {
				swal({
					title: "Inserimento nuovo organo",
					text: "Sei sicuro di voler inserire " + txt + " all'atto @Html.Raw(Model.Atto.Display)?",
					icon: "warning",
					buttons: ["Annulla", "Inserisci"]
				}).then(async (answer) => {

					if (answer) {

						let tipoOrgano;
						let displayTipoOrgano;

						if (txt.includes("Commissione")) {
							tipoOrgano = 1; // TipoOrganoEnum.COMMISSIONE
							displayTipoOrgano = "Commissione";
						} else {
							tipoOrgano = 2; // TipoOrganoEnum.GIUNTA
							displayTipoOrgano = "Giunta";
						}

						// Simula la richiesta al server per salvare i dati
						var request = {
							UIDAtto: '@Model.Atto.UIDAtto',
							IdOrgano: `${key}`,
							TipoOrgano: tipoOrgano,
							DisplayTipoOrgano: displayTipoOrgano,
							DescrizioneOrgano: txt,
						}

						var url = '@Url.Action("Salva_NuovoMonitoraggio", "DASI")';
						// Send the data using fetch
						const response = await fetch(url, {
							method: 'POST',
							headers: {
								'Content-Type': 'application/json'
							},
							body: JSON.stringify(request)
						});

						if (!response.ok) {
							throw new Error('Network response was not ok');
						}

						// Aggiungi una nuova riga alla tabella
						var newRow = document.createElement('tr');
						newRow.innerHTML = `
							<td>${request.DisplayTipoOrgano}</td>
							<td>${request.DescrizioneOrgano}</td>
							<td>
								<a class="red-text" onclick="rimuoviMonitoraggio(this, ${key})"><i class="material-icons">close</i></a>
							</td>
						`;

							document.querySelector('#tableMonitoraggio tbody').appendChild(newRow);

							M.toast({
								html: `<span>${txt} inserito con successo all'atto @Html.Raw(Model.Atto.Display)</span>`,
								classes: 'rounded',
								displayLength: 5000
							});

							$('#empty-monitoraggio').hide();
						}
						document.getElementById('organi-monitoraggio-autocomplete').value = "";
					});
				}
			});
		waiting(false);
		$('#modalMonitoraggio').modal("open");
	});

	function rimuoviMonitoraggio(ctrl, organoId) {
		var row = $(ctrl).closest('tr');
		var id = organoId;

		swal({
			title: "Rimuovi monitoraggio",
			text: "Sei sicuro di voler rimuovere questo monitoraggio?",
			icon: "warning",
			buttons: ["Annulla", "Rimuovi"]
		}).then(async (answer) => {
			if (answer) {
				// Simula la richiesta al server per rimuovere i dati
				var url = '@Url.Action("Salva_RimuoviMonitoraggio", "DASI")';
				const response = await fetch(url, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({ IdOrgano: id, UIDAtto: '@Model.Atto.UIDAtto' })
				});

				if (!response.ok) {
					throw new Error('Network response was not ok');
				}

				try {
					const errorData = await response.json();
					if (errorData !== "OK") { ErrorAlert(errorData.message); return; }

				} catch (error) {
					// ignored
				}

				// Rimuovi la riga dalla tabella
				row.remove();

				M.toast({
					html: `<span>Monitoraggio rimosso con successo</span>`,
					classes: 'rounded',
					displayLength: 5000
				});
			}
		});
	}

    document.getElementById('btnSalva_InformazioniAggiuntiveMonitoraggio').addEventListener('click', async function () {

        swal({
            title: "Salvataggio informazioni monitoraggio",
            text: "Sei sicuro di voler salvare le informazioni di monitoraggio?",
            icon: "warning",
            buttons: ["Annulla", "Salva"]
        }).then(async (answer) => {
            if (answer) {
                var data = {
                    UIDAtto: '@Html.Raw(Model.Atto.UIDAtto)',
					AltriSoggetti: document.querySelector('input[name="Atto.AltriSoggetti"]').value,
					AreaTematica: document.querySelector('input[name="Atto.AreaTematica"]').value
                };

                var url = '@Url.Action("Salva_InformazioniMonitoraggio", "DASI")';
                // Send the data using fetch
                const response = await fetch(url, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data)
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
				}

				try {
					const errorData = await response.json();
					if (errorData !== "OK") { ErrorAlert(errorData.message); return; }

				} catch (error) {
					// ignored
				}

                M.toast({
                    html: `<span>Informazioni di monitoraggio salvate con successo</span>`,
                    classes: 'rounded',
                    displayLength: 5000
                });
            }
        });
    });

	function formatDateForInput(dateStr) {
		// Converti la data in formato "dd/MM/yyyy" a "yyyy-MM-dd" per gli input di tipo date
		if (dateStr) {
			var parts = dateStr.split('/');
			return `${parts[2]}-${parts[1]}-${parts[0]}`;
		}
		return '';
	}

	async function btnSalvaDettagliRisposta() {
		// Ottieni i dati dalla modale
		var tipoRispostaValue = $('#tipi-risposta-select').val();
		var tipoRispostaText = $('#tipi-risposta-select option:selected').text();
		var dataRisposta = $('#dataRisposta').val();
		var dataTrasmissione = $('#dataTrasmissione').val();
		var dataTrattazione = $('#dataTrattazione').val();
		var organoId = $('#idOrganoDettaglioRisposta').val();
		var organoDescrizione = $('#descrizioneOrganoDettaglioRisposta').val();

		// Prepara i dati per il salvataggio
		var requestData = {
			UIDAtto: '@Model.Atto.UIDAtto',
			IdOrgano: organoId,
			Tipo: tipoRispostaValue,
			Data: dataRisposta,
			DataTrasmissione: dataTrasmissione,
			DataTrattazione: dataTrattazione
		};

		var url = '@Url.Action("Salva_DettagliRisposta", "DASI")';

		const response = await fetch(url, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify(requestData)
		});

		if (!response.ok) {
			throw new Error('Network response was not ok');
		}

		try {
			const errorData = await response.json();
			if (errorData !== "OK") { ErrorAlert(errorData.message); return; }

		} catch (error) {
			// ignored
		}

		// Aggiorna la riga nella tabella
		var row = $('table tbody tr').filter(function () {
			return $(this).find('td:eq(3)').text().trim() === organoDescrizione;
		});

		row.find('td:eq(0)').text(tipoRispostaText);
		row.find('td:eq(1)').text(formatDateForDisplay(dataRisposta));
		row.find('td:eq(4)').text(formatDateForDisplay(dataTrasmissione));
		row.find('td:eq(5)').text(formatDateForDisplay(dataTrattazione));

		M.toast({
			html: `<span>Dettagli della risposta salvati con successo</span>`,
			classes: 'rounded',
			displayLength: 5000
		});

		// Chiudi la modale
		$('#modalDettaglioRisposta').modal('close');
	}

	function formatDateForDisplay(dateStr) {
		// Converti la data in formato "yyyy-MM-dd" a "dd/MM/yyyy" per la visualizzazione
		if (dateStr) {
			var parts = dateStr.split('-');
			return `${parts[2]}/${parts[1]}/${parts[0]}`;
		}
		return '';
	}

	document.getElementById('btnSalva_InformazioniChiusuraIter').addEventListener('click', async function () {

		 swal({
			 title: "Salvataggio informazioni chiusura",
			 text: "Sei sicuro di voler salvare le informazioni di chiusura?",
			 icon: "warning",
			 buttons: ["Annulla", "Salva"]
		 }).then(async (answer) => {
			 if (answer) {
				 var data = {
					 UIDAtto: '@Html.Raw(Model.Atto.UIDAtto)',
					 TipoChiusuraIter: document.getElementById('Atto_TipoChiusuraIter').value,
					 TipoVotazioneIter: document.getElementById('Atto_TipoVotazione').value,
					 DataChiusuraIter: document.querySelector('input[name="Atto.DataChiusuraIter"]').value,
					 DCR: document.querySelector('input[name="Atto.DCR"]').value,
					 DCCR: document.querySelector('input[name="Atto.DCCR"]').value,
					 DCRL: document.querySelector('input[name="Atto.DCRL"]').value,
					 Emendato: document.querySelector('input[name="Atto.Emendato"]').checked
				 };

				 var url = '@Url.Action("Salva_InformazioniChiusuraIter", "DASI")';
				 // Send the data using fetch
				 const response = await fetch(url, {
					 method: 'POST',
					 headers: {
						 'Content-Type': 'application/json'
					 },
					 body: JSON.stringify(data)
				 });

				 if (!response.ok) {
					 throw new Error('Network response was not ok');
				 }

				 try {
					 const errorData = await response.json();
					 if (errorData !== "OK") { ErrorAlert(errorData.message); return; }

				 } catch (error) {
					 // ignored
				 }

				 M.toast({
					 html: `<span>Informazioni chiusura iter salvate con successo</span>`,
					 classes: 'rounded',
					 displayLength: 5000
				 });
			 }
		 });
	});

	document.getElementById('btnAggiungiDocumento_ChiusuraIter').addEventListener('click', function () {
		waiting(true);
		$('#tipi-documento-select').empty();
		$('#tipi-documento-select').append('<option value="@Html.Raw((int)TipoDocumentoEnum.CHIUSURA_ITER)">Chiusura Iter</option>');
		$('#tipi-documento-select').append('<option value="@Html.Raw((int)TipoDocumentoEnum.VERBALE_VOTAZIONE)">Verbale votazione</option>');
		$('#tipi-documento-select').val($('#tipi-documento-select option:first').val());
		$('#tipi-documento-select').formSelect();
		waiting(false);
		$('#modalDocumento').modal("open");
	});

    document.getElementById('btnAggiungiDocumento_Monitoraggio').addEventListener('click', function () {
		waiting(true);
		$('#tipi-documento-select').empty();
		$('#tipi-documento-select').append('<option value="@Html.Raw((int)TipoDocumentoEnum.MONITORAGGIO)">Monitoraggio</option>');
		$('#tipi-documento-select').val($('#tipi-documento-select option:first').val());
		$('#tipi-documento-select').formSelect();
		waiting(false);
		$('#modalDocumento').modal("open");
	});

	document.getElementById('btnAggiungiDocumento_Risposta').addEventListener('click', function () {
		waiting(true);
		$('#tipi-documento-select').empty();
		$('#tipi-documento-select').append('<option value="@Html.Raw((int)TipoDocumentoEnum.RISPOSTA)">Risposta</option>');
		$('#tipi-documento-select').val($('#tipi-documento-select option:first').val());
		$('#tipi-documento-select').formSelect();
		waiting(false);
		$('#modalDocumento').modal("open");
	});

	document.getElementById('btnAggiungiDocumento_InformazioniGenerali').addEventListener('click', function () {
		waiting(true);
		$('#tipi-documento-select').empty();
		$('#tipi-documento-select').append('<option value="@Html.Raw((int)TipoDocumentoEnum.AGGIUNTIVO)">Aggiuntivo</option>');
		$('#tipi-documento-select').val($('#tipi-documento-select option:first').val());
		$('#tipi-documento-select').formSelect();
		waiting(false);
		$('#modalDocumento').modal("open");
	});

	async function btnSalvaDocumento(){

        // Ottieni i dati dalla modale
        var tipoDocumentoValue = $('#tipi-documento-select').val();
        var tipoDocumentoText = $('#tipi-documento-select option:selected').text();

        var inputsAllegatoGenerico = $('input[name=document_object]');
        if (inputsAllegatoGenerico.length != 0) {
            var inputFileAllegatoGenerico = inputsAllegatoGenerico[0];
            if (!inputFileAllegatoGenerico.files) {
                alert("This browser doesn't seem to support the `files` property of file inputs.");
                return; // Uscire in caso di errore
            }

            if (inputFileAllegatoGenerico.files.length > 0) {
                // Creazione del FormData per inviare il file e altri dati
                var formData = new FormData();
                formData.append("UIDAtto", '@Html.Raw(Model.Atto.UIDAtto)');
                formData.append("TipoDocumento", tipoDocumentoValue); // Invia il tipo di documento selezionato
                formData.append("Documento", inputFileAllegatoGenerico.files[0]); // Aggiungi il file PDF

                var url = '@Url.Action("Salva_Documento", "DASI")';

                try {

					waiting(true);

                    // Invia i dati usando fetch
                    const response = await fetch(url, {
                        method: 'POST',
                        body: formData // Non impostare il content-type, fetch lo farà automaticamente con FormData
                    });

                    if (!response.ok) {
						waiting(false);
                        throw new Error('Network response was not ok');
                    }

                    const result = await response.json();
                    if (result !== "OK") {
						waiting(false);
                        throw new Error(result.message);
                    }

                    // Mostra il messaggio di successo
                    M.toast({
                        html: `<span>Documento salvato con successo</span>`,
                        classes: 'rounded',
                        displayLength: 5000
                    });

					setTimeout(function () {
						location.reload();
					}, 5000);

                } catch (error) {
                    waiting(false);
                    console.error('Errore durante il salvataggio del documento:', error);
                    M.toast({
                        html: `<span>Errore: ${error.message}</span>`,
                        classes: 'rounded',
                        displayLength: 5000
                    });
                }
            } else {
                alert("Seleziona un file PDF da caricare.");
            }
        } else {
            alert("Input file non trovato.");
        }
    }

	function rimuoviDocumento(ctrl, titolo, uid) {
	    swal({
		    title: "Rimuovi documento " + titolo,
		    text: "Sei sicuro di voler rimuovere questa documento?",
		    icon: "warning",
		    buttons: ["Annulla", "Rimuovi"]
	    }).then(async (answer) => {
		    if (answer) {
                waiting(true);
			    // Simula la richiesta al server per rimuovere i dati
			    var url = '@Url.Action("Salva_RimuoviDocumento", "DASI")';
			    const response = await fetch(url, {
				    method: 'POST',
				    headers: {
					    'Content-Type': 'application/json'
				    },
				    body: JSON.stringify({ Uid: uid })
			    });

			    if (!response.ok) {
					waiting(false);
				    throw new Error('Network response was not ok');
			    }

			    try {
				    const errorData = await response.json();
					if (errorData !== "OK") { waiting(false); ErrorAlert(errorData.message); return; }

			    } catch (error) {
				    // ignored
					waiting(false);
			    }

			    M.toast({
				    html: `<span>Documento rimosso con successo</span>`,
				    classes: 'rounded',
				    displayLength: 5000
			    });

				setTimeout(function () {
					location.reload();
				}, 5000);
		    }
	    });
}

	document.getElementById('btnAggiungiNota').addEventListener('click', async function () {
		waiting(true);
		$("#txtNota_Testo").val("")
		$('#tipi-nota-select').val($('#tipi-nota-select option:first').val());
		$('#tipi-nota-select').formSelect();
		waiting(false);
		$('#modalNota').modal("open");
	});

	async function btnSalvaNota() {
		// Ottieni i dati dalla modale
		var tipoNotaValue = $('#tipi-nota-select').val();
		var tipoNotaText = $('#tipi-nota-select option:selected').text();
		var nota_testo = $('#txtNota_Testo').val();

		// Prepara i dati per il salvataggio
		var requestData = {
			UIDAtto: '@Model.Atto.UIDAtto',
			TipoEnum: tipoNotaValue,
			Nota: nota_testo
		};

		var url = '@Url.Action("Salva_Nota", "DASI")';

		const response = await fetch(url, {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json'
			},
			body: JSON.stringify(requestData)
		});

		if (!response.ok) {
			throw new Error('Network response was not ok');
		}

		try {
			const errorData = await response.json();
			if (errorData !== "OK") { ErrorAlert(errorData.message); return; }

		} catch (error) {
			// ignored
		}

		var row = $('#tableNoteGenerali tbody tr').filter(function () {
			return $(this).find('td:eq(0)').text().trim() === tipoNotaText;
		});

		if (row.length > 0) {
			// Aggiorna la riga esistente se trovata
			row.find('td:eq(0)').text(tipoNotaText);
			row.find('td:eq(1)').text(nota_testo);
			row.find('td:eq(2)').text('@Html.Raw(Model.CurrentUser.DisplayName)'); // Aggiorna con l'utente corrente
		} else {
			// Aggiungi una nuova riga se non esiste
			var newRow = document.createElement('tr');
			newRow.innerHTML = `
				<td>${tipoNotaText}</td>
				<td>${nota_testo}</td>
				<td>@Html.Raw(Model.CurrentUser.DisplayName)</td>
				<td>
					<a onclick="modificaNota(this, '${tipoNotaText}')"><i class="material-icons">edit</i></a>
					<a class="red-text" onclick="rimuoviNota(this, ${tipoNotaValue})"><i class="material-icons">close</i></a>
				</td>
			`;

			document.querySelector('#tableNoteGenerali tbody').appendChild(newRow);
		}

		$('#empty-note').hide();
		M.toast({
			html: `<span>Nota salvata con successo</span>`,
			classes: 'rounded',
			displayLength: 5000
		});

		// Chiudi la modale
		$('#modalNota').modal('close');
	}

	function rimuoviNota(ctrl, tipoNota) {
		var row = $(ctrl).closest('tr');
		var id = tipoNota;

		swal({
			title: "Rimuovi nota",
			text: "Sei sicuro di voler rimuovere questa nota?",
			icon: "warning",
			buttons: ["Annulla", "Rimuovi"]
		}).then(async (answer) => {
			if (answer) {
				// Simula la richiesta al server per rimuovere i dati
				var url = '@Url.Action("Salva_RimuoviNota", "DASI")';
				const response = await fetch(url, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify({ TipoEnum: id, UIDAtto: '@Model.Atto.UIDAtto' })
				});

				if (!response.ok) {
					throw new Error('Network response was not ok');
				}

				try {
					const errorData = await response.json();
					if (errorData !== "OK") { ErrorAlert(errorData.message); return; }

				} catch (error) {
					// ignored
				}

				// Rimuovi la riga dalla tabella
				row.remove();

				M.toast({
					html: `<span>Nota rimossa con successo</span>`,
					classes: 'rounded',
					displayLength: 5000
				});
			}
		});
	}

	function modificaNota(ctrl) {
		// Ottieni la riga selezionata
		var row = $(ctrl).closest('tr');

		// Ottieni i dati dalla riga
		var tipoNotaText = row.find('td:eq(0)').text().trim(); // Tipo nota
		var notaTesto = row.find('td:eq(1)').text().trim(); // Testo della nota

		// Trova il valore del tipo di nota nel select utilizzando il testo
		$('#tipi-nota-select option').each(function () {
			if ($(this).text().trim() === tipoNotaText) {
				// Se il testo corrisponde, seleziona questa opzione
				$('#tipi-nota-select').val($(this).val()).formSelect();
			}
		});

		// Precompila il campo di testo della nota
		$('#txtNota_Testo').val(notaTesto);

		// Apri la modale
		$('#modalNota').modal('open');
	}

    function CambiaPrioritaFirma(ctrl, uidAtto, uidPersona) {

        var body = {};
        body.UIDAtto = uidAtto;
        body.UID_persona = uidPersona;

        var url = "@Url.Action("CambiaPrioritaFirma", "DASI")";
        $.ajax({
            url: url,
            type: "POST",
            data: JSON.stringify(body),
            contentType: "application/json; charset=utf-8",
            dataType: "json",
            beforeSend: function() {
                console.log("RICHIESTA INVIATA");
                waiting(true, "Elaborazione in corso..");
            },
            success: function(response, status, xhr) {
                if (response.message) {
                    swal({
                        title: "Azione non permessa",
                        text: response.message,
                        icon: "error"
                    });
                    return;
                }
                var elem = $(ctrl).find('i');
                if (elem.text() == "star") {
                    elem.text("star_border");
                    elem.removeClass("black-text");
                } else {
                    elem.text("star");
                    elem.addClass("black-text");
                }
            },
            error: function(xhr, status, error) {
                console.error("Errore nella richiesta: " + status + ". Motivo: " + error);
                waiting(false);
            },
            complete: function() {
                console.log("OK");
                waiting(false);
            },
            cache: false,
            processData: false
        });
    }

		</script>
	</body>
</html>